// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package managers

import (
	sql "database/sql"
	json "encoding/json"
	structs "github.com/CalebRose/SimFBA/structs"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers(in *jlexer.Lexer, out *CollegeTeamProfileData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CareerStats":
			if in.IsNull() {
				in.Skip()
				out.CareerStats = nil
			} else {
				in.Delim('[')
				if out.CareerStats == nil {
					if !in.IsDelim(']') {
						out.CareerStats = make([]structs.CollegePlayerSeasonStats, 0, 0)
					} else {
						out.CareerStats = []structs.CollegePlayerSeasonStats{}
					}
				} else {
					out.CareerStats = (out.CareerStats)[:0]
				}
				for !in.IsDelim(']') {
					var v1 structs.CollegePlayerSeasonStats
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs(in, &v1)
					out.CareerStats = append(out.CareerStats, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CollegeStandings":
			if in.IsNull() {
				in.Skip()
				out.CollegeStandings = nil
			} else {
				in.Delim('[')
				if out.CollegeStandings == nil {
					if !in.IsDelim(']') {
						out.CollegeStandings = make([]structs.CollegeStandings, 0, 0)
					} else {
						out.CollegeStandings = []structs.CollegeStandings{}
					}
				} else {
					out.CollegeStandings = (out.CollegeStandings)[:0]
				}
				for !in.IsDelim(']') {
					var v2 structs.CollegeStandings
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs1(in, &v2)
					out.CollegeStandings = append(out.CollegeStandings, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rivalries":
			if in.IsNull() {
				in.Skip()
				out.Rivalries = nil
			} else {
				in.Delim('[')
				if out.Rivalries == nil {
					if !in.IsDelim(']') {
						out.Rivalries = make([]structs.FlexComparisonModel, 0, 0)
					} else {
						out.Rivalries = []structs.FlexComparisonModel{}
					}
				} else {
					out.Rivalries = (out.Rivalries)[:0]
				}
				for !in.IsDelim(']') {
					var v3 structs.FlexComparisonModel
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs2(in, &v3)
					out.Rivalries = append(out.Rivalries, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PlayerMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PlayerMap = make(map[uint]structs.CollegePlayer)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v4 structs.CollegePlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &v4)
					(out.PlayerMap)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CollegeGames":
			if in.IsNull() {
				in.Skip()
				out.CollegeGames = nil
			} else {
				in.Delim('[')
				if out.CollegeGames == nil {
					if !in.IsDelim(']') {
						out.CollegeGames = make([]structs.CollegeGame, 0, 0)
					} else {
						out.CollegeGames = []structs.CollegeGame{}
					}
				} else {
					out.CollegeGames = (out.CollegeGames)[:0]
				}
				for !in.IsDelim(']') {
					var v5 structs.CollegeGame
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs4(in, &v5)
					out.CollegeGames = append(out.CollegeGames, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers(out *jwriter.Writer, in CollegeTeamProfileData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CareerStats\":"
		out.RawString(prefix[1:])
		if in.CareerStats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.CareerStats {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CollegeStandings\":"
		out.RawString(prefix)
		if in.CollegeStandings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.CollegeStandings {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs1(out, v9)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Rivalries\":"
		out.RawString(prefix)
		if in.Rivalries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Rivalries {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs2(out, v11)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PlayerMap\":"
		out.RawString(prefix)
		if in.PlayerMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.PlayerMap {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v12Name))
				out.RawByte(':')
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, v12Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CollegeGames\":"
		out.RawString(prefix)
		if in.CollegeGames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.CollegeGames {
				if v13 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs4(out, v14)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CollegeTeamProfileData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CollegeTeamProfileData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CollegeTeamProfileData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CollegeTeamProfileData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers(l, v)
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs4(in *jlexer.Lexer, out *structs.CollegeGame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "WeekID":
			out.WeekID = int(in.Int())
		case "Week":
			out.Week = int(in.Int())
		case "SeasonID":
			out.SeasonID = int(in.Int())
		case "HomeTeamRank":
			out.HomeTeamRank = uint(in.Uint())
		case "HomeTeamID":
			out.HomeTeamID = int(in.Int())
		case "HomeTeam":
			out.HomeTeam = string(in.String())
		case "HomeTeamCoach":
			out.HomeTeamCoach = string(in.String())
		case "HomeTeamWin":
			out.HomeTeamWin = bool(in.Bool())
		case "AwayTeamRank":
			out.AwayTeamRank = uint(in.Uint())
		case "AwayTeamID":
			out.AwayTeamID = int(in.Int())
		case "AwayTeam":
			out.AwayTeam = string(in.String())
		case "AwayTeamCoach":
			out.AwayTeamCoach = string(in.String())
		case "AwayTeamWin":
			out.AwayTeamWin = bool(in.Bool())
		case "MVP":
			out.MVP = string(in.String())
		case "HomeTeamScore":
			out.HomeTeamScore = int(in.Int())
		case "AwayTeamScore":
			out.AwayTeamScore = int(in.Int())
		case "TimeSlot":
			out.TimeSlot = string(in.String())
		case "StadiumID":
			out.StadiumID = uint(in.Uint())
		case "Stadium":
			out.Stadium = string(in.String())
		case "City":
			out.City = string(in.String())
		case "State":
			out.State = string(in.String())
		case "Region":
			out.Region = string(in.String())
		case "LowTemp":
			out.LowTemp = float64(in.Float64())
		case "HighTemp":
			out.HighTemp = float64(in.Float64())
		case "GameTemp":
			out.GameTemp = float64(in.Float64())
		case "Cloud":
			out.Cloud = string(in.String())
		case "Precip":
			out.Precip = string(in.String())
		case "WindSpeed":
			out.WindSpeed = float64(in.Float64())
		case "WindCategory":
			out.WindCategory = string(in.String())
		case "IsNeutral":
			out.IsNeutral = bool(in.Bool())
		case "IsDomed":
			out.IsDomed = bool(in.Bool())
		case "IsNightGame":
			out.IsNightGame = bool(in.Bool())
		case "IsConference":
			out.IsConference = bool(in.Bool())
		case "IsDivisional":
			out.IsDivisional = bool(in.Bool())
		case "IsConferenceChampionship":
			out.IsConferenceChampionship = bool(in.Bool())
		case "IsBowlGame":
			out.IsBowlGame = bool(in.Bool())
		case "IsPlayoffGame":
			out.IsPlayoffGame = bool(in.Bool())
		case "IsNationalChampionship":
			out.IsNationalChampionship = bool(in.Bool())
		case "IsRivalryGame":
			out.IsRivalryGame = bool(in.Bool())
		case "GameComplete":
			out.GameComplete = bool(in.Bool())
		case "IsSpringGame":
			out.IsSpringGame = bool(in.Bool())
		case "GameTitle":
			out.GameTitle = string(in.String())
		case "NextGameID":
			out.NextGameID = uint(in.Uint())
		case "NextGameHOA":
			out.NextGameHOA = string(in.String())
		case "HomePreviousBye":
			out.HomePreviousBye = bool(in.Bool())
		case "AwayPreviousBye":
			out.AwayPreviousBye = bool(in.Bool())
		case "ConferenceID":
			out.ConferenceID = uint(in.Uint())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs4(out *jwriter.Writer, in structs.CollegeGame) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"WeekID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.WeekID))
	}
	{
		const prefix string = ",\"Week\":"
		out.RawString(prefix)
		out.Int(int(in.Week))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"HomeTeamRank\":"
		out.RawString(prefix)
		out.Uint(uint(in.HomeTeamRank))
	}
	{
		const prefix string = ",\"HomeTeamID\":"
		out.RawString(prefix)
		out.Int(int(in.HomeTeamID))
	}
	{
		const prefix string = ",\"HomeTeam\":"
		out.RawString(prefix)
		out.String(string(in.HomeTeam))
	}
	{
		const prefix string = ",\"HomeTeamCoach\":"
		out.RawString(prefix)
		out.String(string(in.HomeTeamCoach))
	}
	{
		const prefix string = ",\"HomeTeamWin\":"
		out.RawString(prefix)
		out.Bool(bool(in.HomeTeamWin))
	}
	{
		const prefix string = ",\"AwayTeamRank\":"
		out.RawString(prefix)
		out.Uint(uint(in.AwayTeamRank))
	}
	{
		const prefix string = ",\"AwayTeamID\":"
		out.RawString(prefix)
		out.Int(int(in.AwayTeamID))
	}
	{
		const prefix string = ",\"AwayTeam\":"
		out.RawString(prefix)
		out.String(string(in.AwayTeam))
	}
	{
		const prefix string = ",\"AwayTeamCoach\":"
		out.RawString(prefix)
		out.String(string(in.AwayTeamCoach))
	}
	{
		const prefix string = ",\"AwayTeamWin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AwayTeamWin))
	}
	{
		const prefix string = ",\"MVP\":"
		out.RawString(prefix)
		out.String(string(in.MVP))
	}
	{
		const prefix string = ",\"HomeTeamScore\":"
		out.RawString(prefix)
		out.Int(int(in.HomeTeamScore))
	}
	{
		const prefix string = ",\"AwayTeamScore\":"
		out.RawString(prefix)
		out.Int(int(in.AwayTeamScore))
	}
	{
		const prefix string = ",\"TimeSlot\":"
		out.RawString(prefix)
		out.String(string(in.TimeSlot))
	}
	{
		const prefix string = ",\"StadiumID\":"
		out.RawString(prefix)
		out.Uint(uint(in.StadiumID))
	}
	{
		const prefix string = ",\"Stadium\":"
		out.RawString(prefix)
		out.String(string(in.Stadium))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"Region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"LowTemp\":"
		out.RawString(prefix)
		out.Float64(float64(in.LowTemp))
	}
	{
		const prefix string = ",\"HighTemp\":"
		out.RawString(prefix)
		out.Float64(float64(in.HighTemp))
	}
	{
		const prefix string = ",\"GameTemp\":"
		out.RawString(prefix)
		out.Float64(float64(in.GameTemp))
	}
	{
		const prefix string = ",\"Cloud\":"
		out.RawString(prefix)
		out.String(string(in.Cloud))
	}
	{
		const prefix string = ",\"Precip\":"
		out.RawString(prefix)
		out.String(string(in.Precip))
	}
	{
		const prefix string = ",\"WindSpeed\":"
		out.RawString(prefix)
		out.Float64(float64(in.WindSpeed))
	}
	{
		const prefix string = ",\"WindCategory\":"
		out.RawString(prefix)
		out.String(string(in.WindCategory))
	}
	{
		const prefix string = ",\"IsNeutral\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNeutral))
	}
	{
		const prefix string = ",\"IsDomed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDomed))
	}
	{
		const prefix string = ",\"IsNightGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNightGame))
	}
	{
		const prefix string = ",\"IsConference\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsConference))
	}
	{
		const prefix string = ",\"IsDivisional\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDivisional))
	}
	{
		const prefix string = ",\"IsConferenceChampionship\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsConferenceChampionship))
	}
	{
		const prefix string = ",\"IsBowlGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBowlGame))
	}
	{
		const prefix string = ",\"IsPlayoffGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPlayoffGame))
	}
	{
		const prefix string = ",\"IsNationalChampionship\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNationalChampionship))
	}
	{
		const prefix string = ",\"IsRivalryGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRivalryGame))
	}
	{
		const prefix string = ",\"GameComplete\":"
		out.RawString(prefix)
		out.Bool(bool(in.GameComplete))
	}
	{
		const prefix string = ",\"IsSpringGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSpringGame))
	}
	{
		const prefix string = ",\"GameTitle\":"
		out.RawString(prefix)
		out.String(string(in.GameTitle))
	}
	{
		const prefix string = ",\"NextGameID\":"
		out.RawString(prefix)
		out.Uint(uint(in.NextGameID))
	}
	{
		const prefix string = ",\"NextGameHOA\":"
		out.RawString(prefix)
		out.String(string(in.NextGameHOA))
	}
	{
		const prefix string = ",\"HomePreviousBye\":"
		out.RawString(prefix)
		out.Bool(bool(in.HomePreviousBye))
	}
	{
		const prefix string = ",\"AwayPreviousBye\":"
		out.RawString(prefix)
		out.Bool(bool(in.AwayPreviousBye))
	}
	{
		const prefix string = ",\"ConferenceID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ConferenceID))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in *jlexer.Lexer, out *structs.CollegePlayer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PlayerID":
			out.PlayerID = int(in.Int())
		case "TeamID":
			out.TeamID = int(in.Int())
		case "TeamAbbr":
			out.TeamAbbr = string(in.String())
		case "HighSchool":
			out.HighSchool = string(in.String())
		case "City":
			out.City = string(in.String())
		case "State":
			out.State = string(in.String())
		case "Year":
			out.Year = int(in.Int())
		case "IsRedshirt":
			out.IsRedshirt = bool(in.Bool())
		case "IsRedshirting":
			out.IsRedshirting = bool(in.Bool())
		case "HasGraduated":
			out.HasGraduated = bool(in.Bool())
		case "TransferStatus":
			out.TransferStatus = int(in.Int())
		case "TransferLikeliness":
			out.TransferLikeliness = string(in.String())
		case "Stats":
			if in.IsNull() {
				in.Skip()
				out.Stats = nil
			} else {
				in.Delim('[')
				if out.Stats == nil {
					if !in.IsDelim(']') {
						out.Stats = make([]structs.CollegePlayerStats, 0, 0)
					} else {
						out.Stats = []structs.CollegePlayerStats{}
					}
				} else {
					out.Stats = (out.Stats)[:0]
				}
				for !in.IsDelim(']') {
					var v15 structs.CollegePlayerStats
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs5(in, &v15)
					out.Stats = append(out.Stats, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SeasonStats":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs(in, &out.SeasonStats)
		case "HasProgressed":
			out.HasProgressed = bool(in.Bool())
		case "WillDeclare":
			out.WillDeclare = bool(in.Bool())
		case "LegacyID":
			out.LegacyID = uint(in.Uint())
		case "Profiles":
			if in.IsNull() {
				in.Skip()
				out.Profiles = nil
			} else {
				in.Delim('[')
				if out.Profiles == nil {
					if !in.IsDelim(']') {
						out.Profiles = make([]structs.TransferPortalProfile, 0, 0)
					} else {
						out.Profiles = []structs.TransferPortalProfile{}
					}
				} else {
					out.Profiles = (out.Profiles)[:0]
				}
				for !in.IsDelim(']') {
					var v16 structs.TransferPortalProfile
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs6(in, &v16)
					out.Profiles = append(out.Profiles, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		case "Position":
			out.Position = string(in.String())
		case "Archetype":
			out.Archetype = string(in.String())
		case "PreviousTeamID":
			out.PreviousTeamID = uint(in.Uint())
		case "PreviousTeam":
			out.PreviousTeam = string(in.String())
		case "Height":
			out.Height = int(in.Int())
		case "Weight":
			out.Weight = int(in.Int())
		case "Age":
			out.Age = int(in.Int())
		case "Stars":
			out.Stars = int(in.Int())
		case "Overall":
			out.Overall = int(in.Int())
		case "Stamina":
			out.Stamina = int(in.Int())
		case "Injury":
			out.Injury = int(in.Int())
		case "FootballIQ":
			out.FootballIQ = int(in.Int())
		case "Speed":
			out.Speed = int(in.Int())
		case "Carrying":
			out.Carrying = int(in.Int())
		case "Agility":
			out.Agility = int(in.Int())
		case "Catching":
			out.Catching = int(in.Int())
		case "RouteRunning":
			out.RouteRunning = int(in.Int())
		case "ZoneCoverage":
			out.ZoneCoverage = int(in.Int())
		case "ManCoverage":
			out.ManCoverage = int(in.Int())
		case "Strength":
			out.Strength = int(in.Int())
		case "Tackle":
			out.Tackle = int(in.Int())
		case "PassBlock":
			out.PassBlock = int(in.Int())
		case "RunBlock":
			out.RunBlock = int(in.Int())
		case "PassRush":
			out.PassRush = int(in.Int())
		case "RunDefense":
			out.RunDefense = int(in.Int())
		case "ThrowPower":
			out.ThrowPower = int(in.Int())
		case "ThrowAccuracy":
			out.ThrowAccuracy = int(in.Int())
		case "KickAccuracy":
			out.KickAccuracy = int(in.Int())
		case "KickPower":
			out.KickPower = int(in.Int())
		case "PuntAccuracy":
			out.PuntAccuracy = int(in.Int())
		case "PuntPower":
			out.PuntPower = int(in.Int())
		case "Progression":
			out.Progression = int(in.Int())
		case "Discipline":
			out.Discipline = int(in.Int())
		case "PotentialGrade":
			out.PotentialGrade = string(in.String())
		case "FreeAgency":
			out.FreeAgency = string(in.String())
		case "Personality":
			out.Personality = string(in.String())
		case "RecruitingBias":
			out.RecruitingBias = string(in.String())
		case "WorkEthic":
			out.WorkEthic = string(in.String())
		case "AcademicBias":
			out.AcademicBias = string(in.String())
		case "IsInjured":
			out.IsInjured = bool(in.Bool())
		case "InjuryName":
			out.InjuryName = string(in.String())
		case "InjuryType":
			out.InjuryType = string(in.String())
		case "WeeksOfRecovery":
			out.WeeksOfRecovery = uint(in.Uint())
		case "InjuryReserve":
			out.InjuryReserve = bool(in.Bool())
		case "PrimeAge":
			out.PrimeAge = uint(in.Uint())
		case "Clutch":
			out.Clutch = int(in.Int())
		case "Shotgun":
			out.Shotgun = int(in.Int())
		case "PositionTwo":
			out.PositionTwo = string(in.String())
		case "ArchetypeTwo":
			out.ArchetypeTwo = string(in.String())
		case "RelativeID":
			out.RelativeID = uint(in.Uint())
		case "RelativeType":
			out.RelativeType = uint(in.Uint())
		case "Notes":
			out.Notes = string(in.String())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out *jwriter.Writer, in structs.CollegePlayer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlayerID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"TeamAbbr\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbr))
	}
	{
		const prefix string = ",\"HighSchool\":"
		out.RawString(prefix)
		out.String(string(in.HighSchool))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"Year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"IsRedshirt\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRedshirt))
	}
	{
		const prefix string = ",\"IsRedshirting\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRedshirting))
	}
	{
		const prefix string = ",\"HasGraduated\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasGraduated))
	}
	{
		const prefix string = ",\"TransferStatus\":"
		out.RawString(prefix)
		out.Int(int(in.TransferStatus))
	}
	{
		const prefix string = ",\"TransferLikeliness\":"
		out.RawString(prefix)
		out.String(string(in.TransferLikeliness))
	}
	{
		const prefix string = ",\"Stats\":"
		out.RawString(prefix)
		if in.Stats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Stats {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs5(out, v18)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SeasonStats\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs(out, in.SeasonStats)
	}
	{
		const prefix string = ",\"HasProgressed\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasProgressed))
	}
	{
		const prefix string = ",\"WillDeclare\":"
		out.RawString(prefix)
		out.Bool(bool(in.WillDeclare))
	}
	{
		const prefix string = ",\"LegacyID\":"
		out.RawString(prefix)
		out.Uint(uint(in.LegacyID))
	}
	{
		const prefix string = ",\"Profiles\":"
		out.RawString(prefix)
		if in.Profiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Profiles {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs6(out, v20)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"Archetype\":"
		out.RawString(prefix)
		out.String(string(in.Archetype))
	}
	{
		const prefix string = ",\"PreviousTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PreviousTeamID))
	}
	{
		const prefix string = ",\"PreviousTeam\":"
		out.RawString(prefix)
		out.String(string(in.PreviousTeam))
	}
	{
		const prefix string = ",\"Height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"Weight\":"
		out.RawString(prefix)
		out.Int(int(in.Weight))
	}
	{
		const prefix string = ",\"Age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"Stars\":"
		out.RawString(prefix)
		out.Int(int(in.Stars))
	}
	{
		const prefix string = ",\"Overall\":"
		out.RawString(prefix)
		out.Int(int(in.Overall))
	}
	{
		const prefix string = ",\"Stamina\":"
		out.RawString(prefix)
		out.Int(int(in.Stamina))
	}
	{
		const prefix string = ",\"Injury\":"
		out.RawString(prefix)
		out.Int(int(in.Injury))
	}
	{
		const prefix string = ",\"FootballIQ\":"
		out.RawString(prefix)
		out.Int(int(in.FootballIQ))
	}
	{
		const prefix string = ",\"Speed\":"
		out.RawString(prefix)
		out.Int(int(in.Speed))
	}
	{
		const prefix string = ",\"Carrying\":"
		out.RawString(prefix)
		out.Int(int(in.Carrying))
	}
	{
		const prefix string = ",\"Agility\":"
		out.RawString(prefix)
		out.Int(int(in.Agility))
	}
	{
		const prefix string = ",\"Catching\":"
		out.RawString(prefix)
		out.Int(int(in.Catching))
	}
	{
		const prefix string = ",\"RouteRunning\":"
		out.RawString(prefix)
		out.Int(int(in.RouteRunning))
	}
	{
		const prefix string = ",\"ZoneCoverage\":"
		out.RawString(prefix)
		out.Int(int(in.ZoneCoverage))
	}
	{
		const prefix string = ",\"ManCoverage\":"
		out.RawString(prefix)
		out.Int(int(in.ManCoverage))
	}
	{
		const prefix string = ",\"Strength\":"
		out.RawString(prefix)
		out.Int(int(in.Strength))
	}
	{
		const prefix string = ",\"Tackle\":"
		out.RawString(prefix)
		out.Int(int(in.Tackle))
	}
	{
		const prefix string = ",\"PassBlock\":"
		out.RawString(prefix)
		out.Int(int(in.PassBlock))
	}
	{
		const prefix string = ",\"RunBlock\":"
		out.RawString(prefix)
		out.Int(int(in.RunBlock))
	}
	{
		const prefix string = ",\"PassRush\":"
		out.RawString(prefix)
		out.Int(int(in.PassRush))
	}
	{
		const prefix string = ",\"RunDefense\":"
		out.RawString(prefix)
		out.Int(int(in.RunDefense))
	}
	{
		const prefix string = ",\"ThrowPower\":"
		out.RawString(prefix)
		out.Int(int(in.ThrowPower))
	}
	{
		const prefix string = ",\"ThrowAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.ThrowAccuracy))
	}
	{
		const prefix string = ",\"KickAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.KickAccuracy))
	}
	{
		const prefix string = ",\"KickPower\":"
		out.RawString(prefix)
		out.Int(int(in.KickPower))
	}
	{
		const prefix string = ",\"PuntAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.PuntAccuracy))
	}
	{
		const prefix string = ",\"PuntPower\":"
		out.RawString(prefix)
		out.Int(int(in.PuntPower))
	}
	{
		const prefix string = ",\"Progression\":"
		out.RawString(prefix)
		out.Int(int(in.Progression))
	}
	{
		const prefix string = ",\"Discipline\":"
		out.RawString(prefix)
		out.Int(int(in.Discipline))
	}
	{
		const prefix string = ",\"PotentialGrade\":"
		out.RawString(prefix)
		out.String(string(in.PotentialGrade))
	}
	{
		const prefix string = ",\"FreeAgency\":"
		out.RawString(prefix)
		out.String(string(in.FreeAgency))
	}
	{
		const prefix string = ",\"Personality\":"
		out.RawString(prefix)
		out.String(string(in.Personality))
	}
	{
		const prefix string = ",\"RecruitingBias\":"
		out.RawString(prefix)
		out.String(string(in.RecruitingBias))
	}
	{
		const prefix string = ",\"WorkEthic\":"
		out.RawString(prefix)
		out.String(string(in.WorkEthic))
	}
	{
		const prefix string = ",\"AcademicBias\":"
		out.RawString(prefix)
		out.String(string(in.AcademicBias))
	}
	{
		const prefix string = ",\"IsInjured\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsInjured))
	}
	{
		const prefix string = ",\"InjuryName\":"
		out.RawString(prefix)
		out.String(string(in.InjuryName))
	}
	{
		const prefix string = ",\"InjuryType\":"
		out.RawString(prefix)
		out.String(string(in.InjuryType))
	}
	{
		const prefix string = ",\"WeeksOfRecovery\":"
		out.RawString(prefix)
		out.Uint(uint(in.WeeksOfRecovery))
	}
	{
		const prefix string = ",\"InjuryReserve\":"
		out.RawString(prefix)
		out.Bool(bool(in.InjuryReserve))
	}
	{
		const prefix string = ",\"PrimeAge\":"
		out.RawString(prefix)
		out.Uint(uint(in.PrimeAge))
	}
	{
		const prefix string = ",\"Clutch\":"
		out.RawString(prefix)
		out.Int(int(in.Clutch))
	}
	{
		const prefix string = ",\"Shotgun\":"
		out.RawString(prefix)
		out.Int(int(in.Shotgun))
	}
	{
		const prefix string = ",\"PositionTwo\":"
		out.RawString(prefix)
		out.String(string(in.PositionTwo))
	}
	{
		const prefix string = ",\"ArchetypeTwo\":"
		out.RawString(prefix)
		out.String(string(in.ArchetypeTwo))
	}
	{
		const prefix string = ",\"RelativeID\":"
		out.RawString(prefix)
		out.Uint(uint(in.RelativeID))
	}
	{
		const prefix string = ",\"RelativeType\":"
		out.RawString(prefix)
		out.Uint(uint(in.RelativeType))
	}
	{
		const prefix string = ",\"Notes\":"
		out.RawString(prefix)
		out.String(string(in.Notes))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs6(in *jlexer.Lexer, out *structs.TransferPortalProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "CollegePlayerID":
			out.CollegePlayerID = uint(in.Uint())
		case "ProfileID":
			out.ProfileID = uint(in.Uint())
		case "PromiseID":
			easyjson83226b63DecodeDatabaseSql(in, &out.PromiseID)
		case "TeamAbbreviation":
			out.TeamAbbreviation = string(in.String())
		case "TotalPoints":
			out.TotalPoints = float64(in.Float64())
		case "CurrentWeeksPoints":
			out.CurrentWeeksPoints = int(in.Int())
		case "PreviouslySpentPoints":
			out.PreviouslySpentPoints = int(in.Int())
		case "SpendingCount":
			out.SpendingCount = int(in.Int())
		case "RemovedFromBoard":
			out.RemovedFromBoard = bool(in.Bool())
		case "RolledOnPromise":
			out.RolledOnPromise = bool(in.Bool())
		case "LockProfile":
			out.LockProfile = bool(in.Bool())
		case "IsSigned":
			out.IsSigned = bool(in.Bool())
		case "Recruiter":
			out.Recruiter = string(in.String())
		case "CollegePlayer":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &out.CollegePlayer)
		case "Promise":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs7(in, &out.Promise)
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs6(out *jwriter.Writer, in structs.TransferPortalProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"CollegePlayerID\":"
		out.RawString(prefix)
		out.Uint(uint(in.CollegePlayerID))
	}
	{
		const prefix string = ",\"ProfileID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ProfileID))
	}
	{
		const prefix string = ",\"PromiseID\":"
		out.RawString(prefix)
		easyjson83226b63EncodeDatabaseSql(out, in.PromiseID)
	}
	{
		const prefix string = ",\"TeamAbbreviation\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbreviation))
	}
	{
		const prefix string = ",\"TotalPoints\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPoints))
	}
	{
		const prefix string = ",\"CurrentWeeksPoints\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentWeeksPoints))
	}
	{
		const prefix string = ",\"PreviouslySpentPoints\":"
		out.RawString(prefix)
		out.Int(int(in.PreviouslySpentPoints))
	}
	{
		const prefix string = ",\"SpendingCount\":"
		out.RawString(prefix)
		out.Int(int(in.SpendingCount))
	}
	{
		const prefix string = ",\"RemovedFromBoard\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemovedFromBoard))
	}
	{
		const prefix string = ",\"RolledOnPromise\":"
		out.RawString(prefix)
		out.Bool(bool(in.RolledOnPromise))
	}
	{
		const prefix string = ",\"LockProfile\":"
		out.RawString(prefix)
		out.Bool(bool(in.LockProfile))
	}
	{
		const prefix string = ",\"IsSigned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSigned))
	}
	{
		const prefix string = ",\"Recruiter\":"
		out.RawString(prefix)
		out.String(string(in.Recruiter))
	}
	{
		const prefix string = ",\"CollegePlayer\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, in.CollegePlayer)
	}
	{
		const prefix string = ",\"Promise\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs7(out, in.Promise)
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs7(in *jlexer.Lexer, out *structs.CollegePromise) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "CollegePlayerID":
			out.CollegePlayerID = uint(in.Uint())
		case "PromiseType":
			out.PromiseType = string(in.String())
		case "PromiseWeight":
			out.PromiseWeight = string(in.String())
		case "Benchmark":
			out.Benchmark = int(in.Int())
		case "BenchmarkStr":
			out.BenchmarkStr = string(in.String())
		case "PromiseMade":
			out.PromiseMade = bool(in.Bool())
		case "IsFullfilled":
			out.IsFullfilled = bool(in.Bool())
		case "IsActive":
			out.IsActive = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs7(out *jwriter.Writer, in structs.CollegePromise) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"CollegePlayerID\":"
		out.RawString(prefix)
		out.Uint(uint(in.CollegePlayerID))
	}
	{
		const prefix string = ",\"PromiseType\":"
		out.RawString(prefix)
		out.String(string(in.PromiseType))
	}
	{
		const prefix string = ",\"PromiseWeight\":"
		out.RawString(prefix)
		out.String(string(in.PromiseWeight))
	}
	{
		const prefix string = ",\"Benchmark\":"
		out.RawString(prefix)
		out.Int(int(in.Benchmark))
	}
	{
		const prefix string = ",\"BenchmarkStr\":"
		out.RawString(prefix)
		out.String(string(in.BenchmarkStr))
	}
	{
		const prefix string = ",\"PromiseMade\":"
		out.RawString(prefix)
		out.Bool(bool(in.PromiseMade))
	}
	{
		const prefix string = ",\"IsFullfilled\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFullfilled))
	}
	{
		const prefix string = ",\"IsActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullInt64) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Int64":
			out.Int64 = int64(in.Int64())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeDatabaseSql(out *jwriter.Writer, in sql.NullInt64) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Int64\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Int64))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs5(in *jlexer.Lexer, out *structs.CollegePlayerStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CollegePlayerID":
			out.CollegePlayerID = int(in.Int())
		case "GameID":
			out.GameID = int(in.Int())
		case "WeekID":
			out.WeekID = int(in.Int())
		case "SeasonID":
			out.SeasonID = int(in.Int())
		case "OpposingTeam":
			out.OpposingTeam = string(in.String())
		case "Year":
			out.Year = int(in.Int())
		case "IsRedshirt":
			out.IsRedshirt = bool(in.Bool())
		case "PassingYards":
			out.PassingYards = int(in.Int())
		case "PassAttempts":
			out.PassAttempts = int(in.Int())
		case "PassCompletions":
			out.PassCompletions = int(in.Int())
		case "PassingTDs":
			out.PassingTDs = int(in.Int())
		case "Interceptions":
			out.Interceptions = int(in.Int())
		case "LongestPass":
			out.LongestPass = int(in.Int())
		case "Sacks":
			out.Sacks = int(in.Int())
		case "RushAttempts":
			out.RushAttempts = int(in.Int())
		case "RushingYards":
			out.RushingYards = int(in.Int())
		case "RushingTDs":
			out.RushingTDs = int(in.Int())
		case "Fumbles":
			out.Fumbles = int(in.Int())
		case "LongestRush":
			out.LongestRush = int(in.Int())
		case "Targets":
			out.Targets = int(in.Int())
		case "Catches":
			out.Catches = int(in.Int())
		case "ReceivingYards":
			out.ReceivingYards = int(in.Int())
		case "ReceivingTDs":
			out.ReceivingTDs = int(in.Int())
		case "LongestReception":
			out.LongestReception = int(in.Int())
		case "SoloTackles":
			out.SoloTackles = float64(in.Float64())
		case "AssistedTackles":
			out.AssistedTackles = float64(in.Float64())
		case "TacklesForLoss":
			out.TacklesForLoss = float64(in.Float64())
		case "SacksMade":
			out.SacksMade = float64(in.Float64())
		case "ForcedFumbles":
			out.ForcedFumbles = int(in.Int())
		case "RecoveredFumbles":
			out.RecoveredFumbles = int(in.Int())
		case "PassDeflections":
			out.PassDeflections = int(in.Int())
		case "InterceptionsCaught":
			out.InterceptionsCaught = int(in.Int())
		case "Safeties":
			out.Safeties = int(in.Int())
		case "DefensiveTDs":
			out.DefensiveTDs = int(in.Int())
		case "FGMade":
			out.FGMade = int(in.Int())
		case "FGAttempts":
			out.FGAttempts = int(in.Int())
		case "LongestFG":
			out.LongestFG = int(in.Int())
		case "ExtraPointsMade":
			out.ExtraPointsMade = int(in.Int())
		case "ExtraPointsAttempted":
			out.ExtraPointsAttempted = int(in.Int())
		case "KickoffTouchbacks":
			out.KickoffTouchbacks = int(in.Int())
		case "Punts":
			out.Punts = int(in.Int())
		case "GrossPuntDistance":
			out.GrossPuntDistance = int(in.Int())
		case "NetPuntDistance":
			out.NetPuntDistance = int(in.Int())
		case "PuntTouchbacks":
			out.PuntTouchbacks = int(in.Int())
		case "PuntsInside20":
			out.PuntsInside20 = int(in.Int())
		case "KickReturns":
			out.KickReturns = int(in.Int())
		case "KickReturnTDs":
			out.KickReturnTDs = int(in.Int())
		case "KickReturnYards":
			out.KickReturnYards = int(in.Int())
		case "PuntReturns":
			out.PuntReturns = int(in.Int())
		case "PuntReturnTDs":
			out.PuntReturnTDs = int(in.Int())
		case "PuntReturnYards":
			out.PuntReturnYards = int(in.Int())
		case "STSoloTackles":
			out.STSoloTackles = float64(in.Float64())
		case "STAssistedTackles":
			out.STAssistedTackles = float64(in.Float64())
		case "PuntsBlocked":
			out.PuntsBlocked = int(in.Int())
		case "FGBlocked":
			out.FGBlocked = int(in.Int())
		case "Snaps":
			out.Snaps = int(in.Int())
		case "Pancakes":
			out.Pancakes = int(in.Int())
		case "SacksAllowed":
			out.SacksAllowed = int(in.Int())
		case "PlayedGame":
			out.PlayedGame = int(in.Int())
		case "StartedGame":
			out.StartedGame = int(in.Int())
		case "WasInjured":
			out.WasInjured = bool(in.Bool())
		case "WeeksOfRecovery":
			out.WeeksOfRecovery = uint(in.Uint())
		case "InjuryType":
			out.InjuryType = string(in.String())
		case "RevealResults":
			out.RevealResults = bool(in.Bool())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "PreviousTeamID":
			out.PreviousTeamID = uint(in.Uint())
		case "PreviousTeam":
			out.PreviousTeam = string(in.String())
		case "GameType":
			out.GameType = uint8(in.Uint8())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs5(out *jwriter.Writer, in structs.CollegePlayerStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CollegePlayerID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CollegePlayerID))
	}
	{
		const prefix string = ",\"GameID\":"
		out.RawString(prefix)
		out.Int(int(in.GameID))
	}
	{
		const prefix string = ",\"WeekID\":"
		out.RawString(prefix)
		out.Int(int(in.WeekID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"OpposingTeam\":"
		out.RawString(prefix)
		out.String(string(in.OpposingTeam))
	}
	{
		const prefix string = ",\"Year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"IsRedshirt\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRedshirt))
	}
	{
		const prefix string = ",\"PassingYards\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYards))
	}
	{
		const prefix string = ",\"PassAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.PassAttempts))
	}
	{
		const prefix string = ",\"PassCompletions\":"
		out.RawString(prefix)
		out.Int(int(in.PassCompletions))
	}
	{
		const prefix string = ",\"PassingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDs))
	}
	{
		const prefix string = ",\"Interceptions\":"
		out.RawString(prefix)
		out.Int(int(in.Interceptions))
	}
	{
		const prefix string = ",\"LongestPass\":"
		out.RawString(prefix)
		out.Int(int(in.LongestPass))
	}
	{
		const prefix string = ",\"Sacks\":"
		out.RawString(prefix)
		out.Int(int(in.Sacks))
	}
	{
		const prefix string = ",\"RushAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.RushAttempts))
	}
	{
		const prefix string = ",\"RushingYards\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYards))
	}
	{
		const prefix string = ",\"RushingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDs))
	}
	{
		const prefix string = ",\"Fumbles\":"
		out.RawString(prefix)
		out.Int(int(in.Fumbles))
	}
	{
		const prefix string = ",\"LongestRush\":"
		out.RawString(prefix)
		out.Int(int(in.LongestRush))
	}
	{
		const prefix string = ",\"Targets\":"
		out.RawString(prefix)
		out.Int(int(in.Targets))
	}
	{
		const prefix string = ",\"Catches\":"
		out.RawString(prefix)
		out.Int(int(in.Catches))
	}
	{
		const prefix string = ",\"ReceivingYards\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYards))
	}
	{
		const prefix string = ",\"ReceivingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDs))
	}
	{
		const prefix string = ",\"LongestReception\":"
		out.RawString(prefix)
		out.Int(int(in.LongestReception))
	}
	{
		const prefix string = ",\"SoloTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.SoloTackles))
	}
	{
		const prefix string = ",\"AssistedTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.AssistedTackles))
	}
	{
		const prefix string = ",\"TacklesForLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.TacklesForLoss))
	}
	{
		const prefix string = ",\"SacksMade\":"
		out.RawString(prefix)
		out.Float64(float64(in.SacksMade))
	}
	{
		const prefix string = ",\"ForcedFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ForcedFumbles))
	}
	{
		const prefix string = ",\"RecoveredFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.RecoveredFumbles))
	}
	{
		const prefix string = ",\"PassDeflections\":"
		out.RawString(prefix)
		out.Int(int(in.PassDeflections))
	}
	{
		const prefix string = ",\"InterceptionsCaught\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsCaught))
	}
	{
		const prefix string = ",\"Safeties\":"
		out.RawString(prefix)
		out.Int(int(in.Safeties))
	}
	{
		const prefix string = ",\"DefensiveTDs\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveTDs))
	}
	{
		const prefix string = ",\"FGMade\":"
		out.RawString(prefix)
		out.Int(int(in.FGMade))
	}
	{
		const prefix string = ",\"FGAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.FGAttempts))
	}
	{
		const prefix string = ",\"LongestFG\":"
		out.RawString(prefix)
		out.Int(int(in.LongestFG))
	}
	{
		const prefix string = ",\"ExtraPointsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsMade))
	}
	{
		const prefix string = ",\"ExtraPointsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsAttempted))
	}
	{
		const prefix string = ",\"KickoffTouchbacks\":"
		out.RawString(prefix)
		out.Int(int(in.KickoffTouchbacks))
	}
	{
		const prefix string = ",\"Punts\":"
		out.RawString(prefix)
		out.Int(int(in.Punts))
	}
	{
		const prefix string = ",\"GrossPuntDistance\":"
		out.RawString(prefix)
		out.Int(int(in.GrossPuntDistance))
	}
	{
		const prefix string = ",\"NetPuntDistance\":"
		out.RawString(prefix)
		out.Int(int(in.NetPuntDistance))
	}
	{
		const prefix string = ",\"PuntTouchbacks\":"
		out.RawString(prefix)
		out.Int(int(in.PuntTouchbacks))
	}
	{
		const prefix string = ",\"PuntsInside20\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsInside20))
	}
	{
		const prefix string = ",\"KickReturns\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturns))
	}
	{
		const prefix string = ",\"KickReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnTDs))
	}
	{
		const prefix string = ",\"KickReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnYards))
	}
	{
		const prefix string = ",\"PuntReturns\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturns))
	}
	{
		const prefix string = ",\"PuntReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnTDs))
	}
	{
		const prefix string = ",\"PuntReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnYards))
	}
	{
		const prefix string = ",\"STSoloTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.STSoloTackles))
	}
	{
		const prefix string = ",\"STAssistedTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.STAssistedTackles))
	}
	{
		const prefix string = ",\"PuntsBlocked\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsBlocked))
	}
	{
		const prefix string = ",\"FGBlocked\":"
		out.RawString(prefix)
		out.Int(int(in.FGBlocked))
	}
	{
		const prefix string = ",\"Snaps\":"
		out.RawString(prefix)
		out.Int(int(in.Snaps))
	}
	{
		const prefix string = ",\"Pancakes\":"
		out.RawString(prefix)
		out.Int(int(in.Pancakes))
	}
	{
		const prefix string = ",\"SacksAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.SacksAllowed))
	}
	{
		const prefix string = ",\"PlayedGame\":"
		out.RawString(prefix)
		out.Int(int(in.PlayedGame))
	}
	{
		const prefix string = ",\"StartedGame\":"
		out.RawString(prefix)
		out.Int(int(in.StartedGame))
	}
	{
		const prefix string = ",\"WasInjured\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasInjured))
	}
	{
		const prefix string = ",\"WeeksOfRecovery\":"
		out.RawString(prefix)
		out.Uint(uint(in.WeeksOfRecovery))
	}
	{
		const prefix string = ",\"InjuryType\":"
		out.RawString(prefix)
		out.String(string(in.InjuryType))
	}
	{
		const prefix string = ",\"RevealResults\":"
		out.RawString(prefix)
		out.Bool(bool(in.RevealResults))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"PreviousTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PreviousTeamID))
	}
	{
		const prefix string = ",\"PreviousTeam\":"
		out.RawString(prefix)
		out.String(string(in.PreviousTeam))
	}
	{
		const prefix string = ",\"GameType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GameType))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs2(in *jlexer.Lexer, out *structs.FlexComparisonModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamOneID":
			out.TeamOneID = uint(in.Uint())
		case "TeamOne":
			out.TeamOne = string(in.String())
		case "TeamOneWins":
			out.TeamOneWins = uint(in.Uint())
		case "TeamOneLosses":
			out.TeamOneLosses = uint(in.Uint())
		case "TeamOneStreak":
			out.TeamOneStreak = uint(in.Uint())
		case "TeamOneMSeason":
			out.TeamOneMSeason = int(in.Int())
		case "TeamOneMScore":
			out.TeamOneMScore = string(in.String())
		case "TeamTwoID":
			out.TeamTwoID = uint(in.Uint())
		case "TeamTwo":
			out.TeamTwo = string(in.String())
		case "TeamTwoWins":
			out.TeamTwoWins = uint(in.Uint())
		case "TeamTwoLosses":
			out.TeamTwoLosses = uint(in.Uint())
		case "TeamTwoStreak":
			out.TeamTwoStreak = uint(in.Uint())
		case "TeamTwoMSeason":
			out.TeamTwoMSeason = int(in.Int())
		case "TeamTwoMScore":
			out.TeamTwoMScore = string(in.String())
		case "CurrentStreak":
			out.CurrentStreak = uint(in.Uint())
		case "LatestWin":
			out.LatestWin = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs2(out *jwriter.Writer, in structs.FlexComparisonModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamOneID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamOneID))
	}
	{
		const prefix string = ",\"TeamOne\":"
		out.RawString(prefix)
		out.String(string(in.TeamOne))
	}
	{
		const prefix string = ",\"TeamOneWins\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamOneWins))
	}
	{
		const prefix string = ",\"TeamOneLosses\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamOneLosses))
	}
	{
		const prefix string = ",\"TeamOneStreak\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamOneStreak))
	}
	{
		const prefix string = ",\"TeamOneMSeason\":"
		out.RawString(prefix)
		out.Int(int(in.TeamOneMSeason))
	}
	{
		const prefix string = ",\"TeamOneMScore\":"
		out.RawString(prefix)
		out.String(string(in.TeamOneMScore))
	}
	{
		const prefix string = ",\"TeamTwoID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamTwoID))
	}
	{
		const prefix string = ",\"TeamTwo\":"
		out.RawString(prefix)
		out.String(string(in.TeamTwo))
	}
	{
		const prefix string = ",\"TeamTwoWins\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamTwoWins))
	}
	{
		const prefix string = ",\"TeamTwoLosses\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamTwoLosses))
	}
	{
		const prefix string = ",\"TeamTwoStreak\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamTwoStreak))
	}
	{
		const prefix string = ",\"TeamTwoMSeason\":"
		out.RawString(prefix)
		out.Int(int(in.TeamTwoMSeason))
	}
	{
		const prefix string = ",\"TeamTwoMScore\":"
		out.RawString(prefix)
		out.String(string(in.TeamTwoMScore))
	}
	{
		const prefix string = ",\"CurrentStreak\":"
		out.RawString(prefix)
		out.Uint(uint(in.CurrentStreak))
	}
	{
		const prefix string = ",\"LatestWin\":"
		out.RawString(prefix)
		out.String(string(in.LatestWin))
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs1(in *jlexer.Lexer, out *structs.CollegeStandings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = int(in.Int())
		case "TeamName":
			out.TeamName = string(in.String())
		case "SeasonID":
			out.SeasonID = int(in.Int())
		case "Season":
			out.Season = int(in.Int())
		case "LeagueID":
			out.LeagueID = uint(in.Uint())
		case "LeagueName":
			out.LeagueName = string(in.String())
		case "ConferenceID":
			out.ConferenceID = int(in.Int())
		case "ConferenceName":
			out.ConferenceName = string(in.String())
		case "DivisionID":
			out.DivisionID = int(in.Int())
		case "PostSeasonStatus":
			out.PostSeasonStatus = string(in.String())
		case "IsFBS":
			out.IsFBS = bool(in.Bool())
		case "Rank":
			out.Rank = uint(in.Uint())
		case "TotalWins":
			out.TotalWins = int(in.Int())
		case "TotalLosses":
			out.TotalLosses = int(in.Int())
		case "ConferenceWins":
			out.ConferenceWins = int(in.Int())
		case "ConferenceLosses":
			out.ConferenceLosses = int(in.Int())
		case "RankedWins":
			out.RankedWins = int(in.Int())
		case "RankedLosses":
			out.RankedLosses = int(in.Int())
		case "PointsFor":
			out.PointsFor = int(in.Int())
		case "PointsAgainst":
			out.PointsAgainst = int(in.Int())
		case "Streak":
			out.Streak = int(in.Int())
		case "HomeWins":
			out.HomeWins = int(in.Int())
		case "AwayWins":
			out.AwayWins = int(in.Int())
		case "Coach":
			out.Coach = string(in.String())
		case "TeamAbbr":
			out.TeamAbbr = string(in.String())
		case "TotalWinPercentage":
			out.TotalWinPercentage = float32(in.Float32())
		case "ConfWinPercentage":
			out.ConfWinPercentage = float32(in.Float32())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs1(out *jwriter.Writer, in structs.CollegeStandings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"TeamName\":"
		out.RawString(prefix)
		out.String(string(in.TeamName))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"Season\":"
		out.RawString(prefix)
		out.Int(int(in.Season))
	}
	{
		const prefix string = ",\"LeagueID\":"
		out.RawString(prefix)
		out.Uint(uint(in.LeagueID))
	}
	{
		const prefix string = ",\"LeagueName\":"
		out.RawString(prefix)
		out.String(string(in.LeagueName))
	}
	{
		const prefix string = ",\"ConferenceID\":"
		out.RawString(prefix)
		out.Int(int(in.ConferenceID))
	}
	{
		const prefix string = ",\"ConferenceName\":"
		out.RawString(prefix)
		out.String(string(in.ConferenceName))
	}
	{
		const prefix string = ",\"DivisionID\":"
		out.RawString(prefix)
		out.Int(int(in.DivisionID))
	}
	{
		const prefix string = ",\"PostSeasonStatus\":"
		out.RawString(prefix)
		out.String(string(in.PostSeasonStatus))
	}
	{
		const prefix string = ",\"IsFBS\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFBS))
	}
	{
		const prefix string = ",\"Rank\":"
		out.RawString(prefix)
		out.Uint(uint(in.Rank))
	}
	{
		const prefix string = ",\"TotalWins\":"
		out.RawString(prefix)
		out.Int(int(in.TotalWins))
	}
	{
		const prefix string = ",\"TotalLosses\":"
		out.RawString(prefix)
		out.Int(int(in.TotalLosses))
	}
	{
		const prefix string = ",\"ConferenceWins\":"
		out.RawString(prefix)
		out.Int(int(in.ConferenceWins))
	}
	{
		const prefix string = ",\"ConferenceLosses\":"
		out.RawString(prefix)
		out.Int(int(in.ConferenceLosses))
	}
	{
		const prefix string = ",\"RankedWins\":"
		out.RawString(prefix)
		out.Int(int(in.RankedWins))
	}
	{
		const prefix string = ",\"RankedLosses\":"
		out.RawString(prefix)
		out.Int(int(in.RankedLosses))
	}
	{
		const prefix string = ",\"PointsFor\":"
		out.RawString(prefix)
		out.Int(int(in.PointsFor))
	}
	{
		const prefix string = ",\"PointsAgainst\":"
		out.RawString(prefix)
		out.Int(int(in.PointsAgainst))
	}
	{
		const prefix string = ",\"Streak\":"
		out.RawString(prefix)
		out.Int(int(in.Streak))
	}
	{
		const prefix string = ",\"HomeWins\":"
		out.RawString(prefix)
		out.Int(int(in.HomeWins))
	}
	{
		const prefix string = ",\"AwayWins\":"
		out.RawString(prefix)
		out.Int(int(in.AwayWins))
	}
	{
		const prefix string = ",\"Coach\":"
		out.RawString(prefix)
		out.String(string(in.Coach))
	}
	{
		const prefix string = ",\"TeamAbbr\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbr))
	}
	{
		const prefix string = ",\"TotalWinPercentage\":"
		out.RawString(prefix)
		out.Float32(float32(in.TotalWinPercentage))
	}
	{
		const prefix string = ",\"ConfWinPercentage\":"
		out.RawString(prefix)
		out.Float32(float32(in.ConfWinPercentage))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs(in *jlexer.Lexer, out *structs.CollegePlayerSeasonStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CollegePlayerID":
			out.CollegePlayerID = uint(in.Uint())
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "Year":
			out.Year = uint(in.Uint())
		case "IsRedshirt":
			out.IsRedshirt = bool(in.Bool())
		case "GamesPlayed":
			out.GamesPlayed = int(in.Int())
		case "QBRating":
			out.QBRating = float64(in.Float64())
		case "Tackles":
			out.Tackles = float64(in.Float64())
		case "RushingAvg":
			out.RushingAvg = float64(in.Float64())
		case "PassingAvg":
			out.PassingAvg = float64(in.Float64())
		case "ReceivingAvg":
			out.ReceivingAvg = float64(in.Float64())
		case "Completion":
			out.Completion = float64(in.Float64())
		case "PassingYards":
			out.PassingYards = int(in.Int())
		case "PassAttempts":
			out.PassAttempts = int(in.Int())
		case "PassCompletions":
			out.PassCompletions = int(in.Int())
		case "PassingTDs":
			out.PassingTDs = int(in.Int())
		case "Interceptions":
			out.Interceptions = int(in.Int())
		case "LongestPass":
			out.LongestPass = int(in.Int())
		case "Sacks":
			out.Sacks = int(in.Int())
		case "RushAttempts":
			out.RushAttempts = int(in.Int())
		case "RushingYards":
			out.RushingYards = int(in.Int())
		case "RushingTDs":
			out.RushingTDs = int(in.Int())
		case "Fumbles":
			out.Fumbles = int(in.Int())
		case "LongestRush":
			out.LongestRush = int(in.Int())
		case "Targets":
			out.Targets = int(in.Int())
		case "Catches":
			out.Catches = int(in.Int())
		case "ReceivingYards":
			out.ReceivingYards = int(in.Int())
		case "ReceivingTDs":
			out.ReceivingTDs = int(in.Int())
		case "LongestReception":
			out.LongestReception = int(in.Int())
		case "SoloTackles":
			out.SoloTackles = float64(in.Float64())
		case "AssistedTackles":
			out.AssistedTackles = float64(in.Float64())
		case "TacklesForLoss":
			out.TacklesForLoss = float64(in.Float64())
		case "SacksMade":
			out.SacksMade = float64(in.Float64())
		case "ForcedFumbles":
			out.ForcedFumbles = int(in.Int())
		case "RecoveredFumbles":
			out.RecoveredFumbles = int(in.Int())
		case "PassDeflections":
			out.PassDeflections = int(in.Int())
		case "InterceptionsCaught":
			out.InterceptionsCaught = int(in.Int())
		case "Safeties":
			out.Safeties = int(in.Int())
		case "DefensiveTDs":
			out.DefensiveTDs = int(in.Int())
		case "FGMade":
			out.FGMade = int(in.Int())
		case "FGAttempts":
			out.FGAttempts = int(in.Int())
		case "LongestFG":
			out.LongestFG = int(in.Int())
		case "ExtraPointsMade":
			out.ExtraPointsMade = int(in.Int())
		case "ExtraPointsAttempted":
			out.ExtraPointsAttempted = int(in.Int())
		case "KickoffTouchbacks":
			out.KickoffTouchbacks = int(in.Int())
		case "Punts":
			out.Punts = int(in.Int())
		case "GrossPuntDistance":
			out.GrossPuntDistance = int(in.Int())
		case "NetPuntDistance":
			out.NetPuntDistance = int(in.Int())
		case "PuntTouchbacks":
			out.PuntTouchbacks = int(in.Int())
		case "PuntsInside20":
			out.PuntsInside20 = int(in.Int())
		case "KickReturns":
			out.KickReturns = int(in.Int())
		case "KickReturnTDs":
			out.KickReturnTDs = int(in.Int())
		case "KickReturnYards":
			out.KickReturnYards = int(in.Int())
		case "PuntReturns":
			out.PuntReturns = int(in.Int())
		case "PuntReturnTDs":
			out.PuntReturnTDs = int(in.Int())
		case "PuntReturnYards":
			out.PuntReturnYards = int(in.Int())
		case "STSoloTackles":
			out.STSoloTackles = float64(in.Float64())
		case "STAssistedTackles":
			out.STAssistedTackles = float64(in.Float64())
		case "PuntsBlocked":
			out.PuntsBlocked = int(in.Int())
		case "FGBlocked":
			out.FGBlocked = int(in.Int())
		case "Snaps":
			out.Snaps = int(in.Int())
		case "Pancakes":
			out.Pancakes = int(in.Int())
		case "SacksAllowed":
			out.SacksAllowed = int(in.Int())
		case "PlayedGame":
			out.PlayedGame = int(in.Int())
		case "StartedGame":
			out.StartedGame = int(in.Int())
		case "WasInjured":
			out.WasInjured = bool(in.Bool())
		case "WeeksOfRecovery":
			out.WeeksOfRecovery = uint(in.Uint())
		case "InjuryType":
			out.InjuryType = string(in.String())
		case "RevealResults":
			out.RevealResults = bool(in.Bool())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "PreviousTeamID":
			out.PreviousTeamID = uint(in.Uint())
		case "PreviousTeam":
			out.PreviousTeam = string(in.String())
		case "GameType":
			out.GameType = uint8(in.Uint8())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs(out *jwriter.Writer, in structs.CollegePlayerSeasonStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CollegePlayerID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CollegePlayerID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"Year\":"
		out.RawString(prefix)
		out.Uint(uint(in.Year))
	}
	{
		const prefix string = ",\"IsRedshirt\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRedshirt))
	}
	{
		const prefix string = ",\"GamesPlayed\":"
		out.RawString(prefix)
		out.Int(int(in.GamesPlayed))
	}
	{
		const prefix string = ",\"QBRating\":"
		out.RawString(prefix)
		out.Float64(float64(in.QBRating))
	}
	{
		const prefix string = ",\"Tackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.Tackles))
	}
	{
		const prefix string = ",\"RushingAvg\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingAvg))
	}
	{
		const prefix string = ",\"PassingAvg\":"
		out.RawString(prefix)
		out.Float64(float64(in.PassingAvg))
	}
	{
		const prefix string = ",\"ReceivingAvg\":"
		out.RawString(prefix)
		out.Float64(float64(in.ReceivingAvg))
	}
	{
		const prefix string = ",\"Completion\":"
		out.RawString(prefix)
		out.Float64(float64(in.Completion))
	}
	{
		const prefix string = ",\"PassingYards\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYards))
	}
	{
		const prefix string = ",\"PassAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.PassAttempts))
	}
	{
		const prefix string = ",\"PassCompletions\":"
		out.RawString(prefix)
		out.Int(int(in.PassCompletions))
	}
	{
		const prefix string = ",\"PassingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDs))
	}
	{
		const prefix string = ",\"Interceptions\":"
		out.RawString(prefix)
		out.Int(int(in.Interceptions))
	}
	{
		const prefix string = ",\"LongestPass\":"
		out.RawString(prefix)
		out.Int(int(in.LongestPass))
	}
	{
		const prefix string = ",\"Sacks\":"
		out.RawString(prefix)
		out.Int(int(in.Sacks))
	}
	{
		const prefix string = ",\"RushAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.RushAttempts))
	}
	{
		const prefix string = ",\"RushingYards\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYards))
	}
	{
		const prefix string = ",\"RushingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDs))
	}
	{
		const prefix string = ",\"Fumbles\":"
		out.RawString(prefix)
		out.Int(int(in.Fumbles))
	}
	{
		const prefix string = ",\"LongestRush\":"
		out.RawString(prefix)
		out.Int(int(in.LongestRush))
	}
	{
		const prefix string = ",\"Targets\":"
		out.RawString(prefix)
		out.Int(int(in.Targets))
	}
	{
		const prefix string = ",\"Catches\":"
		out.RawString(prefix)
		out.Int(int(in.Catches))
	}
	{
		const prefix string = ",\"ReceivingYards\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYards))
	}
	{
		const prefix string = ",\"ReceivingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDs))
	}
	{
		const prefix string = ",\"LongestReception\":"
		out.RawString(prefix)
		out.Int(int(in.LongestReception))
	}
	{
		const prefix string = ",\"SoloTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.SoloTackles))
	}
	{
		const prefix string = ",\"AssistedTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.AssistedTackles))
	}
	{
		const prefix string = ",\"TacklesForLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.TacklesForLoss))
	}
	{
		const prefix string = ",\"SacksMade\":"
		out.RawString(prefix)
		out.Float64(float64(in.SacksMade))
	}
	{
		const prefix string = ",\"ForcedFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ForcedFumbles))
	}
	{
		const prefix string = ",\"RecoveredFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.RecoveredFumbles))
	}
	{
		const prefix string = ",\"PassDeflections\":"
		out.RawString(prefix)
		out.Int(int(in.PassDeflections))
	}
	{
		const prefix string = ",\"InterceptionsCaught\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsCaught))
	}
	{
		const prefix string = ",\"Safeties\":"
		out.RawString(prefix)
		out.Int(int(in.Safeties))
	}
	{
		const prefix string = ",\"DefensiveTDs\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveTDs))
	}
	{
		const prefix string = ",\"FGMade\":"
		out.RawString(prefix)
		out.Int(int(in.FGMade))
	}
	{
		const prefix string = ",\"FGAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.FGAttempts))
	}
	{
		const prefix string = ",\"LongestFG\":"
		out.RawString(prefix)
		out.Int(int(in.LongestFG))
	}
	{
		const prefix string = ",\"ExtraPointsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsMade))
	}
	{
		const prefix string = ",\"ExtraPointsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsAttempted))
	}
	{
		const prefix string = ",\"KickoffTouchbacks\":"
		out.RawString(prefix)
		out.Int(int(in.KickoffTouchbacks))
	}
	{
		const prefix string = ",\"Punts\":"
		out.RawString(prefix)
		out.Int(int(in.Punts))
	}
	{
		const prefix string = ",\"GrossPuntDistance\":"
		out.RawString(prefix)
		out.Int(int(in.GrossPuntDistance))
	}
	{
		const prefix string = ",\"NetPuntDistance\":"
		out.RawString(prefix)
		out.Int(int(in.NetPuntDistance))
	}
	{
		const prefix string = ",\"PuntTouchbacks\":"
		out.RawString(prefix)
		out.Int(int(in.PuntTouchbacks))
	}
	{
		const prefix string = ",\"PuntsInside20\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsInside20))
	}
	{
		const prefix string = ",\"KickReturns\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturns))
	}
	{
		const prefix string = ",\"KickReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnTDs))
	}
	{
		const prefix string = ",\"KickReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnYards))
	}
	{
		const prefix string = ",\"PuntReturns\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturns))
	}
	{
		const prefix string = ",\"PuntReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnTDs))
	}
	{
		const prefix string = ",\"PuntReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnYards))
	}
	{
		const prefix string = ",\"STSoloTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.STSoloTackles))
	}
	{
		const prefix string = ",\"STAssistedTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.STAssistedTackles))
	}
	{
		const prefix string = ",\"PuntsBlocked\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsBlocked))
	}
	{
		const prefix string = ",\"FGBlocked\":"
		out.RawString(prefix)
		out.Int(int(in.FGBlocked))
	}
	{
		const prefix string = ",\"Snaps\":"
		out.RawString(prefix)
		out.Int(int(in.Snaps))
	}
	{
		const prefix string = ",\"Pancakes\":"
		out.RawString(prefix)
		out.Int(int(in.Pancakes))
	}
	{
		const prefix string = ",\"SacksAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.SacksAllowed))
	}
	{
		const prefix string = ",\"PlayedGame\":"
		out.RawString(prefix)
		out.Int(int(in.PlayedGame))
	}
	{
		const prefix string = ",\"StartedGame\":"
		out.RawString(prefix)
		out.Int(int(in.StartedGame))
	}
	{
		const prefix string = ",\"WasInjured\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasInjured))
	}
	{
		const prefix string = ",\"WeeksOfRecovery\":"
		out.RawString(prefix)
		out.Uint(uint(in.WeeksOfRecovery))
	}
	{
		const prefix string = ",\"InjuryType\":"
		out.RawString(prefix)
		out.String(string(in.InjuryType))
	}
	{
		const prefix string = ",\"RevealResults\":"
		out.RawString(prefix)
		out.Bool(bool(in.RevealResults))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"PreviousTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PreviousTeamID))
	}
	{
		const prefix string = ",\"PreviousTeam\":"
		out.RawString(prefix)
		out.String(string(in.PreviousTeam))
	}
	{
		const prefix string = ",\"GameType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GameType))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers1(in *jlexer.Lexer, out *BootstrapDataTwo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CollegeNews":
			if in.IsNull() {
				in.Skip()
				out.CollegeNews = nil
			} else {
				in.Delim('[')
				if out.CollegeNews == nil {
					if !in.IsDelim(']') {
						out.CollegeNews = make([]structs.NewsLog, 0, 0)
					} else {
						out.CollegeNews = []structs.NewsLog{}
					}
				} else {
					out.CollegeNews = (out.CollegeNews)[:0]
				}
				for !in.IsDelim(']') {
					var v21 structs.NewsLog
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs8(in, &v21)
					out.CollegeNews = append(out.CollegeNews, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AllCollegeGames":
			if in.IsNull() {
				in.Skip()
				out.AllCollegeGames = nil
			} else {
				in.Delim('[')
				if out.AllCollegeGames == nil {
					if !in.IsDelim(']') {
						out.AllCollegeGames = make([]structs.CollegeGame, 0, 0)
					} else {
						out.AllCollegeGames = []structs.CollegeGame{}
					}
				} else {
					out.AllCollegeGames = (out.AllCollegeGames)[:0]
				}
				for !in.IsDelim(']') {
					var v22 structs.CollegeGame
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs4(in, &v22)
					out.AllCollegeGames = append(out.AllCollegeGames, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TeamProfileMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TeamProfileMap = make(map[string]*structs.RecruitingTeamProfile)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 *structs.RecruitingTeamProfile
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						if v23 == nil {
							v23 = new(structs.RecruitingTeamProfile)
						}
						easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs9(in, v23)
					}
					(out.TeamProfileMap)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CollegeStandings":
			if in.IsNull() {
				in.Skip()
				out.CollegeStandings = nil
			} else {
				in.Delim('[')
				if out.CollegeStandings == nil {
					if !in.IsDelim(']') {
						out.CollegeStandings = make([]structs.CollegeStandings, 0, 0)
					} else {
						out.CollegeStandings = []structs.CollegeStandings{}
					}
				} else {
					out.CollegeStandings = (out.CollegeStandings)[:0]
				}
				for !in.IsDelim(']') {
					var v24 structs.CollegeStandings
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs1(in, &v24)
					out.CollegeStandings = append(out.CollegeStandings, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ProStandings":
			if in.IsNull() {
				in.Skip()
				out.ProStandings = nil
			} else {
				in.Delim('[')
				if out.ProStandings == nil {
					if !in.IsDelim(']') {
						out.ProStandings = make([]structs.NFLStandings, 0, 0)
					} else {
						out.ProStandings = []structs.NFLStandings{}
					}
				} else {
					out.ProStandings = (out.ProStandings)[:0]
				}
				for !in.IsDelim(']') {
					var v25 structs.NFLStandings
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs10(in, &v25)
					out.ProStandings = append(out.ProStandings, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AllProGames":
			if in.IsNull() {
				in.Skip()
				out.AllProGames = nil
			} else {
				in.Delim('[')
				if out.AllProGames == nil {
					if !in.IsDelim(']') {
						out.AllProGames = make([]structs.NFLGame, 0, 0)
					} else {
						out.AllProGames = []structs.NFLGame{}
					}
				} else {
					out.AllProGames = (out.AllProGames)[:0]
				}
				for !in.IsDelim(']') {
					var v26 structs.NFLGame
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs11(in, &v26)
					out.AllProGames = append(out.AllProGames, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CapsheetMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CapsheetMap = make(map[uint]structs.NFLCapsheet)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v27 structs.NFLCapsheet
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs12(in, &v27)
					(out.CapsheetMap)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ProRosterMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ProRosterMap = make(map[uint][]structs.NFLPlayer)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v28 []structs.NFLPlayer
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						in.Delim('[')
						if v28 == nil {
							if !in.IsDelim(']') {
								v28 = make([]structs.NFLPlayer, 0, 0)
							} else {
								v28 = []structs.NFLPlayer{}
							}
						} else {
							v28 = (v28)[:0]
						}
						for !in.IsDelim(']') {
							var v29 structs.NFLPlayer
							easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs13(in, &v29)
							v28 = append(v28, v29)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.ProRosterMap)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		case "PracticeSquadPlayers":
			if in.IsNull() {
				in.Skip()
				out.PracticeSquadPlayers = nil
			} else {
				in.Delim('[')
				if out.PracticeSquadPlayers == nil {
					if !in.IsDelim(']') {
						out.PracticeSquadPlayers = make([]structs.NFLPlayer, 0, 0)
					} else {
						out.PracticeSquadPlayers = []structs.NFLPlayer{}
					}
				} else {
					out.PracticeSquadPlayers = (out.PracticeSquadPlayers)[:0]
				}
				for !in.IsDelim(']') {
					var v30 structs.NFLPlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs13(in, &v30)
					out.PracticeSquadPlayers = append(out.PracticeSquadPlayers, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TopNFLPassers":
			if in.IsNull() {
				in.Skip()
				out.TopNFLPassers = nil
			} else {
				in.Delim('[')
				if out.TopNFLPassers == nil {
					if !in.IsDelim(']') {
						out.TopNFLPassers = make([]structs.NFLPlayer, 0, 0)
					} else {
						out.TopNFLPassers = []structs.NFLPlayer{}
					}
				} else {
					out.TopNFLPassers = (out.TopNFLPassers)[:0]
				}
				for !in.IsDelim(']') {
					var v31 structs.NFLPlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs13(in, &v31)
					out.TopNFLPassers = append(out.TopNFLPassers, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TopNFLRushers":
			if in.IsNull() {
				in.Skip()
				out.TopNFLRushers = nil
			} else {
				in.Delim('[')
				if out.TopNFLRushers == nil {
					if !in.IsDelim(']') {
						out.TopNFLRushers = make([]structs.NFLPlayer, 0, 0)
					} else {
						out.TopNFLRushers = []structs.NFLPlayer{}
					}
				} else {
					out.TopNFLRushers = (out.TopNFLRushers)[:0]
				}
				for !in.IsDelim(']') {
					var v32 structs.NFLPlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs13(in, &v32)
					out.TopNFLRushers = append(out.TopNFLRushers, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TopNFLReceivers":
			if in.IsNull() {
				in.Skip()
				out.TopNFLReceivers = nil
			} else {
				in.Delim('[')
				if out.TopNFLReceivers == nil {
					if !in.IsDelim(']') {
						out.TopNFLReceivers = make([]structs.NFLPlayer, 0, 0)
					} else {
						out.TopNFLReceivers = []structs.NFLPlayer{}
					}
				} else {
					out.TopNFLReceivers = (out.TopNFLReceivers)[:0]
				}
				for !in.IsDelim(']') {
					var v33 structs.NFLPlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs13(in, &v33)
					out.TopNFLReceivers = append(out.TopNFLReceivers, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ProInjuryReport":
			if in.IsNull() {
				in.Skip()
				out.ProInjuryReport = nil
			} else {
				in.Delim('[')
				if out.ProInjuryReport == nil {
					if !in.IsDelim(']') {
						out.ProInjuryReport = make([]structs.NFLPlayer, 0, 0)
					} else {
						out.ProInjuryReport = []structs.NFLPlayer{}
					}
				} else {
					out.ProInjuryReport = (out.ProInjuryReport)[:0]
				}
				for !in.IsDelim(']') {
					var v34 structs.NFLPlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs13(in, &v34)
					out.ProInjuryReport = append(out.ProInjuryReport, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers1(out *jwriter.Writer, in BootstrapDataTwo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CollegeNews\":"
		out.RawString(prefix[1:])
		if in.CollegeNews == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.CollegeNews {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs8(out, v36)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AllCollegeGames\":"
		out.RawString(prefix)
		if in.AllCollegeGames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.AllCollegeGames {
				if v37 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs4(out, v38)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TeamProfileMap\":"
		out.RawString(prefix)
		if in.TeamProfileMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v39First := true
			for v39Name, v39Value := range in.TeamProfileMap {
				if v39First {
					v39First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v39Name))
				out.RawByte(':')
				if v39Value == nil {
					out.RawString("null")
				} else {
					easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs9(out, *v39Value)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CollegeStandings\":"
		out.RawString(prefix)
		if in.CollegeStandings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.CollegeStandings {
				if v40 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs1(out, v41)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ProStandings\":"
		out.RawString(prefix)
		if in.ProStandings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.ProStandings {
				if v42 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs10(out, v43)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AllProGames\":"
		out.RawString(prefix)
		if in.AllProGames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.AllProGames {
				if v44 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs11(out, v45)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CapsheetMap\":"
		out.RawString(prefix)
		if in.CapsheetMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v46First := true
			for v46Name, v46Value := range in.CapsheetMap {
				if v46First {
					v46First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v46Name))
				out.RawByte(':')
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs12(out, v46Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ProRosterMap\":"
		out.RawString(prefix)
		if in.ProRosterMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v47First := true
			for v47Name, v47Value := range in.ProRosterMap {
				if v47First {
					v47First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v47Name))
				out.RawByte(':')
				if v47Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v48, v49 := range v47Value {
						if v48 > 0 {
							out.RawByte(',')
						}
						easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs13(out, v49)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"PracticeSquadPlayers\":"
		out.RawString(prefix)
		if in.PracticeSquadPlayers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.PracticeSquadPlayers {
				if v50 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs13(out, v51)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TopNFLPassers\":"
		out.RawString(prefix)
		if in.TopNFLPassers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.TopNFLPassers {
				if v52 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs13(out, v53)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TopNFLRushers\":"
		out.RawString(prefix)
		if in.TopNFLRushers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.TopNFLRushers {
				if v54 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs13(out, v55)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TopNFLReceivers\":"
		out.RawString(prefix)
		if in.TopNFLReceivers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.TopNFLReceivers {
				if v56 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs13(out, v57)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ProInjuryReport\":"
		out.RawString(prefix)
		if in.ProInjuryReport == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.ProInjuryReport {
				if v58 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs13(out, v59)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BootstrapDataTwo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BootstrapDataTwo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BootstrapDataTwo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BootstrapDataTwo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers1(l, v)
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs13(in *jlexer.Lexer, out *structs.NFLPlayer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PlayerID":
			out.PlayerID = int(in.Int())
		case "TeamID":
			out.TeamID = int(in.Int())
		case "CollegeID":
			out.CollegeID = uint(in.Uint())
		case "College":
			out.College = string(in.String())
		case "TeamAbbr":
			out.TeamAbbr = string(in.String())
		case "Experience":
			out.Experience = uint(in.Uint())
		case "HighSchool":
			out.HighSchool = string(in.String())
		case "Hometown":
			out.Hometown = string(in.String())
		case "State":
			out.State = string(in.String())
		case "IsActive":
			out.IsActive = bool(in.Bool())
		case "IsPracticeSquad":
			out.IsPracticeSquad = bool(in.Bool())
		case "IsFreeAgent":
			out.IsFreeAgent = bool(in.Bool())
		case "IsWaived":
			out.IsWaived = bool(in.Bool())
		case "IsOnTradeBlock":
			out.IsOnTradeBlock = bool(in.Bool())
		case "IsAcceptingOffers":
			out.IsAcceptingOffers = bool(in.Bool())
		case "IsNegotiating":
			out.IsNegotiating = bool(in.Bool())
		case "NegotiationRound":
			out.NegotiationRound = uint(in.Uint())
		case "SigningRound":
			out.SigningRound = uint(in.Uint())
		case "MinimumValue":
			out.MinimumValue = float64(in.Float64())
		case "AAV":
			out.AAV = float64(in.Float64())
		case "DraftedTeamID":
			out.DraftedTeamID = uint(in.Uint())
		case "DraftedTeam":
			out.DraftedTeam = string(in.String())
		case "DraftedRound":
			out.DraftedRound = uint(in.Uint())
		case "DraftPickID":
			out.DraftPickID = uint(in.Uint())
		case "DraftedPick":
			out.DraftedPick = uint(in.Uint())
		case "ShowLetterGrade":
			out.ShowLetterGrade = bool(in.Bool())
		case "HasProgressed":
			out.HasProgressed = bool(in.Bool())
		case "Rejections":
			out.Rejections = int(in.Int())
		case "ProBowls":
			out.ProBowls = uint8(in.Uint8())
		case "TagType":
			out.TagType = uint8(in.Uint8())
		case "Stats":
			if in.IsNull() {
				in.Skip()
				out.Stats = nil
			} else {
				in.Delim('[')
				if out.Stats == nil {
					if !in.IsDelim(']') {
						out.Stats = make([]structs.NFLPlayerStats, 0, 0)
					} else {
						out.Stats = []structs.NFLPlayerStats{}
					}
				} else {
					out.Stats = (out.Stats)[:0]
				}
				for !in.IsDelim(']') {
					var v60 structs.NFLPlayerStats
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs14(in, &v60)
					out.Stats = append(out.Stats, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SeasonStats":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs15(in, &out.SeasonStats)
		case "Contract":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs16(in, &out.Contract)
		case "Offers":
			if in.IsNull() {
				in.Skip()
				out.Offers = nil
			} else {
				in.Delim('[')
				if out.Offers == nil {
					if !in.IsDelim(']') {
						out.Offers = make([]structs.FreeAgencyOffer, 0, 0)
					} else {
						out.Offers = []structs.FreeAgencyOffer{}
					}
				} else {
					out.Offers = (out.Offers)[:0]
				}
				for !in.IsDelim(']') {
					var v61 structs.FreeAgencyOffer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs17(in, &v61)
					out.Offers = append(out.Offers, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "WaiverOffers":
			if in.IsNull() {
				in.Skip()
				out.WaiverOffers = nil
			} else {
				in.Delim('[')
				if out.WaiverOffers == nil {
					if !in.IsDelim(']') {
						out.WaiverOffers = make([]structs.NFLWaiverOffer, 0, 1)
					} else {
						out.WaiverOffers = []structs.NFLWaiverOffer{}
					}
				} else {
					out.WaiverOffers = (out.WaiverOffers)[:0]
				}
				for !in.IsDelim(']') {
					var v62 structs.NFLWaiverOffer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs18(in, &v62)
					out.WaiverOffers = append(out.WaiverOffers, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Extensions":
			if in.IsNull() {
				in.Skip()
				out.Extensions = nil
			} else {
				in.Delim('[')
				if out.Extensions == nil {
					if !in.IsDelim(']') {
						out.Extensions = make([]structs.NFLExtensionOffer, 0, 0)
					} else {
						out.Extensions = []structs.NFLExtensionOffer{}
					}
				} else {
					out.Extensions = (out.Extensions)[:0]
				}
				for !in.IsDelim(']') {
					var v63 structs.NFLExtensionOffer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs19(in, &v63)
					out.Extensions = append(out.Extensions, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		case "Position":
			out.Position = string(in.String())
		case "Archetype":
			out.Archetype = string(in.String())
		case "PreviousTeamID":
			out.PreviousTeamID = uint(in.Uint())
		case "PreviousTeam":
			out.PreviousTeam = string(in.String())
		case "Height":
			out.Height = int(in.Int())
		case "Weight":
			out.Weight = int(in.Int())
		case "Age":
			out.Age = int(in.Int())
		case "Stars":
			out.Stars = int(in.Int())
		case "Overall":
			out.Overall = int(in.Int())
		case "Stamina":
			out.Stamina = int(in.Int())
		case "Injury":
			out.Injury = int(in.Int())
		case "FootballIQ":
			out.FootballIQ = int(in.Int())
		case "Speed":
			out.Speed = int(in.Int())
		case "Carrying":
			out.Carrying = int(in.Int())
		case "Agility":
			out.Agility = int(in.Int())
		case "Catching":
			out.Catching = int(in.Int())
		case "RouteRunning":
			out.RouteRunning = int(in.Int())
		case "ZoneCoverage":
			out.ZoneCoverage = int(in.Int())
		case "ManCoverage":
			out.ManCoverage = int(in.Int())
		case "Strength":
			out.Strength = int(in.Int())
		case "Tackle":
			out.Tackle = int(in.Int())
		case "PassBlock":
			out.PassBlock = int(in.Int())
		case "RunBlock":
			out.RunBlock = int(in.Int())
		case "PassRush":
			out.PassRush = int(in.Int())
		case "RunDefense":
			out.RunDefense = int(in.Int())
		case "ThrowPower":
			out.ThrowPower = int(in.Int())
		case "ThrowAccuracy":
			out.ThrowAccuracy = int(in.Int())
		case "KickAccuracy":
			out.KickAccuracy = int(in.Int())
		case "KickPower":
			out.KickPower = int(in.Int())
		case "PuntAccuracy":
			out.PuntAccuracy = int(in.Int())
		case "PuntPower":
			out.PuntPower = int(in.Int())
		case "Progression":
			out.Progression = int(in.Int())
		case "Discipline":
			out.Discipline = int(in.Int())
		case "PotentialGrade":
			out.PotentialGrade = string(in.String())
		case "FreeAgency":
			out.FreeAgency = string(in.String())
		case "Personality":
			out.Personality = string(in.String())
		case "RecruitingBias":
			out.RecruitingBias = string(in.String())
		case "WorkEthic":
			out.WorkEthic = string(in.String())
		case "AcademicBias":
			out.AcademicBias = string(in.String())
		case "IsInjured":
			out.IsInjured = bool(in.Bool())
		case "InjuryName":
			out.InjuryName = string(in.String())
		case "InjuryType":
			out.InjuryType = string(in.String())
		case "WeeksOfRecovery":
			out.WeeksOfRecovery = uint(in.Uint())
		case "InjuryReserve":
			out.InjuryReserve = bool(in.Bool())
		case "PrimeAge":
			out.PrimeAge = uint(in.Uint())
		case "Clutch":
			out.Clutch = int(in.Int())
		case "Shotgun":
			out.Shotgun = int(in.Int())
		case "PositionTwo":
			out.PositionTwo = string(in.String())
		case "ArchetypeTwo":
			out.ArchetypeTwo = string(in.String())
		case "RelativeID":
			out.RelativeID = uint(in.Uint())
		case "RelativeType":
			out.RelativeType = uint(in.Uint())
		case "Notes":
			out.Notes = string(in.String())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs13(out *jwriter.Writer, in structs.NFLPlayer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlayerID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"CollegeID\":"
		out.RawString(prefix)
		out.Uint(uint(in.CollegeID))
	}
	{
		const prefix string = ",\"College\":"
		out.RawString(prefix)
		out.String(string(in.College))
	}
	{
		const prefix string = ",\"TeamAbbr\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbr))
	}
	{
		const prefix string = ",\"Experience\":"
		out.RawString(prefix)
		out.Uint(uint(in.Experience))
	}
	{
		const prefix string = ",\"HighSchool\":"
		out.RawString(prefix)
		out.String(string(in.HighSchool))
	}
	{
		const prefix string = ",\"Hometown\":"
		out.RawString(prefix)
		out.String(string(in.Hometown))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"IsActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"IsPracticeSquad\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPracticeSquad))
	}
	{
		const prefix string = ",\"IsFreeAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFreeAgent))
	}
	{
		const prefix string = ",\"IsWaived\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsWaived))
	}
	{
		const prefix string = ",\"IsOnTradeBlock\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsOnTradeBlock))
	}
	{
		const prefix string = ",\"IsAcceptingOffers\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAcceptingOffers))
	}
	{
		const prefix string = ",\"IsNegotiating\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNegotiating))
	}
	{
		const prefix string = ",\"NegotiationRound\":"
		out.RawString(prefix)
		out.Uint(uint(in.NegotiationRound))
	}
	{
		const prefix string = ",\"SigningRound\":"
		out.RawString(prefix)
		out.Uint(uint(in.SigningRound))
	}
	{
		const prefix string = ",\"MinimumValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.MinimumValue))
	}
	{
		const prefix string = ",\"AAV\":"
		out.RawString(prefix)
		out.Float64(float64(in.AAV))
	}
	{
		const prefix string = ",\"DraftedTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.DraftedTeamID))
	}
	{
		const prefix string = ",\"DraftedTeam\":"
		out.RawString(prefix)
		out.String(string(in.DraftedTeam))
	}
	{
		const prefix string = ",\"DraftedRound\":"
		out.RawString(prefix)
		out.Uint(uint(in.DraftedRound))
	}
	{
		const prefix string = ",\"DraftPickID\":"
		out.RawString(prefix)
		out.Uint(uint(in.DraftPickID))
	}
	{
		const prefix string = ",\"DraftedPick\":"
		out.RawString(prefix)
		out.Uint(uint(in.DraftedPick))
	}
	{
		const prefix string = ",\"ShowLetterGrade\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowLetterGrade))
	}
	{
		const prefix string = ",\"HasProgressed\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasProgressed))
	}
	{
		const prefix string = ",\"Rejections\":"
		out.RawString(prefix)
		out.Int(int(in.Rejections))
	}
	{
		const prefix string = ",\"ProBowls\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ProBowls))
	}
	{
		const prefix string = ",\"TagType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TagType))
	}
	{
		const prefix string = ",\"Stats\":"
		out.RawString(prefix)
		if in.Stats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v64, v65 := range in.Stats {
				if v64 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs14(out, v65)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SeasonStats\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs15(out, in.SeasonStats)
	}
	{
		const prefix string = ",\"Contract\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs16(out, in.Contract)
	}
	{
		const prefix string = ",\"Offers\":"
		out.RawString(prefix)
		if in.Offers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.Offers {
				if v66 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs17(out, v67)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"WaiverOffers\":"
		out.RawString(prefix)
		if in.WaiverOffers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.WaiverOffers {
				if v68 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs18(out, v69)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Extensions\":"
		out.RawString(prefix)
		if in.Extensions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v70, v71 := range in.Extensions {
				if v70 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs19(out, v71)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"Archetype\":"
		out.RawString(prefix)
		out.String(string(in.Archetype))
	}
	{
		const prefix string = ",\"PreviousTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PreviousTeamID))
	}
	{
		const prefix string = ",\"PreviousTeam\":"
		out.RawString(prefix)
		out.String(string(in.PreviousTeam))
	}
	{
		const prefix string = ",\"Height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"Weight\":"
		out.RawString(prefix)
		out.Int(int(in.Weight))
	}
	{
		const prefix string = ",\"Age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"Stars\":"
		out.RawString(prefix)
		out.Int(int(in.Stars))
	}
	{
		const prefix string = ",\"Overall\":"
		out.RawString(prefix)
		out.Int(int(in.Overall))
	}
	{
		const prefix string = ",\"Stamina\":"
		out.RawString(prefix)
		out.Int(int(in.Stamina))
	}
	{
		const prefix string = ",\"Injury\":"
		out.RawString(prefix)
		out.Int(int(in.Injury))
	}
	{
		const prefix string = ",\"FootballIQ\":"
		out.RawString(prefix)
		out.Int(int(in.FootballIQ))
	}
	{
		const prefix string = ",\"Speed\":"
		out.RawString(prefix)
		out.Int(int(in.Speed))
	}
	{
		const prefix string = ",\"Carrying\":"
		out.RawString(prefix)
		out.Int(int(in.Carrying))
	}
	{
		const prefix string = ",\"Agility\":"
		out.RawString(prefix)
		out.Int(int(in.Agility))
	}
	{
		const prefix string = ",\"Catching\":"
		out.RawString(prefix)
		out.Int(int(in.Catching))
	}
	{
		const prefix string = ",\"RouteRunning\":"
		out.RawString(prefix)
		out.Int(int(in.RouteRunning))
	}
	{
		const prefix string = ",\"ZoneCoverage\":"
		out.RawString(prefix)
		out.Int(int(in.ZoneCoverage))
	}
	{
		const prefix string = ",\"ManCoverage\":"
		out.RawString(prefix)
		out.Int(int(in.ManCoverage))
	}
	{
		const prefix string = ",\"Strength\":"
		out.RawString(prefix)
		out.Int(int(in.Strength))
	}
	{
		const prefix string = ",\"Tackle\":"
		out.RawString(prefix)
		out.Int(int(in.Tackle))
	}
	{
		const prefix string = ",\"PassBlock\":"
		out.RawString(prefix)
		out.Int(int(in.PassBlock))
	}
	{
		const prefix string = ",\"RunBlock\":"
		out.RawString(prefix)
		out.Int(int(in.RunBlock))
	}
	{
		const prefix string = ",\"PassRush\":"
		out.RawString(prefix)
		out.Int(int(in.PassRush))
	}
	{
		const prefix string = ",\"RunDefense\":"
		out.RawString(prefix)
		out.Int(int(in.RunDefense))
	}
	{
		const prefix string = ",\"ThrowPower\":"
		out.RawString(prefix)
		out.Int(int(in.ThrowPower))
	}
	{
		const prefix string = ",\"ThrowAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.ThrowAccuracy))
	}
	{
		const prefix string = ",\"KickAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.KickAccuracy))
	}
	{
		const prefix string = ",\"KickPower\":"
		out.RawString(prefix)
		out.Int(int(in.KickPower))
	}
	{
		const prefix string = ",\"PuntAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.PuntAccuracy))
	}
	{
		const prefix string = ",\"PuntPower\":"
		out.RawString(prefix)
		out.Int(int(in.PuntPower))
	}
	{
		const prefix string = ",\"Progression\":"
		out.RawString(prefix)
		out.Int(int(in.Progression))
	}
	{
		const prefix string = ",\"Discipline\":"
		out.RawString(prefix)
		out.Int(int(in.Discipline))
	}
	{
		const prefix string = ",\"PotentialGrade\":"
		out.RawString(prefix)
		out.String(string(in.PotentialGrade))
	}
	{
		const prefix string = ",\"FreeAgency\":"
		out.RawString(prefix)
		out.String(string(in.FreeAgency))
	}
	{
		const prefix string = ",\"Personality\":"
		out.RawString(prefix)
		out.String(string(in.Personality))
	}
	{
		const prefix string = ",\"RecruitingBias\":"
		out.RawString(prefix)
		out.String(string(in.RecruitingBias))
	}
	{
		const prefix string = ",\"WorkEthic\":"
		out.RawString(prefix)
		out.String(string(in.WorkEthic))
	}
	{
		const prefix string = ",\"AcademicBias\":"
		out.RawString(prefix)
		out.String(string(in.AcademicBias))
	}
	{
		const prefix string = ",\"IsInjured\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsInjured))
	}
	{
		const prefix string = ",\"InjuryName\":"
		out.RawString(prefix)
		out.String(string(in.InjuryName))
	}
	{
		const prefix string = ",\"InjuryType\":"
		out.RawString(prefix)
		out.String(string(in.InjuryType))
	}
	{
		const prefix string = ",\"WeeksOfRecovery\":"
		out.RawString(prefix)
		out.Uint(uint(in.WeeksOfRecovery))
	}
	{
		const prefix string = ",\"InjuryReserve\":"
		out.RawString(prefix)
		out.Bool(bool(in.InjuryReserve))
	}
	{
		const prefix string = ",\"PrimeAge\":"
		out.RawString(prefix)
		out.Uint(uint(in.PrimeAge))
	}
	{
		const prefix string = ",\"Clutch\":"
		out.RawString(prefix)
		out.Int(int(in.Clutch))
	}
	{
		const prefix string = ",\"Shotgun\":"
		out.RawString(prefix)
		out.Int(int(in.Shotgun))
	}
	{
		const prefix string = ",\"PositionTwo\":"
		out.RawString(prefix)
		out.String(string(in.PositionTwo))
	}
	{
		const prefix string = ",\"ArchetypeTwo\":"
		out.RawString(prefix)
		out.String(string(in.ArchetypeTwo))
	}
	{
		const prefix string = ",\"RelativeID\":"
		out.RawString(prefix)
		out.Uint(uint(in.RelativeID))
	}
	{
		const prefix string = ",\"RelativeType\":"
		out.RawString(prefix)
		out.Uint(uint(in.RelativeType))
	}
	{
		const prefix string = ",\"Notes\":"
		out.RawString(prefix)
		out.String(string(in.Notes))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs19(in *jlexer.Lexer, out *structs.NFLExtensionOffer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NFLPlayerID":
			out.NFLPlayerID = uint(in.Uint())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "ContractLength":
			out.ContractLength = int(in.Int())
		case "Y1BaseSalary":
			out.Y1BaseSalary = float64(in.Float64())
		case "Y1Bonus":
			out.Y1Bonus = float64(in.Float64())
		case "Y2BaseSalary":
			out.Y2BaseSalary = float64(in.Float64())
		case "Y2Bonus":
			out.Y2Bonus = float64(in.Float64())
		case "Y3BaseSalary":
			out.Y3BaseSalary = float64(in.Float64())
		case "Y3Bonus":
			out.Y3Bonus = float64(in.Float64())
		case "Y4BaseSalary":
			out.Y4BaseSalary = float64(in.Float64())
		case "Y4Bonus":
			out.Y4Bonus = float64(in.Float64())
		case "Y5BaseSalary":
			out.Y5BaseSalary = float64(in.Float64())
		case "Y5Bonus":
			out.Y5Bonus = float64(in.Float64())
		case "TotalBonus":
			out.TotalBonus = float64(in.Float64())
		case "TotalSalary":
			out.TotalSalary = float64(in.Float64())
		case "ContractValue":
			out.ContractValue = float64(in.Float64())
		case "BonusPercentage":
			out.BonusPercentage = float64(in.Float64())
		case "AAV":
			out.AAV = float64(in.Float64())
		case "Rejections":
			out.Rejections = int(in.Int())
		case "IsAccepted":
			out.IsAccepted = bool(in.Bool())
		case "IsActive":
			out.IsActive = bool(in.Bool())
		case "IsRejected":
			out.IsRejected = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs19(out *jwriter.Writer, in structs.NFLExtensionOffer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NFLPlayerID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.NFLPlayerID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"ContractLength\":"
		out.RawString(prefix)
		out.Int(int(in.ContractLength))
	}
	{
		const prefix string = ",\"Y1BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1BaseSalary))
	}
	{
		const prefix string = ",\"Y1Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1Bonus))
	}
	{
		const prefix string = ",\"Y2BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2BaseSalary))
	}
	{
		const prefix string = ",\"Y2Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2Bonus))
	}
	{
		const prefix string = ",\"Y3BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3BaseSalary))
	}
	{
		const prefix string = ",\"Y3Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3Bonus))
	}
	{
		const prefix string = ",\"Y4BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4BaseSalary))
	}
	{
		const prefix string = ",\"Y4Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4Bonus))
	}
	{
		const prefix string = ",\"Y5BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5BaseSalary))
	}
	{
		const prefix string = ",\"Y5Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5Bonus))
	}
	{
		const prefix string = ",\"TotalBonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalBonus))
	}
	{
		const prefix string = ",\"TotalSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalSalary))
	}
	{
		const prefix string = ",\"ContractValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.ContractValue))
	}
	{
		const prefix string = ",\"BonusPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.BonusPercentage))
	}
	{
		const prefix string = ",\"AAV\":"
		out.RawString(prefix)
		out.Float64(float64(in.AAV))
	}
	{
		const prefix string = ",\"Rejections\":"
		out.RawString(prefix)
		out.Int(int(in.Rejections))
	}
	{
		const prefix string = ",\"IsAccepted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAccepted))
	}
	{
		const prefix string = ",\"IsActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"IsRejected\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRejected))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs18(in *jlexer.Lexer, out *structs.NFLWaiverOffer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "WaiverOrder":
			out.WaiverOrder = uint(in.Uint())
		case "NFLPlayerID":
			out.NFLPlayerID = uint(in.Uint())
		case "IsActive":
			out.IsActive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs18(out *jwriter.Writer, in structs.NFLWaiverOffer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"WaiverOrder\":"
		out.RawString(prefix)
		out.Uint(uint(in.WaiverOrder))
	}
	{
		const prefix string = ",\"NFLPlayerID\":"
		out.RawString(prefix)
		out.Uint(uint(in.NFLPlayerID))
	}
	{
		const prefix string = ",\"IsActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs17(in *jlexer.Lexer, out *structs.FreeAgencyOffer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NFLPlayerID":
			out.NFLPlayerID = uint(in.Uint())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "ContractLength":
			out.ContractLength = int(in.Int())
		case "Y1BaseSalary":
			out.Y1BaseSalary = float64(in.Float64())
		case "Y1Bonus":
			out.Y1Bonus = float64(in.Float64())
		case "Y2BaseSalary":
			out.Y2BaseSalary = float64(in.Float64())
		case "Y2Bonus":
			out.Y2Bonus = float64(in.Float64())
		case "Y3BaseSalary":
			out.Y3BaseSalary = float64(in.Float64())
		case "Y3Bonus":
			out.Y3Bonus = float64(in.Float64())
		case "Y4BaseSalary":
			out.Y4BaseSalary = float64(in.Float64())
		case "Y4Bonus":
			out.Y4Bonus = float64(in.Float64())
		case "Y5BaseSalary":
			out.Y5BaseSalary = float64(in.Float64())
		case "Y5Bonus":
			out.Y5Bonus = float64(in.Float64())
		case "TotalBonus":
			out.TotalBonus = float64(in.Float64())
		case "TotalSalary":
			out.TotalSalary = float64(in.Float64())
		case "ContractValue":
			out.ContractValue = float64(in.Float64())
		case "BonusPercentage":
			out.BonusPercentage = float64(in.Float64())
		case "AAV":
			out.AAV = float64(in.Float64())
		case "IsActive":
			out.IsActive = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs17(out *jwriter.Writer, in structs.FreeAgencyOffer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NFLPlayerID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.NFLPlayerID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"ContractLength\":"
		out.RawString(prefix)
		out.Int(int(in.ContractLength))
	}
	{
		const prefix string = ",\"Y1BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1BaseSalary))
	}
	{
		const prefix string = ",\"Y1Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1Bonus))
	}
	{
		const prefix string = ",\"Y2BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2BaseSalary))
	}
	{
		const prefix string = ",\"Y2Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2Bonus))
	}
	{
		const prefix string = ",\"Y3BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3BaseSalary))
	}
	{
		const prefix string = ",\"Y3Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3Bonus))
	}
	{
		const prefix string = ",\"Y4BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4BaseSalary))
	}
	{
		const prefix string = ",\"Y4Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4Bonus))
	}
	{
		const prefix string = ",\"Y5BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5BaseSalary))
	}
	{
		const prefix string = ",\"Y5Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5Bonus))
	}
	{
		const prefix string = ",\"TotalBonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalBonus))
	}
	{
		const prefix string = ",\"TotalSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalSalary))
	}
	{
		const prefix string = ",\"ContractValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.ContractValue))
	}
	{
		const prefix string = ",\"BonusPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.BonusPercentage))
	}
	{
		const prefix string = ",\"AAV\":"
		out.RawString(prefix)
		out.Float64(float64(in.AAV))
	}
	{
		const prefix string = ",\"IsActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs16(in *jlexer.Lexer, out *structs.NFLContract) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PlayerID":
			out.PlayerID = int(in.Int())
		case "NFLPlayerID":
			out.NFLPlayerID = int(in.Int())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "OriginalTeamID":
			out.OriginalTeamID = uint(in.Uint())
		case "OriginalTeam":
			out.OriginalTeam = string(in.String())
		case "ContractLength":
			out.ContractLength = int(in.Int())
		case "Y1BaseSalary":
			out.Y1BaseSalary = float64(in.Float64())
		case "Y1Bonus":
			out.Y1Bonus = float64(in.Float64())
		case "Y2BaseSalary":
			out.Y2BaseSalary = float64(in.Float64())
		case "Y2Bonus":
			out.Y2Bonus = float64(in.Float64())
		case "Y3BaseSalary":
			out.Y3BaseSalary = float64(in.Float64())
		case "Y3Bonus":
			out.Y3Bonus = float64(in.Float64())
		case "Y4BaseSalary":
			out.Y4BaseSalary = float64(in.Float64())
		case "Y4Bonus":
			out.Y4Bonus = float64(in.Float64())
		case "Y5BaseSalary":
			out.Y5BaseSalary = float64(in.Float64())
		case "Y5Bonus":
			out.Y5Bonus = float64(in.Float64())
		case "BonusPercentage":
			out.BonusPercentage = float64(in.Float64())
		case "ContractType":
			out.ContractType = string(in.String())
		case "ContractValue":
			out.ContractValue = float64(in.Float64())
		case "SigningValue":
			out.SigningValue = float64(in.Float64())
		case "IsActive":
			out.IsActive = bool(in.Bool())
		case "IsComplete":
			out.IsComplete = bool(in.Bool())
		case "IsExtended":
			out.IsExtended = bool(in.Bool())
		case "HasProgressed":
			out.HasProgressed = bool(in.Bool())
		case "PlayerRetired":
			out.PlayerRetired = bool(in.Bool())
		case "TagType":
			out.TagType = uint8(in.Uint8())
		case "IsTagged":
			out.IsTagged = bool(in.Bool())
		case "IsCut":
			out.IsCut = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs16(out *jwriter.Writer, in structs.NFLContract) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlayerID))
	}
	{
		const prefix string = ",\"NFLPlayerID\":"
		out.RawString(prefix)
		out.Int(int(in.NFLPlayerID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"OriginalTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.OriginalTeamID))
	}
	{
		const prefix string = ",\"OriginalTeam\":"
		out.RawString(prefix)
		out.String(string(in.OriginalTeam))
	}
	{
		const prefix string = ",\"ContractLength\":"
		out.RawString(prefix)
		out.Int(int(in.ContractLength))
	}
	{
		const prefix string = ",\"Y1BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1BaseSalary))
	}
	{
		const prefix string = ",\"Y1Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1Bonus))
	}
	{
		const prefix string = ",\"Y2BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2BaseSalary))
	}
	{
		const prefix string = ",\"Y2Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2Bonus))
	}
	{
		const prefix string = ",\"Y3BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3BaseSalary))
	}
	{
		const prefix string = ",\"Y3Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3Bonus))
	}
	{
		const prefix string = ",\"Y4BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4BaseSalary))
	}
	{
		const prefix string = ",\"Y4Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4Bonus))
	}
	{
		const prefix string = ",\"Y5BaseSalary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5BaseSalary))
	}
	{
		const prefix string = ",\"Y5Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5Bonus))
	}
	{
		const prefix string = ",\"BonusPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.BonusPercentage))
	}
	{
		const prefix string = ",\"ContractType\":"
		out.RawString(prefix)
		out.String(string(in.ContractType))
	}
	{
		const prefix string = ",\"ContractValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.ContractValue))
	}
	{
		const prefix string = ",\"SigningValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.SigningValue))
	}
	{
		const prefix string = ",\"IsActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"IsComplete\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsComplete))
	}
	{
		const prefix string = ",\"IsExtended\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsExtended))
	}
	{
		const prefix string = ",\"HasProgressed\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasProgressed))
	}
	{
		const prefix string = ",\"PlayerRetired\":"
		out.RawString(prefix)
		out.Bool(bool(in.PlayerRetired))
	}
	{
		const prefix string = ",\"TagType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TagType))
	}
	{
		const prefix string = ",\"IsTagged\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTagged))
	}
	{
		const prefix string = ",\"IsCut\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCut))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs15(in *jlexer.Lexer, out *structs.NFLPlayerSeasonStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NFLPlayerID":
			out.NFLPlayerID = uint(in.Uint())
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "Year":
			out.Year = uint(in.Uint())
		case "GamesPlayed":
			out.GamesPlayed = int(in.Int())
		case "QBRating":
			out.QBRating = float64(in.Float64())
		case "Tackles":
			out.Tackles = float64(in.Float64())
		case "RushingAvg":
			out.RushingAvg = float64(in.Float64())
		case "PassingAvg":
			out.PassingAvg = float64(in.Float64())
		case "ReceivingAvg":
			out.ReceivingAvg = float64(in.Float64())
		case "Completion":
			out.Completion = float64(in.Float64())
		case "PassingYards":
			out.PassingYards = int(in.Int())
		case "PassAttempts":
			out.PassAttempts = int(in.Int())
		case "PassCompletions":
			out.PassCompletions = int(in.Int())
		case "PassingTDs":
			out.PassingTDs = int(in.Int())
		case "Interceptions":
			out.Interceptions = int(in.Int())
		case "LongestPass":
			out.LongestPass = int(in.Int())
		case "Sacks":
			out.Sacks = int(in.Int())
		case "RushAttempts":
			out.RushAttempts = int(in.Int())
		case "RushingYards":
			out.RushingYards = int(in.Int())
		case "RushingTDs":
			out.RushingTDs = int(in.Int())
		case "Fumbles":
			out.Fumbles = int(in.Int())
		case "LongestRush":
			out.LongestRush = int(in.Int())
		case "Targets":
			out.Targets = int(in.Int())
		case "Catches":
			out.Catches = int(in.Int())
		case "ReceivingYards":
			out.ReceivingYards = int(in.Int())
		case "ReceivingTDs":
			out.ReceivingTDs = int(in.Int())
		case "LongestReception":
			out.LongestReception = int(in.Int())
		case "SoloTackles":
			out.SoloTackles = float64(in.Float64())
		case "AssistedTackles":
			out.AssistedTackles = float64(in.Float64())
		case "TacklesForLoss":
			out.TacklesForLoss = float64(in.Float64())
		case "SacksMade":
			out.SacksMade = float64(in.Float64())
		case "ForcedFumbles":
			out.ForcedFumbles = int(in.Int())
		case "RecoveredFumbles":
			out.RecoveredFumbles = int(in.Int())
		case "PassDeflections":
			out.PassDeflections = int(in.Int())
		case "InterceptionsCaught":
			out.InterceptionsCaught = int(in.Int())
		case "Safeties":
			out.Safeties = int(in.Int())
		case "DefensiveTDs":
			out.DefensiveTDs = int(in.Int())
		case "FGMade":
			out.FGMade = int(in.Int())
		case "FGAttempts":
			out.FGAttempts = int(in.Int())
		case "LongestFG":
			out.LongestFG = int(in.Int())
		case "ExtraPointsMade":
			out.ExtraPointsMade = int(in.Int())
		case "ExtraPointsAttempted":
			out.ExtraPointsAttempted = int(in.Int())
		case "KickoffTouchbacks":
			out.KickoffTouchbacks = int(in.Int())
		case "Punts":
			out.Punts = int(in.Int())
		case "GrossPuntDistance":
			out.GrossPuntDistance = int(in.Int())
		case "NetPuntDistance":
			out.NetPuntDistance = int(in.Int())
		case "PuntTouchbacks":
			out.PuntTouchbacks = int(in.Int())
		case "PuntsInside20":
			out.PuntsInside20 = int(in.Int())
		case "KickReturns":
			out.KickReturns = int(in.Int())
		case "KickReturnTDs":
			out.KickReturnTDs = int(in.Int())
		case "KickReturnYards":
			out.KickReturnYards = int(in.Int())
		case "PuntReturns":
			out.PuntReturns = int(in.Int())
		case "PuntReturnTDs":
			out.PuntReturnTDs = int(in.Int())
		case "PuntReturnYards":
			out.PuntReturnYards = int(in.Int())
		case "STSoloTackles":
			out.STSoloTackles = float64(in.Float64())
		case "STAssistedTackles":
			out.STAssistedTackles = float64(in.Float64())
		case "PuntsBlocked":
			out.PuntsBlocked = int(in.Int())
		case "FGBlocked":
			out.FGBlocked = int(in.Int())
		case "Snaps":
			out.Snaps = int(in.Int())
		case "Pancakes":
			out.Pancakes = int(in.Int())
		case "SacksAllowed":
			out.SacksAllowed = int(in.Int())
		case "PlayedGame":
			out.PlayedGame = int(in.Int())
		case "StartedGame":
			out.StartedGame = int(in.Int())
		case "WasInjured":
			out.WasInjured = bool(in.Bool())
		case "WeeksOfRecovery":
			out.WeeksOfRecovery = uint(in.Uint())
		case "InjuryType":
			out.InjuryType = string(in.String())
		case "RevealResults":
			out.RevealResults = bool(in.Bool())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "PreviousTeamID":
			out.PreviousTeamID = uint(in.Uint())
		case "PreviousTeam":
			out.PreviousTeam = string(in.String())
		case "GameType":
			out.GameType = uint8(in.Uint8())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs15(out *jwriter.Writer, in structs.NFLPlayerSeasonStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NFLPlayerID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.NFLPlayerID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"Year\":"
		out.RawString(prefix)
		out.Uint(uint(in.Year))
	}
	{
		const prefix string = ",\"GamesPlayed\":"
		out.RawString(prefix)
		out.Int(int(in.GamesPlayed))
	}
	{
		const prefix string = ",\"QBRating\":"
		out.RawString(prefix)
		out.Float64(float64(in.QBRating))
	}
	{
		const prefix string = ",\"Tackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.Tackles))
	}
	{
		const prefix string = ",\"RushingAvg\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingAvg))
	}
	{
		const prefix string = ",\"PassingAvg\":"
		out.RawString(prefix)
		out.Float64(float64(in.PassingAvg))
	}
	{
		const prefix string = ",\"ReceivingAvg\":"
		out.RawString(prefix)
		out.Float64(float64(in.ReceivingAvg))
	}
	{
		const prefix string = ",\"Completion\":"
		out.RawString(prefix)
		out.Float64(float64(in.Completion))
	}
	{
		const prefix string = ",\"PassingYards\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYards))
	}
	{
		const prefix string = ",\"PassAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.PassAttempts))
	}
	{
		const prefix string = ",\"PassCompletions\":"
		out.RawString(prefix)
		out.Int(int(in.PassCompletions))
	}
	{
		const prefix string = ",\"PassingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDs))
	}
	{
		const prefix string = ",\"Interceptions\":"
		out.RawString(prefix)
		out.Int(int(in.Interceptions))
	}
	{
		const prefix string = ",\"LongestPass\":"
		out.RawString(prefix)
		out.Int(int(in.LongestPass))
	}
	{
		const prefix string = ",\"Sacks\":"
		out.RawString(prefix)
		out.Int(int(in.Sacks))
	}
	{
		const prefix string = ",\"RushAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.RushAttempts))
	}
	{
		const prefix string = ",\"RushingYards\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYards))
	}
	{
		const prefix string = ",\"RushingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDs))
	}
	{
		const prefix string = ",\"Fumbles\":"
		out.RawString(prefix)
		out.Int(int(in.Fumbles))
	}
	{
		const prefix string = ",\"LongestRush\":"
		out.RawString(prefix)
		out.Int(int(in.LongestRush))
	}
	{
		const prefix string = ",\"Targets\":"
		out.RawString(prefix)
		out.Int(int(in.Targets))
	}
	{
		const prefix string = ",\"Catches\":"
		out.RawString(prefix)
		out.Int(int(in.Catches))
	}
	{
		const prefix string = ",\"ReceivingYards\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYards))
	}
	{
		const prefix string = ",\"ReceivingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDs))
	}
	{
		const prefix string = ",\"LongestReception\":"
		out.RawString(prefix)
		out.Int(int(in.LongestReception))
	}
	{
		const prefix string = ",\"SoloTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.SoloTackles))
	}
	{
		const prefix string = ",\"AssistedTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.AssistedTackles))
	}
	{
		const prefix string = ",\"TacklesForLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.TacklesForLoss))
	}
	{
		const prefix string = ",\"SacksMade\":"
		out.RawString(prefix)
		out.Float64(float64(in.SacksMade))
	}
	{
		const prefix string = ",\"ForcedFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ForcedFumbles))
	}
	{
		const prefix string = ",\"RecoveredFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.RecoveredFumbles))
	}
	{
		const prefix string = ",\"PassDeflections\":"
		out.RawString(prefix)
		out.Int(int(in.PassDeflections))
	}
	{
		const prefix string = ",\"InterceptionsCaught\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsCaught))
	}
	{
		const prefix string = ",\"Safeties\":"
		out.RawString(prefix)
		out.Int(int(in.Safeties))
	}
	{
		const prefix string = ",\"DefensiveTDs\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveTDs))
	}
	{
		const prefix string = ",\"FGMade\":"
		out.RawString(prefix)
		out.Int(int(in.FGMade))
	}
	{
		const prefix string = ",\"FGAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.FGAttempts))
	}
	{
		const prefix string = ",\"LongestFG\":"
		out.RawString(prefix)
		out.Int(int(in.LongestFG))
	}
	{
		const prefix string = ",\"ExtraPointsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsMade))
	}
	{
		const prefix string = ",\"ExtraPointsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsAttempted))
	}
	{
		const prefix string = ",\"KickoffTouchbacks\":"
		out.RawString(prefix)
		out.Int(int(in.KickoffTouchbacks))
	}
	{
		const prefix string = ",\"Punts\":"
		out.RawString(prefix)
		out.Int(int(in.Punts))
	}
	{
		const prefix string = ",\"GrossPuntDistance\":"
		out.RawString(prefix)
		out.Int(int(in.GrossPuntDistance))
	}
	{
		const prefix string = ",\"NetPuntDistance\":"
		out.RawString(prefix)
		out.Int(int(in.NetPuntDistance))
	}
	{
		const prefix string = ",\"PuntTouchbacks\":"
		out.RawString(prefix)
		out.Int(int(in.PuntTouchbacks))
	}
	{
		const prefix string = ",\"PuntsInside20\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsInside20))
	}
	{
		const prefix string = ",\"KickReturns\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturns))
	}
	{
		const prefix string = ",\"KickReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnTDs))
	}
	{
		const prefix string = ",\"KickReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnYards))
	}
	{
		const prefix string = ",\"PuntReturns\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturns))
	}
	{
		const prefix string = ",\"PuntReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnTDs))
	}
	{
		const prefix string = ",\"PuntReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnYards))
	}
	{
		const prefix string = ",\"STSoloTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.STSoloTackles))
	}
	{
		const prefix string = ",\"STAssistedTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.STAssistedTackles))
	}
	{
		const prefix string = ",\"PuntsBlocked\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsBlocked))
	}
	{
		const prefix string = ",\"FGBlocked\":"
		out.RawString(prefix)
		out.Int(int(in.FGBlocked))
	}
	{
		const prefix string = ",\"Snaps\":"
		out.RawString(prefix)
		out.Int(int(in.Snaps))
	}
	{
		const prefix string = ",\"Pancakes\":"
		out.RawString(prefix)
		out.Int(int(in.Pancakes))
	}
	{
		const prefix string = ",\"SacksAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.SacksAllowed))
	}
	{
		const prefix string = ",\"PlayedGame\":"
		out.RawString(prefix)
		out.Int(int(in.PlayedGame))
	}
	{
		const prefix string = ",\"StartedGame\":"
		out.RawString(prefix)
		out.Int(int(in.StartedGame))
	}
	{
		const prefix string = ",\"WasInjured\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasInjured))
	}
	{
		const prefix string = ",\"WeeksOfRecovery\":"
		out.RawString(prefix)
		out.Uint(uint(in.WeeksOfRecovery))
	}
	{
		const prefix string = ",\"InjuryType\":"
		out.RawString(prefix)
		out.String(string(in.InjuryType))
	}
	{
		const prefix string = ",\"RevealResults\":"
		out.RawString(prefix)
		out.Bool(bool(in.RevealResults))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"PreviousTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PreviousTeamID))
	}
	{
		const prefix string = ",\"PreviousTeam\":"
		out.RawString(prefix)
		out.String(string(in.PreviousTeam))
	}
	{
		const prefix string = ",\"GameType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GameType))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs14(in *jlexer.Lexer, out *structs.NFLPlayerStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsPreseasonGame":
			out.IsPreseasonGame = bool(in.Bool())
		case "NFLPlayerID":
			out.NFLPlayerID = int(in.Int())
		case "GameID":
			out.GameID = int(in.Int())
		case "WeekID":
			out.WeekID = int(in.Int())
		case "SeasonID":
			out.SeasonID = int(in.Int())
		case "OpposingTeam":
			out.OpposingTeam = string(in.String())
		case "Year":
			out.Year = int(in.Int())
		case "PassingYards":
			out.PassingYards = int(in.Int())
		case "PassAttempts":
			out.PassAttempts = int(in.Int())
		case "PassCompletions":
			out.PassCompletions = int(in.Int())
		case "PassingTDs":
			out.PassingTDs = int(in.Int())
		case "Interceptions":
			out.Interceptions = int(in.Int())
		case "LongestPass":
			out.LongestPass = int(in.Int())
		case "Sacks":
			out.Sacks = int(in.Int())
		case "RushAttempts":
			out.RushAttempts = int(in.Int())
		case "RushingYards":
			out.RushingYards = int(in.Int())
		case "RushingTDs":
			out.RushingTDs = int(in.Int())
		case "Fumbles":
			out.Fumbles = int(in.Int())
		case "LongestRush":
			out.LongestRush = int(in.Int())
		case "Targets":
			out.Targets = int(in.Int())
		case "Catches":
			out.Catches = int(in.Int())
		case "ReceivingYards":
			out.ReceivingYards = int(in.Int())
		case "ReceivingTDs":
			out.ReceivingTDs = int(in.Int())
		case "LongestReception":
			out.LongestReception = int(in.Int())
		case "SoloTackles":
			out.SoloTackles = float64(in.Float64())
		case "AssistedTackles":
			out.AssistedTackles = float64(in.Float64())
		case "TacklesForLoss":
			out.TacklesForLoss = float64(in.Float64())
		case "SacksMade":
			out.SacksMade = float64(in.Float64())
		case "ForcedFumbles":
			out.ForcedFumbles = int(in.Int())
		case "RecoveredFumbles":
			out.RecoveredFumbles = int(in.Int())
		case "PassDeflections":
			out.PassDeflections = int(in.Int())
		case "InterceptionsCaught":
			out.InterceptionsCaught = int(in.Int())
		case "Safeties":
			out.Safeties = int(in.Int())
		case "DefensiveTDs":
			out.DefensiveTDs = int(in.Int())
		case "FGMade":
			out.FGMade = int(in.Int())
		case "FGAttempts":
			out.FGAttempts = int(in.Int())
		case "LongestFG":
			out.LongestFG = int(in.Int())
		case "ExtraPointsMade":
			out.ExtraPointsMade = int(in.Int())
		case "ExtraPointsAttempted":
			out.ExtraPointsAttempted = int(in.Int())
		case "KickoffTouchbacks":
			out.KickoffTouchbacks = int(in.Int())
		case "Punts":
			out.Punts = int(in.Int())
		case "GrossPuntDistance":
			out.GrossPuntDistance = int(in.Int())
		case "NetPuntDistance":
			out.NetPuntDistance = int(in.Int())
		case "PuntTouchbacks":
			out.PuntTouchbacks = int(in.Int())
		case "PuntsInside20":
			out.PuntsInside20 = int(in.Int())
		case "KickReturns":
			out.KickReturns = int(in.Int())
		case "KickReturnTDs":
			out.KickReturnTDs = int(in.Int())
		case "KickReturnYards":
			out.KickReturnYards = int(in.Int())
		case "PuntReturns":
			out.PuntReturns = int(in.Int())
		case "PuntReturnTDs":
			out.PuntReturnTDs = int(in.Int())
		case "PuntReturnYards":
			out.PuntReturnYards = int(in.Int())
		case "STSoloTackles":
			out.STSoloTackles = float64(in.Float64())
		case "STAssistedTackles":
			out.STAssistedTackles = float64(in.Float64())
		case "PuntsBlocked":
			out.PuntsBlocked = int(in.Int())
		case "FGBlocked":
			out.FGBlocked = int(in.Int())
		case "Snaps":
			out.Snaps = int(in.Int())
		case "Pancakes":
			out.Pancakes = int(in.Int())
		case "SacksAllowed":
			out.SacksAllowed = int(in.Int())
		case "PlayedGame":
			out.PlayedGame = int(in.Int())
		case "StartedGame":
			out.StartedGame = int(in.Int())
		case "WasInjured":
			out.WasInjured = bool(in.Bool())
		case "WeeksOfRecovery":
			out.WeeksOfRecovery = uint(in.Uint())
		case "InjuryType":
			out.InjuryType = string(in.String())
		case "RevealResults":
			out.RevealResults = bool(in.Bool())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "PreviousTeamID":
			out.PreviousTeamID = uint(in.Uint())
		case "PreviousTeam":
			out.PreviousTeam = string(in.String())
		case "GameType":
			out.GameType = uint8(in.Uint8())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs14(out *jwriter.Writer, in structs.NFLPlayerStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IsPreseasonGame\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsPreseasonGame))
	}
	{
		const prefix string = ",\"NFLPlayerID\":"
		out.RawString(prefix)
		out.Int(int(in.NFLPlayerID))
	}
	{
		const prefix string = ",\"GameID\":"
		out.RawString(prefix)
		out.Int(int(in.GameID))
	}
	{
		const prefix string = ",\"WeekID\":"
		out.RawString(prefix)
		out.Int(int(in.WeekID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"OpposingTeam\":"
		out.RawString(prefix)
		out.String(string(in.OpposingTeam))
	}
	{
		const prefix string = ",\"Year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"PassingYards\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYards))
	}
	{
		const prefix string = ",\"PassAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.PassAttempts))
	}
	{
		const prefix string = ",\"PassCompletions\":"
		out.RawString(prefix)
		out.Int(int(in.PassCompletions))
	}
	{
		const prefix string = ",\"PassingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDs))
	}
	{
		const prefix string = ",\"Interceptions\":"
		out.RawString(prefix)
		out.Int(int(in.Interceptions))
	}
	{
		const prefix string = ",\"LongestPass\":"
		out.RawString(prefix)
		out.Int(int(in.LongestPass))
	}
	{
		const prefix string = ",\"Sacks\":"
		out.RawString(prefix)
		out.Int(int(in.Sacks))
	}
	{
		const prefix string = ",\"RushAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.RushAttempts))
	}
	{
		const prefix string = ",\"RushingYards\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYards))
	}
	{
		const prefix string = ",\"RushingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDs))
	}
	{
		const prefix string = ",\"Fumbles\":"
		out.RawString(prefix)
		out.Int(int(in.Fumbles))
	}
	{
		const prefix string = ",\"LongestRush\":"
		out.RawString(prefix)
		out.Int(int(in.LongestRush))
	}
	{
		const prefix string = ",\"Targets\":"
		out.RawString(prefix)
		out.Int(int(in.Targets))
	}
	{
		const prefix string = ",\"Catches\":"
		out.RawString(prefix)
		out.Int(int(in.Catches))
	}
	{
		const prefix string = ",\"ReceivingYards\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYards))
	}
	{
		const prefix string = ",\"ReceivingTDs\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDs))
	}
	{
		const prefix string = ",\"LongestReception\":"
		out.RawString(prefix)
		out.Int(int(in.LongestReception))
	}
	{
		const prefix string = ",\"SoloTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.SoloTackles))
	}
	{
		const prefix string = ",\"AssistedTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.AssistedTackles))
	}
	{
		const prefix string = ",\"TacklesForLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.TacklesForLoss))
	}
	{
		const prefix string = ",\"SacksMade\":"
		out.RawString(prefix)
		out.Float64(float64(in.SacksMade))
	}
	{
		const prefix string = ",\"ForcedFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ForcedFumbles))
	}
	{
		const prefix string = ",\"RecoveredFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.RecoveredFumbles))
	}
	{
		const prefix string = ",\"PassDeflections\":"
		out.RawString(prefix)
		out.Int(int(in.PassDeflections))
	}
	{
		const prefix string = ",\"InterceptionsCaught\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsCaught))
	}
	{
		const prefix string = ",\"Safeties\":"
		out.RawString(prefix)
		out.Int(int(in.Safeties))
	}
	{
		const prefix string = ",\"DefensiveTDs\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveTDs))
	}
	{
		const prefix string = ",\"FGMade\":"
		out.RawString(prefix)
		out.Int(int(in.FGMade))
	}
	{
		const prefix string = ",\"FGAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.FGAttempts))
	}
	{
		const prefix string = ",\"LongestFG\":"
		out.RawString(prefix)
		out.Int(int(in.LongestFG))
	}
	{
		const prefix string = ",\"ExtraPointsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsMade))
	}
	{
		const prefix string = ",\"ExtraPointsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsAttempted))
	}
	{
		const prefix string = ",\"KickoffTouchbacks\":"
		out.RawString(prefix)
		out.Int(int(in.KickoffTouchbacks))
	}
	{
		const prefix string = ",\"Punts\":"
		out.RawString(prefix)
		out.Int(int(in.Punts))
	}
	{
		const prefix string = ",\"GrossPuntDistance\":"
		out.RawString(prefix)
		out.Int(int(in.GrossPuntDistance))
	}
	{
		const prefix string = ",\"NetPuntDistance\":"
		out.RawString(prefix)
		out.Int(int(in.NetPuntDistance))
	}
	{
		const prefix string = ",\"PuntTouchbacks\":"
		out.RawString(prefix)
		out.Int(int(in.PuntTouchbacks))
	}
	{
		const prefix string = ",\"PuntsInside20\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsInside20))
	}
	{
		const prefix string = ",\"KickReturns\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturns))
	}
	{
		const prefix string = ",\"KickReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnTDs))
	}
	{
		const prefix string = ",\"KickReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnYards))
	}
	{
		const prefix string = ",\"PuntReturns\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturns))
	}
	{
		const prefix string = ",\"PuntReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnTDs))
	}
	{
		const prefix string = ",\"PuntReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnYards))
	}
	{
		const prefix string = ",\"STSoloTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.STSoloTackles))
	}
	{
		const prefix string = ",\"STAssistedTackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.STAssistedTackles))
	}
	{
		const prefix string = ",\"PuntsBlocked\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsBlocked))
	}
	{
		const prefix string = ",\"FGBlocked\":"
		out.RawString(prefix)
		out.Int(int(in.FGBlocked))
	}
	{
		const prefix string = ",\"Snaps\":"
		out.RawString(prefix)
		out.Int(int(in.Snaps))
	}
	{
		const prefix string = ",\"Pancakes\":"
		out.RawString(prefix)
		out.Int(int(in.Pancakes))
	}
	{
		const prefix string = ",\"SacksAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.SacksAllowed))
	}
	{
		const prefix string = ",\"PlayedGame\":"
		out.RawString(prefix)
		out.Int(int(in.PlayedGame))
	}
	{
		const prefix string = ",\"StartedGame\":"
		out.RawString(prefix)
		out.Int(int(in.StartedGame))
	}
	{
		const prefix string = ",\"WasInjured\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasInjured))
	}
	{
		const prefix string = ",\"WeeksOfRecovery\":"
		out.RawString(prefix)
		out.Uint(uint(in.WeeksOfRecovery))
	}
	{
		const prefix string = ",\"InjuryType\":"
		out.RawString(prefix)
		out.String(string(in.InjuryType))
	}
	{
		const prefix string = ",\"RevealResults\":"
		out.RawString(prefix)
		out.Bool(bool(in.RevealResults))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"PreviousTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PreviousTeamID))
	}
	{
		const prefix string = ",\"PreviousTeam\":"
		out.RawString(prefix)
		out.String(string(in.PreviousTeam))
	}
	{
		const prefix string = ",\"GameType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GameType))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs12(in *jlexer.Lexer, out *structs.NFLCapsheet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NFLTeamID":
			out.NFLTeamID = uint(in.Uint())
		case "Y1Bonus":
			out.Y1Bonus = float64(in.Float64())
		case "Y1Salary":
			out.Y1Salary = float64(in.Float64())
		case "Y1CapHit":
			out.Y1CapHit = float64(in.Float64())
		case "Y2Bonus":
			out.Y2Bonus = float64(in.Float64())
		case "Y2Salary":
			out.Y2Salary = float64(in.Float64())
		case "Y2CapHit":
			out.Y2CapHit = float64(in.Float64())
		case "Y3Bonus":
			out.Y3Bonus = float64(in.Float64())
		case "Y3Salary":
			out.Y3Salary = float64(in.Float64())
		case "Y3CapHit":
			out.Y3CapHit = float64(in.Float64())
		case "Y4Bonus":
			out.Y4Bonus = float64(in.Float64())
		case "Y4Salary":
			out.Y4Salary = float64(in.Float64())
		case "Y4CapHit":
			out.Y4CapHit = float64(in.Float64())
		case "Y5Bonus":
			out.Y5Bonus = float64(in.Float64())
		case "Y5Salary":
			out.Y5Salary = float64(in.Float64())
		case "Y5CapHit":
			out.Y5CapHit = float64(in.Float64())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs12(out *jwriter.Writer, in structs.NFLCapsheet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NFLTeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.NFLTeamID))
	}
	{
		const prefix string = ",\"Y1Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1Bonus))
	}
	{
		const prefix string = ",\"Y1Salary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1Salary))
	}
	{
		const prefix string = ",\"Y1CapHit\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y1CapHit))
	}
	{
		const prefix string = ",\"Y2Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2Bonus))
	}
	{
		const prefix string = ",\"Y2Salary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2Salary))
	}
	{
		const prefix string = ",\"Y2CapHit\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y2CapHit))
	}
	{
		const prefix string = ",\"Y3Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3Bonus))
	}
	{
		const prefix string = ",\"Y3Salary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3Salary))
	}
	{
		const prefix string = ",\"Y3CapHit\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y3CapHit))
	}
	{
		const prefix string = ",\"Y4Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4Bonus))
	}
	{
		const prefix string = ",\"Y4Salary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4Salary))
	}
	{
		const prefix string = ",\"Y4CapHit\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y4CapHit))
	}
	{
		const prefix string = ",\"Y5Bonus\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5Bonus))
	}
	{
		const prefix string = ",\"Y5Salary\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5Salary))
	}
	{
		const prefix string = ",\"Y5CapHit\":"
		out.RawString(prefix)
		out.Float64(float64(in.Y5CapHit))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs11(in *jlexer.Lexer, out *structs.NFLGame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "WeekID":
			out.WeekID = int(in.Int())
		case "Week":
			out.Week = int(in.Int())
		case "SeasonID":
			out.SeasonID = int(in.Int())
		case "HomeTeamID":
			out.HomeTeamID = int(in.Int())
		case "HomeTeam":
			out.HomeTeam = string(in.String())
		case "HomeTeamCoach":
			out.HomeTeamCoach = string(in.String())
		case "HomeTeamWin":
			out.HomeTeamWin = bool(in.Bool())
		case "AwayTeamID":
			out.AwayTeamID = int(in.Int())
		case "AwayTeam":
			out.AwayTeam = string(in.String())
		case "AwayTeamCoach":
			out.AwayTeamCoach = string(in.String())
		case "AwayTeamWin":
			out.AwayTeamWin = bool(in.Bool())
		case "MVP":
			out.MVP = string(in.String())
		case "HomeTeamScore":
			out.HomeTeamScore = int(in.Int())
		case "AwayTeamScore":
			out.AwayTeamScore = int(in.Int())
		case "TimeSlot":
			out.TimeSlot = string(in.String())
		case "StadiumID":
			out.StadiumID = uint(in.Uint())
		case "Stadium":
			out.Stadium = string(in.String())
		case "City":
			out.City = string(in.String())
		case "State":
			out.State = string(in.String())
		case "Region":
			out.Region = string(in.String())
		case "LowTemp":
			out.LowTemp = float64(in.Float64())
		case "HighTemp":
			out.HighTemp = float64(in.Float64())
		case "GameTemp":
			out.GameTemp = float64(in.Float64())
		case "Cloud":
			out.Cloud = string(in.String())
		case "Precip":
			out.Precip = string(in.String())
		case "WindSpeed":
			out.WindSpeed = float64(in.Float64())
		case "WindCategory":
			out.WindCategory = string(in.String())
		case "IsNeutral":
			out.IsNeutral = bool(in.Bool())
		case "IsDomed":
			out.IsDomed = bool(in.Bool())
		case "IsNightGame":
			out.IsNightGame = bool(in.Bool())
		case "IsPlayoffGame":
			out.IsPlayoffGame = bool(in.Bool())
		case "IsRivalryGame":
			out.IsRivalryGame = bool(in.Bool())
		case "IsConference":
			out.IsConference = bool(in.Bool())
		case "IsDivisional":
			out.IsDivisional = bool(in.Bool())
		case "IsConferenceChampionship":
			out.IsConferenceChampionship = bool(in.Bool())
		case "IsSuperBowl":
			out.IsSuperBowl = bool(in.Bool())
		case "GameComplete":
			out.GameComplete = bool(in.Bool())
		case "IsPreseasonGame":
			out.IsPreseasonGame = bool(in.Bool())
		case "GameTitle":
			out.GameTitle = string(in.String())
		case "NextGameID":
			out.NextGameID = uint(in.Uint())
		case "NextGameHOA":
			out.NextGameHOA = string(in.String())
		case "HomePreviousBye":
			out.HomePreviousBye = bool(in.Bool())
		case "AwayPreviousBye":
			out.AwayPreviousBye = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs11(out *jwriter.Writer, in structs.NFLGame) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"WeekID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.WeekID))
	}
	{
		const prefix string = ",\"Week\":"
		out.RawString(prefix)
		out.Int(int(in.Week))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"HomeTeamID\":"
		out.RawString(prefix)
		out.Int(int(in.HomeTeamID))
	}
	{
		const prefix string = ",\"HomeTeam\":"
		out.RawString(prefix)
		out.String(string(in.HomeTeam))
	}
	{
		const prefix string = ",\"HomeTeamCoach\":"
		out.RawString(prefix)
		out.String(string(in.HomeTeamCoach))
	}
	{
		const prefix string = ",\"HomeTeamWin\":"
		out.RawString(prefix)
		out.Bool(bool(in.HomeTeamWin))
	}
	{
		const prefix string = ",\"AwayTeamID\":"
		out.RawString(prefix)
		out.Int(int(in.AwayTeamID))
	}
	{
		const prefix string = ",\"AwayTeam\":"
		out.RawString(prefix)
		out.String(string(in.AwayTeam))
	}
	{
		const prefix string = ",\"AwayTeamCoach\":"
		out.RawString(prefix)
		out.String(string(in.AwayTeamCoach))
	}
	{
		const prefix string = ",\"AwayTeamWin\":"
		out.RawString(prefix)
		out.Bool(bool(in.AwayTeamWin))
	}
	{
		const prefix string = ",\"MVP\":"
		out.RawString(prefix)
		out.String(string(in.MVP))
	}
	{
		const prefix string = ",\"HomeTeamScore\":"
		out.RawString(prefix)
		out.Int(int(in.HomeTeamScore))
	}
	{
		const prefix string = ",\"AwayTeamScore\":"
		out.RawString(prefix)
		out.Int(int(in.AwayTeamScore))
	}
	{
		const prefix string = ",\"TimeSlot\":"
		out.RawString(prefix)
		out.String(string(in.TimeSlot))
	}
	{
		const prefix string = ",\"StadiumID\":"
		out.RawString(prefix)
		out.Uint(uint(in.StadiumID))
	}
	{
		const prefix string = ",\"Stadium\":"
		out.RawString(prefix)
		out.String(string(in.Stadium))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"Region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"LowTemp\":"
		out.RawString(prefix)
		out.Float64(float64(in.LowTemp))
	}
	{
		const prefix string = ",\"HighTemp\":"
		out.RawString(prefix)
		out.Float64(float64(in.HighTemp))
	}
	{
		const prefix string = ",\"GameTemp\":"
		out.RawString(prefix)
		out.Float64(float64(in.GameTemp))
	}
	{
		const prefix string = ",\"Cloud\":"
		out.RawString(prefix)
		out.String(string(in.Cloud))
	}
	{
		const prefix string = ",\"Precip\":"
		out.RawString(prefix)
		out.String(string(in.Precip))
	}
	{
		const prefix string = ",\"WindSpeed\":"
		out.RawString(prefix)
		out.Float64(float64(in.WindSpeed))
	}
	{
		const prefix string = ",\"WindCategory\":"
		out.RawString(prefix)
		out.String(string(in.WindCategory))
	}
	{
		const prefix string = ",\"IsNeutral\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNeutral))
	}
	{
		const prefix string = ",\"IsDomed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDomed))
	}
	{
		const prefix string = ",\"IsNightGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsNightGame))
	}
	{
		const prefix string = ",\"IsPlayoffGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPlayoffGame))
	}
	{
		const prefix string = ",\"IsRivalryGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRivalryGame))
	}
	{
		const prefix string = ",\"IsConference\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsConference))
	}
	{
		const prefix string = ",\"IsDivisional\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDivisional))
	}
	{
		const prefix string = ",\"IsConferenceChampionship\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsConferenceChampionship))
	}
	{
		const prefix string = ",\"IsSuperBowl\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSuperBowl))
	}
	{
		const prefix string = ",\"GameComplete\":"
		out.RawString(prefix)
		out.Bool(bool(in.GameComplete))
	}
	{
		const prefix string = ",\"IsPreseasonGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPreseasonGame))
	}
	{
		const prefix string = ",\"GameTitle\":"
		out.RawString(prefix)
		out.String(string(in.GameTitle))
	}
	{
		const prefix string = ",\"NextGameID\":"
		out.RawString(prefix)
		out.Uint(uint(in.NextGameID))
	}
	{
		const prefix string = ",\"NextGameHOA\":"
		out.RawString(prefix)
		out.String(string(in.NextGameHOA))
	}
	{
		const prefix string = ",\"HomePreviousBye\":"
		out.RawString(prefix)
		out.Bool(bool(in.HomePreviousBye))
	}
	{
		const prefix string = ",\"AwayPreviousBye\":"
		out.RawString(prefix)
		out.Bool(bool(in.AwayPreviousBye))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs10(in *jlexer.Lexer, out *structs.NFLStandings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "TeamName":
			out.TeamName = string(in.String())
		case "Mascot":
			out.Mascot = string(in.String())
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "Season":
			out.Season = uint(in.Uint())
		case "LeagueID":
			out.LeagueID = uint(in.Uint())
		case "LeagueName":
			out.LeagueName = string(in.String())
		case "ConferenceID":
			out.ConferenceID = uint(in.Uint())
		case "ConferenceName":
			out.ConferenceName = string(in.String())
		case "TotalTies":
			out.TotalTies = uint(in.Uint())
		case "ConferenceTies":
			out.ConferenceTies = uint(in.Uint())
		case "DivisionID":
			out.DivisionID = uint(in.Uint())
		case "DivisionName":
			out.DivisionName = string(in.String())
		case "DivisionWins":
			out.DivisionWins = uint(in.Uint())
		case "DivisionLosses":
			out.DivisionLosses = uint(in.Uint())
		case "DivisionTies":
			out.DivisionTies = uint(in.Uint())
		case "PostSeasonStatus":
			out.PostSeasonStatus = string(in.String())
		case "TotalWins":
			out.TotalWins = int(in.Int())
		case "TotalLosses":
			out.TotalLosses = int(in.Int())
		case "ConferenceWins":
			out.ConferenceWins = int(in.Int())
		case "ConferenceLosses":
			out.ConferenceLosses = int(in.Int())
		case "RankedWins":
			out.RankedWins = int(in.Int())
		case "RankedLosses":
			out.RankedLosses = int(in.Int())
		case "PointsFor":
			out.PointsFor = int(in.Int())
		case "PointsAgainst":
			out.PointsAgainst = int(in.Int())
		case "Streak":
			out.Streak = int(in.Int())
		case "HomeWins":
			out.HomeWins = int(in.Int())
		case "AwayWins":
			out.AwayWins = int(in.Int())
		case "Coach":
			out.Coach = string(in.String())
		case "TeamAbbr":
			out.TeamAbbr = string(in.String())
		case "TotalWinPercentage":
			out.TotalWinPercentage = float32(in.Float32())
		case "ConfWinPercentage":
			out.ConfWinPercentage = float32(in.Float32())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs10(out *jwriter.Writer, in structs.NFLStandings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"TeamName\":"
		out.RawString(prefix)
		out.String(string(in.TeamName))
	}
	{
		const prefix string = ",\"Mascot\":"
		out.RawString(prefix)
		out.String(string(in.Mascot))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"Season\":"
		out.RawString(prefix)
		out.Uint(uint(in.Season))
	}
	{
		const prefix string = ",\"LeagueID\":"
		out.RawString(prefix)
		out.Uint(uint(in.LeagueID))
	}
	{
		const prefix string = ",\"LeagueName\":"
		out.RawString(prefix)
		out.String(string(in.LeagueName))
	}
	{
		const prefix string = ",\"ConferenceID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ConferenceID))
	}
	{
		const prefix string = ",\"ConferenceName\":"
		out.RawString(prefix)
		out.String(string(in.ConferenceName))
	}
	{
		const prefix string = ",\"TotalTies\":"
		out.RawString(prefix)
		out.Uint(uint(in.TotalTies))
	}
	{
		const prefix string = ",\"ConferenceTies\":"
		out.RawString(prefix)
		out.Uint(uint(in.ConferenceTies))
	}
	{
		const prefix string = ",\"DivisionID\":"
		out.RawString(prefix)
		out.Uint(uint(in.DivisionID))
	}
	{
		const prefix string = ",\"DivisionName\":"
		out.RawString(prefix)
		out.String(string(in.DivisionName))
	}
	{
		const prefix string = ",\"DivisionWins\":"
		out.RawString(prefix)
		out.Uint(uint(in.DivisionWins))
	}
	{
		const prefix string = ",\"DivisionLosses\":"
		out.RawString(prefix)
		out.Uint(uint(in.DivisionLosses))
	}
	{
		const prefix string = ",\"DivisionTies\":"
		out.RawString(prefix)
		out.Uint(uint(in.DivisionTies))
	}
	{
		const prefix string = ",\"PostSeasonStatus\":"
		out.RawString(prefix)
		out.String(string(in.PostSeasonStatus))
	}
	{
		const prefix string = ",\"TotalWins\":"
		out.RawString(prefix)
		out.Int(int(in.TotalWins))
	}
	{
		const prefix string = ",\"TotalLosses\":"
		out.RawString(prefix)
		out.Int(int(in.TotalLosses))
	}
	{
		const prefix string = ",\"ConferenceWins\":"
		out.RawString(prefix)
		out.Int(int(in.ConferenceWins))
	}
	{
		const prefix string = ",\"ConferenceLosses\":"
		out.RawString(prefix)
		out.Int(int(in.ConferenceLosses))
	}
	{
		const prefix string = ",\"RankedWins\":"
		out.RawString(prefix)
		out.Int(int(in.RankedWins))
	}
	{
		const prefix string = ",\"RankedLosses\":"
		out.RawString(prefix)
		out.Int(int(in.RankedLosses))
	}
	{
		const prefix string = ",\"PointsFor\":"
		out.RawString(prefix)
		out.Int(int(in.PointsFor))
	}
	{
		const prefix string = ",\"PointsAgainst\":"
		out.RawString(prefix)
		out.Int(int(in.PointsAgainst))
	}
	{
		const prefix string = ",\"Streak\":"
		out.RawString(prefix)
		out.Int(int(in.Streak))
	}
	{
		const prefix string = ",\"HomeWins\":"
		out.RawString(prefix)
		out.Int(int(in.HomeWins))
	}
	{
		const prefix string = ",\"AwayWins\":"
		out.RawString(prefix)
		out.Int(int(in.AwayWins))
	}
	{
		const prefix string = ",\"Coach\":"
		out.RawString(prefix)
		out.String(string(in.Coach))
	}
	{
		const prefix string = ",\"TeamAbbr\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbr))
	}
	{
		const prefix string = ",\"TotalWinPercentage\":"
		out.RawString(prefix)
		out.Float32(float32(in.TotalWinPercentage))
	}
	{
		const prefix string = ",\"ConfWinPercentage\":"
		out.RawString(prefix)
		out.Float32(float32(in.ConfWinPercentage))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs9(in *jlexer.Lexer, out *structs.RecruitingTeamProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = int(in.Int())
		case "Team":
			out.Team = string(in.String())
		case "TeamAbbreviation":
			out.TeamAbbreviation = string(in.String())
		case "State":
			out.State = string(in.String())
		case "ScholarshipsAvailable":
			out.ScholarshipsAvailable = int(in.Int())
		case "WeeklyPoints":
			out.WeeklyPoints = float64(in.Float64())
		case "SpentPoints":
			out.SpentPoints = float64(in.Float64())
		case "TotalCommitments":
			out.TotalCommitments = int(in.Int())
		case "RecruitClassSize":
			out.RecruitClassSize = int(in.Int())
		case "PortalReputation":
			out.PortalReputation = int(in.Int())
		case "BaseEfficiencyScore":
			out.BaseEfficiencyScore = float64(in.Float64())
		case "RecruitingEfficiencyScore":
			out.RecruitingEfficiencyScore = float64(in.Float64())
		case "PreviousOverallWinPer":
			out.PreviousOverallWinPer = float64(in.Float64())
		case "PreviousConferenceWinPer":
			out.PreviousConferenceWinPer = float64(in.Float64())
		case "CurrentOverallWinPer":
			out.CurrentOverallWinPer = float64(in.Float64())
		case "CurrentConferenceWinPer":
			out.CurrentConferenceWinPer = float64(in.Float64())
		case "ESPNScore":
			out.ESPNScore = float64(in.Float64())
		case "RivalsScore":
			out.RivalsScore = float64(in.Float64())
		case "Rank247Score":
			out.Rank247Score = float64(in.Float64())
		case "CompositeScore":
			out.CompositeScore = float64(in.Float64())
		case "ThreeStars":
			out.ThreeStars = uint8(in.Uint8())
		case "FourStars":
			out.FourStars = uint8(in.Uint8())
		case "FiveStars":
			out.FiveStars = uint8(in.Uint8())
		case "RecruitingClassRank":
			out.RecruitingClassRank = int(in.Int())
		case "CaughtCheating":
			out.CaughtCheating = bool(in.Bool())
		case "IsFBS":
			out.IsFBS = bool(in.Bool())
		case "IsAI":
			out.IsAI = bool(in.Bool())
		case "IsUserTeam":
			out.IsUserTeam = bool(in.Bool())
		case "AIBehavior":
			out.AIBehavior = string(in.String())
		case "AIQuality":
			out.AIQuality = string(in.String())
		case "WeeksMissed":
			out.WeeksMissed = int(in.Int())
		case "BattlesWon":
			out.BattlesWon = int(in.Int())
		case "BattlesLost":
			out.BattlesLost = int(in.Int())
		case "AIMinThreshold":
			out.AIMinThreshold = int(in.Int())
		case "AIMaxThreshold":
			out.AIMaxThreshold = int(in.Int())
		case "AIStarMin":
			out.AIStarMin = int(in.Int())
		case "AIStarMax":
			out.AIStarMax = int(in.Int())
		case "AIAutoOfferscholarships":
			out.AIAutoOfferscholarships = bool(in.Bool())
		case "OffensiveScheme":
			out.OffensiveScheme = string(in.String())
		case "DefensiveScheme":
			out.DefensiveScheme = string(in.String())
		case "Recruiter":
			out.Recruiter = string(in.String())
		case "AcademicsAffinity":
			out.AcademicsAffinity = bool(in.Bool())
		case "FrontrunnerAffinity":
			out.FrontrunnerAffinity = bool(in.Bool())
		case "LargeCrowdsAffinity":
			out.LargeCrowdsAffinity = bool(in.Bool())
		case "ReligionAffinity":
			out.ReligionAffinity = bool(in.Bool())
		case "ServiceAffinity":
			out.ServiceAffinity = bool(in.Bool())
		case "SmallSchoolAffinity":
			out.SmallSchoolAffinity = bool(in.Bool())
		case "SmallTownAffinity":
			out.SmallTownAffinity = bool(in.Bool())
		case "BigCityAffinity":
			out.BigCityAffinity = bool(in.Bool())
		case "MediaSpotlightAffinity":
			out.MediaSpotlightAffinity = bool(in.Bool())
		case "RisingStarsAffinity":
			out.RisingStarsAffinity = bool(in.Bool())
		case "Recruits":
			if in.IsNull() {
				in.Skip()
				out.Recruits = nil
			} else {
				in.Delim('[')
				if out.Recruits == nil {
					if !in.IsDelim(']') {
						out.Recruits = make([]structs.RecruitPlayerProfile, 0, 0)
					} else {
						out.Recruits = []structs.RecruitPlayerProfile{}
					}
				} else {
					out.Recruits = (out.Recruits)[:0]
				}
				for !in.IsDelim(']') {
					var v72 structs.RecruitPlayerProfile
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs20(in, &v72)
					out.Recruits = append(out.Recruits, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Affinities":
			if in.IsNull() {
				in.Skip()
				out.Affinities = nil
			} else {
				in.Delim('[')
				if out.Affinities == nil {
					if !in.IsDelim(']') {
						out.Affinities = make([]structs.ProfileAffinity, 0, 0)
					} else {
						out.Affinities = []structs.ProfileAffinity{}
					}
				} else {
					out.Affinities = (out.Affinities)[:0]
				}
				for !in.IsDelim(']') {
					var v73 structs.ProfileAffinity
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs21(in, &v73)
					out.Affinities = append(out.Affinities, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs9(out *jwriter.Writer, in structs.RecruitingTeamProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"TeamAbbreviation\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbreviation))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"ScholarshipsAvailable\":"
		out.RawString(prefix)
		out.Int(int(in.ScholarshipsAvailable))
	}
	{
		const prefix string = ",\"WeeklyPoints\":"
		out.RawString(prefix)
		out.Float64(float64(in.WeeklyPoints))
	}
	{
		const prefix string = ",\"SpentPoints\":"
		out.RawString(prefix)
		out.Float64(float64(in.SpentPoints))
	}
	{
		const prefix string = ",\"TotalCommitments\":"
		out.RawString(prefix)
		out.Int(int(in.TotalCommitments))
	}
	{
		const prefix string = ",\"RecruitClassSize\":"
		out.RawString(prefix)
		out.Int(int(in.RecruitClassSize))
	}
	{
		const prefix string = ",\"PortalReputation\":"
		out.RawString(prefix)
		out.Int(int(in.PortalReputation))
	}
	{
		const prefix string = ",\"BaseEfficiencyScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.BaseEfficiencyScore))
	}
	{
		const prefix string = ",\"RecruitingEfficiencyScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.RecruitingEfficiencyScore))
	}
	{
		const prefix string = ",\"PreviousOverallWinPer\":"
		out.RawString(prefix)
		out.Float64(float64(in.PreviousOverallWinPer))
	}
	{
		const prefix string = ",\"PreviousConferenceWinPer\":"
		out.RawString(prefix)
		out.Float64(float64(in.PreviousConferenceWinPer))
	}
	{
		const prefix string = ",\"CurrentOverallWinPer\":"
		out.RawString(prefix)
		out.Float64(float64(in.CurrentOverallWinPer))
	}
	{
		const prefix string = ",\"CurrentConferenceWinPer\":"
		out.RawString(prefix)
		out.Float64(float64(in.CurrentConferenceWinPer))
	}
	{
		const prefix string = ",\"ESPNScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.ESPNScore))
	}
	{
		const prefix string = ",\"RivalsScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.RivalsScore))
	}
	{
		const prefix string = ",\"Rank247Score\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rank247Score))
	}
	{
		const prefix string = ",\"CompositeScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.CompositeScore))
	}
	{
		const prefix string = ",\"ThreeStars\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ThreeStars))
	}
	{
		const prefix string = ",\"FourStars\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.FourStars))
	}
	{
		const prefix string = ",\"FiveStars\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.FiveStars))
	}
	{
		const prefix string = ",\"RecruitingClassRank\":"
		out.RawString(prefix)
		out.Int(int(in.RecruitingClassRank))
	}
	{
		const prefix string = ",\"CaughtCheating\":"
		out.RawString(prefix)
		out.Bool(bool(in.CaughtCheating))
	}
	{
		const prefix string = ",\"IsFBS\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFBS))
	}
	{
		const prefix string = ",\"IsAI\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAI))
	}
	{
		const prefix string = ",\"IsUserTeam\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUserTeam))
	}
	{
		const prefix string = ",\"AIBehavior\":"
		out.RawString(prefix)
		out.String(string(in.AIBehavior))
	}
	{
		const prefix string = ",\"AIQuality\":"
		out.RawString(prefix)
		out.String(string(in.AIQuality))
	}
	{
		const prefix string = ",\"WeeksMissed\":"
		out.RawString(prefix)
		out.Int(int(in.WeeksMissed))
	}
	{
		const prefix string = ",\"BattlesWon\":"
		out.RawString(prefix)
		out.Int(int(in.BattlesWon))
	}
	{
		const prefix string = ",\"BattlesLost\":"
		out.RawString(prefix)
		out.Int(int(in.BattlesLost))
	}
	{
		const prefix string = ",\"AIMinThreshold\":"
		out.RawString(prefix)
		out.Int(int(in.AIMinThreshold))
	}
	{
		const prefix string = ",\"AIMaxThreshold\":"
		out.RawString(prefix)
		out.Int(int(in.AIMaxThreshold))
	}
	{
		const prefix string = ",\"AIStarMin\":"
		out.RawString(prefix)
		out.Int(int(in.AIStarMin))
	}
	{
		const prefix string = ",\"AIStarMax\":"
		out.RawString(prefix)
		out.Int(int(in.AIStarMax))
	}
	{
		const prefix string = ",\"AIAutoOfferscholarships\":"
		out.RawString(prefix)
		out.Bool(bool(in.AIAutoOfferscholarships))
	}
	{
		const prefix string = ",\"OffensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.OffensiveScheme))
	}
	{
		const prefix string = ",\"DefensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.DefensiveScheme))
	}
	{
		const prefix string = ",\"Recruiter\":"
		out.RawString(prefix)
		out.String(string(in.Recruiter))
	}
	{
		const prefix string = ",\"AcademicsAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.AcademicsAffinity))
	}
	{
		const prefix string = ",\"FrontrunnerAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.FrontrunnerAffinity))
	}
	{
		const prefix string = ",\"LargeCrowdsAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.LargeCrowdsAffinity))
	}
	{
		const prefix string = ",\"ReligionAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReligionAffinity))
	}
	{
		const prefix string = ",\"ServiceAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.ServiceAffinity))
	}
	{
		const prefix string = ",\"SmallSchoolAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.SmallSchoolAffinity))
	}
	{
		const prefix string = ",\"SmallTownAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.SmallTownAffinity))
	}
	{
		const prefix string = ",\"BigCityAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.BigCityAffinity))
	}
	{
		const prefix string = ",\"MediaSpotlightAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.MediaSpotlightAffinity))
	}
	{
		const prefix string = ",\"RisingStarsAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.RisingStarsAffinity))
	}
	{
		const prefix string = ",\"Recruits\":"
		out.RawString(prefix)
		if in.Recruits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.Recruits {
				if v74 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs20(out, v75)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Affinities\":"
		out.RawString(prefix)
		if in.Affinities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v76, v77 := range in.Affinities {
				if v76 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs21(out, v77)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs21(in *jlexer.Lexer, out *structs.ProfileAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AffinityID":
			out.AffinityID = int(in.Int())
		case "ProfileID":
			out.ProfileID = int(in.Int())
		case "AffinityName":
			out.AffinityName = string(in.String())
		case "IsApplicable":
			out.IsApplicable = bool(in.Bool())
		case "IsDynamicAffinity":
			out.IsDynamicAffinity = bool(in.Bool())
		case "IsCheckedWeekly":
			out.IsCheckedWeekly = bool(in.Bool())
		case "IsCheckedSeasonal":
			out.IsCheckedSeasonal = bool(in.Bool())
		case "AffinityValue":
			out.AffinityValue = float32(in.Float32())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs21(out *jwriter.Writer, in structs.ProfileAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AffinityID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AffinityID))
	}
	{
		const prefix string = ",\"ProfileID\":"
		out.RawString(prefix)
		out.Int(int(in.ProfileID))
	}
	{
		const prefix string = ",\"AffinityName\":"
		out.RawString(prefix)
		out.String(string(in.AffinityName))
	}
	{
		const prefix string = ",\"IsApplicable\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsApplicable))
	}
	{
		const prefix string = ",\"IsDynamicAffinity\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDynamicAffinity))
	}
	{
		const prefix string = ",\"IsCheckedWeekly\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCheckedWeekly))
	}
	{
		const prefix string = ",\"IsCheckedSeasonal\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCheckedSeasonal))
	}
	{
		const prefix string = ",\"AffinityValue\":"
		out.RawString(prefix)
		out.Float32(float32(in.AffinityValue))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs20(in *jlexer.Lexer, out *structs.RecruitPlayerProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SeasonID":
			out.SeasonID = int(in.Int())
		case "RecruitID":
			out.RecruitID = int(in.Int())
		case "ProfileID":
			out.ProfileID = int(in.Int())
		case "TotalPoints":
			out.TotalPoints = float64(in.Float64())
		case "CurrentWeeksPoints":
			out.CurrentWeeksPoints = float64(in.Float64())
		case "PreviousWeekPoints":
			out.PreviousWeekPoints = float64(in.Float64())
		case "SpendingCount":
			out.SpendingCount = int(in.Int())
		case "RecruitingEfficiencyScore":
			out.RecruitingEfficiencyScore = float64(in.Float64())
		case "Scholarship":
			out.Scholarship = bool(in.Bool())
		case "ScholarshipRevoked":
			out.ScholarshipRevoked = bool(in.Bool())
		case "AffinityOneEligible":
			out.AffinityOneEligible = bool(in.Bool())
		case "AffinityTwoEligible":
			out.AffinityTwoEligible = bool(in.Bool())
		case "TeamAbbreviation":
			out.TeamAbbreviation = string(in.String())
		case "Recruiter":
			out.Recruiter = string(in.String())
		case "RemovedFromBoard":
			out.RemovedFromBoard = bool(in.Bool())
		case "IsSigned":
			out.IsSigned = bool(in.Bool())
		case "IsLocked":
			out.IsLocked = bool(in.Bool())
		case "CaughtCheating":
			out.CaughtCheating = bool(in.Bool())
		case "TeamReachedMax":
			out.TeamReachedMax = bool(in.Bool())
		case "Recruit":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs22(in, &out.Recruit)
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs20(out *jwriter.Writer, in structs.RecruitPlayerProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"RecruitID\":"
		out.RawString(prefix)
		out.Int(int(in.RecruitID))
	}
	{
		const prefix string = ",\"ProfileID\":"
		out.RawString(prefix)
		out.Int(int(in.ProfileID))
	}
	{
		const prefix string = ",\"TotalPoints\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPoints))
	}
	{
		const prefix string = ",\"CurrentWeeksPoints\":"
		out.RawString(prefix)
		out.Float64(float64(in.CurrentWeeksPoints))
	}
	{
		const prefix string = ",\"PreviousWeekPoints\":"
		out.RawString(prefix)
		out.Float64(float64(in.PreviousWeekPoints))
	}
	{
		const prefix string = ",\"SpendingCount\":"
		out.RawString(prefix)
		out.Int(int(in.SpendingCount))
	}
	{
		const prefix string = ",\"RecruitingEfficiencyScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.RecruitingEfficiencyScore))
	}
	{
		const prefix string = ",\"Scholarship\":"
		out.RawString(prefix)
		out.Bool(bool(in.Scholarship))
	}
	{
		const prefix string = ",\"ScholarshipRevoked\":"
		out.RawString(prefix)
		out.Bool(bool(in.ScholarshipRevoked))
	}
	{
		const prefix string = ",\"AffinityOneEligible\":"
		out.RawString(prefix)
		out.Bool(bool(in.AffinityOneEligible))
	}
	{
		const prefix string = ",\"AffinityTwoEligible\":"
		out.RawString(prefix)
		out.Bool(bool(in.AffinityTwoEligible))
	}
	{
		const prefix string = ",\"TeamAbbreviation\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbreviation))
	}
	{
		const prefix string = ",\"Recruiter\":"
		out.RawString(prefix)
		out.String(string(in.Recruiter))
	}
	{
		const prefix string = ",\"RemovedFromBoard\":"
		out.RawString(prefix)
		out.Bool(bool(in.RemovedFromBoard))
	}
	{
		const prefix string = ",\"IsSigned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSigned))
	}
	{
		const prefix string = ",\"IsLocked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLocked))
	}
	{
		const prefix string = ",\"CaughtCheating\":"
		out.RawString(prefix)
		out.Bool(bool(in.CaughtCheating))
	}
	{
		const prefix string = ",\"TeamReachedMax\":"
		out.RawString(prefix)
		out.Bool(bool(in.TeamReachedMax))
	}
	{
		const prefix string = ",\"Recruit\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs22(out, in.Recruit)
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs22(in *jlexer.Lexer, out *structs.Recruit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PlayerID":
			out.PlayerID = int(in.Int())
		case "TeamID":
			out.TeamID = int(in.Int())
		case "HighSchool":
			out.HighSchool = string(in.String())
		case "City":
			out.City = string(in.String())
		case "State":
			out.State = string(in.String())
		case "AffinityOne":
			out.AffinityOne = string(in.String())
		case "AffinityTwo":
			out.AffinityTwo = string(in.String())
		case "IsSigned":
			out.IsSigned = bool(in.Bool())
		case "IsCustomCroot":
			out.IsCustomCroot = bool(in.Bool())
		case "CustomCrootFor":
			out.CustomCrootFor = string(in.String())
		case "College":
			out.College = string(in.String())
		case "OverallRank":
			out.OverallRank = float64(in.Float64())
		case "RivalsRank":
			out.RivalsRank = float64(in.Float64())
		case "ESPNRank":
			out.ESPNRank = float64(in.Float64())
		case "Rank247":
			out.Rank247 = float64(in.Float64())
		case "TopRankModifier":
			out.TopRankModifier = float64(in.Float64())
		case "RecruitingModifier":
			out.RecruitingModifier = float64(in.Float64())
		case "RecruitingStatus":
			out.RecruitingStatus = string(in.String())
		case "RecruitPlayerProfiles":
			if in.IsNull() {
				in.Skip()
				out.RecruitPlayerProfiles = nil
			} else {
				in.Delim('[')
				if out.RecruitPlayerProfiles == nil {
					if !in.IsDelim(']') {
						out.RecruitPlayerProfiles = make([]structs.RecruitPlayerProfile, 0, 0)
					} else {
						out.RecruitPlayerProfiles = []structs.RecruitPlayerProfile{}
					}
				} else {
					out.RecruitPlayerProfiles = (out.RecruitPlayerProfiles)[:0]
				}
				for !in.IsDelim(']') {
					var v78 structs.RecruitPlayerProfile
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs20(in, &v78)
					out.RecruitPlayerProfiles = append(out.RecruitPlayerProfiles, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		case "Position":
			out.Position = string(in.String())
		case "Archetype":
			out.Archetype = string(in.String())
		case "PreviousTeamID":
			out.PreviousTeamID = uint(in.Uint())
		case "PreviousTeam":
			out.PreviousTeam = string(in.String())
		case "Height":
			out.Height = int(in.Int())
		case "Weight":
			out.Weight = int(in.Int())
		case "Age":
			out.Age = int(in.Int())
		case "Stars":
			out.Stars = int(in.Int())
		case "Overall":
			out.Overall = int(in.Int())
		case "Stamina":
			out.Stamina = int(in.Int())
		case "Injury":
			out.Injury = int(in.Int())
		case "FootballIQ":
			out.FootballIQ = int(in.Int())
		case "Speed":
			out.Speed = int(in.Int())
		case "Carrying":
			out.Carrying = int(in.Int())
		case "Agility":
			out.Agility = int(in.Int())
		case "Catching":
			out.Catching = int(in.Int())
		case "RouteRunning":
			out.RouteRunning = int(in.Int())
		case "ZoneCoverage":
			out.ZoneCoverage = int(in.Int())
		case "ManCoverage":
			out.ManCoverage = int(in.Int())
		case "Strength":
			out.Strength = int(in.Int())
		case "Tackle":
			out.Tackle = int(in.Int())
		case "PassBlock":
			out.PassBlock = int(in.Int())
		case "RunBlock":
			out.RunBlock = int(in.Int())
		case "PassRush":
			out.PassRush = int(in.Int())
		case "RunDefense":
			out.RunDefense = int(in.Int())
		case "ThrowPower":
			out.ThrowPower = int(in.Int())
		case "ThrowAccuracy":
			out.ThrowAccuracy = int(in.Int())
		case "KickAccuracy":
			out.KickAccuracy = int(in.Int())
		case "KickPower":
			out.KickPower = int(in.Int())
		case "PuntAccuracy":
			out.PuntAccuracy = int(in.Int())
		case "PuntPower":
			out.PuntPower = int(in.Int())
		case "Progression":
			out.Progression = int(in.Int())
		case "Discipline":
			out.Discipline = int(in.Int())
		case "PotentialGrade":
			out.PotentialGrade = string(in.String())
		case "FreeAgency":
			out.FreeAgency = string(in.String())
		case "Personality":
			out.Personality = string(in.String())
		case "RecruitingBias":
			out.RecruitingBias = string(in.String())
		case "WorkEthic":
			out.WorkEthic = string(in.String())
		case "AcademicBias":
			out.AcademicBias = string(in.String())
		case "IsInjured":
			out.IsInjured = bool(in.Bool())
		case "InjuryName":
			out.InjuryName = string(in.String())
		case "InjuryType":
			out.InjuryType = string(in.String())
		case "WeeksOfRecovery":
			out.WeeksOfRecovery = uint(in.Uint())
		case "InjuryReserve":
			out.InjuryReserve = bool(in.Bool())
		case "PrimeAge":
			out.PrimeAge = uint(in.Uint())
		case "Clutch":
			out.Clutch = int(in.Int())
		case "Shotgun":
			out.Shotgun = int(in.Int())
		case "PositionTwo":
			out.PositionTwo = string(in.String())
		case "ArchetypeTwo":
			out.ArchetypeTwo = string(in.String())
		case "RelativeID":
			out.RelativeID = uint(in.Uint())
		case "RelativeType":
			out.RelativeType = uint(in.Uint())
		case "Notes":
			out.Notes = string(in.String())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs22(out *jwriter.Writer, in structs.Recruit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PlayerID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"HighSchool\":"
		out.RawString(prefix)
		out.String(string(in.HighSchool))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"AffinityOne\":"
		out.RawString(prefix)
		out.String(string(in.AffinityOne))
	}
	{
		const prefix string = ",\"AffinityTwo\":"
		out.RawString(prefix)
		out.String(string(in.AffinityTwo))
	}
	{
		const prefix string = ",\"IsSigned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSigned))
	}
	{
		const prefix string = ",\"IsCustomCroot\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCustomCroot))
	}
	{
		const prefix string = ",\"CustomCrootFor\":"
		out.RawString(prefix)
		out.String(string(in.CustomCrootFor))
	}
	{
		const prefix string = ",\"College\":"
		out.RawString(prefix)
		out.String(string(in.College))
	}
	{
		const prefix string = ",\"OverallRank\":"
		out.RawString(prefix)
		out.Float64(float64(in.OverallRank))
	}
	{
		const prefix string = ",\"RivalsRank\":"
		out.RawString(prefix)
		out.Float64(float64(in.RivalsRank))
	}
	{
		const prefix string = ",\"ESPNRank\":"
		out.RawString(prefix)
		out.Float64(float64(in.ESPNRank))
	}
	{
		const prefix string = ",\"Rank247\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rank247))
	}
	{
		const prefix string = ",\"TopRankModifier\":"
		out.RawString(prefix)
		out.Float64(float64(in.TopRankModifier))
	}
	{
		const prefix string = ",\"RecruitingModifier\":"
		out.RawString(prefix)
		out.Float64(float64(in.RecruitingModifier))
	}
	{
		const prefix string = ",\"RecruitingStatus\":"
		out.RawString(prefix)
		out.String(string(in.RecruitingStatus))
	}
	{
		const prefix string = ",\"RecruitPlayerProfiles\":"
		out.RawString(prefix)
		if in.RecruitPlayerProfiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v79, v80 := range in.RecruitPlayerProfiles {
				if v79 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs20(out, v80)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"Archetype\":"
		out.RawString(prefix)
		out.String(string(in.Archetype))
	}
	{
		const prefix string = ",\"PreviousTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PreviousTeamID))
	}
	{
		const prefix string = ",\"PreviousTeam\":"
		out.RawString(prefix)
		out.String(string(in.PreviousTeam))
	}
	{
		const prefix string = ",\"Height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"Weight\":"
		out.RawString(prefix)
		out.Int(int(in.Weight))
	}
	{
		const prefix string = ",\"Age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"Stars\":"
		out.RawString(prefix)
		out.Int(int(in.Stars))
	}
	{
		const prefix string = ",\"Overall\":"
		out.RawString(prefix)
		out.Int(int(in.Overall))
	}
	{
		const prefix string = ",\"Stamina\":"
		out.RawString(prefix)
		out.Int(int(in.Stamina))
	}
	{
		const prefix string = ",\"Injury\":"
		out.RawString(prefix)
		out.Int(int(in.Injury))
	}
	{
		const prefix string = ",\"FootballIQ\":"
		out.RawString(prefix)
		out.Int(int(in.FootballIQ))
	}
	{
		const prefix string = ",\"Speed\":"
		out.RawString(prefix)
		out.Int(int(in.Speed))
	}
	{
		const prefix string = ",\"Carrying\":"
		out.RawString(prefix)
		out.Int(int(in.Carrying))
	}
	{
		const prefix string = ",\"Agility\":"
		out.RawString(prefix)
		out.Int(int(in.Agility))
	}
	{
		const prefix string = ",\"Catching\":"
		out.RawString(prefix)
		out.Int(int(in.Catching))
	}
	{
		const prefix string = ",\"RouteRunning\":"
		out.RawString(prefix)
		out.Int(int(in.RouteRunning))
	}
	{
		const prefix string = ",\"ZoneCoverage\":"
		out.RawString(prefix)
		out.Int(int(in.ZoneCoverage))
	}
	{
		const prefix string = ",\"ManCoverage\":"
		out.RawString(prefix)
		out.Int(int(in.ManCoverage))
	}
	{
		const prefix string = ",\"Strength\":"
		out.RawString(prefix)
		out.Int(int(in.Strength))
	}
	{
		const prefix string = ",\"Tackle\":"
		out.RawString(prefix)
		out.Int(int(in.Tackle))
	}
	{
		const prefix string = ",\"PassBlock\":"
		out.RawString(prefix)
		out.Int(int(in.PassBlock))
	}
	{
		const prefix string = ",\"RunBlock\":"
		out.RawString(prefix)
		out.Int(int(in.RunBlock))
	}
	{
		const prefix string = ",\"PassRush\":"
		out.RawString(prefix)
		out.Int(int(in.PassRush))
	}
	{
		const prefix string = ",\"RunDefense\":"
		out.RawString(prefix)
		out.Int(int(in.RunDefense))
	}
	{
		const prefix string = ",\"ThrowPower\":"
		out.RawString(prefix)
		out.Int(int(in.ThrowPower))
	}
	{
		const prefix string = ",\"ThrowAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.ThrowAccuracy))
	}
	{
		const prefix string = ",\"KickAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.KickAccuracy))
	}
	{
		const prefix string = ",\"KickPower\":"
		out.RawString(prefix)
		out.Int(int(in.KickPower))
	}
	{
		const prefix string = ",\"PuntAccuracy\":"
		out.RawString(prefix)
		out.Int(int(in.PuntAccuracy))
	}
	{
		const prefix string = ",\"PuntPower\":"
		out.RawString(prefix)
		out.Int(int(in.PuntPower))
	}
	{
		const prefix string = ",\"Progression\":"
		out.RawString(prefix)
		out.Int(int(in.Progression))
	}
	{
		const prefix string = ",\"Discipline\":"
		out.RawString(prefix)
		out.Int(int(in.Discipline))
	}
	{
		const prefix string = ",\"PotentialGrade\":"
		out.RawString(prefix)
		out.String(string(in.PotentialGrade))
	}
	{
		const prefix string = ",\"FreeAgency\":"
		out.RawString(prefix)
		out.String(string(in.FreeAgency))
	}
	{
		const prefix string = ",\"Personality\":"
		out.RawString(prefix)
		out.String(string(in.Personality))
	}
	{
		const prefix string = ",\"RecruitingBias\":"
		out.RawString(prefix)
		out.String(string(in.RecruitingBias))
	}
	{
		const prefix string = ",\"WorkEthic\":"
		out.RawString(prefix)
		out.String(string(in.WorkEthic))
	}
	{
		const prefix string = ",\"AcademicBias\":"
		out.RawString(prefix)
		out.String(string(in.AcademicBias))
	}
	{
		const prefix string = ",\"IsInjured\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsInjured))
	}
	{
		const prefix string = ",\"InjuryName\":"
		out.RawString(prefix)
		out.String(string(in.InjuryName))
	}
	{
		const prefix string = ",\"InjuryType\":"
		out.RawString(prefix)
		out.String(string(in.InjuryType))
	}
	{
		const prefix string = ",\"WeeksOfRecovery\":"
		out.RawString(prefix)
		out.Uint(uint(in.WeeksOfRecovery))
	}
	{
		const prefix string = ",\"InjuryReserve\":"
		out.RawString(prefix)
		out.Bool(bool(in.InjuryReserve))
	}
	{
		const prefix string = ",\"PrimeAge\":"
		out.RawString(prefix)
		out.Uint(uint(in.PrimeAge))
	}
	{
		const prefix string = ",\"Clutch\":"
		out.RawString(prefix)
		out.Int(int(in.Clutch))
	}
	{
		const prefix string = ",\"Shotgun\":"
		out.RawString(prefix)
		out.Int(int(in.Shotgun))
	}
	{
		const prefix string = ",\"PositionTwo\":"
		out.RawString(prefix)
		out.String(string(in.PositionTwo))
	}
	{
		const prefix string = ",\"ArchetypeTwo\":"
		out.RawString(prefix)
		out.String(string(in.ArchetypeTwo))
	}
	{
		const prefix string = ",\"RelativeID\":"
		out.RawString(prefix)
		out.Uint(uint(in.RelativeID))
	}
	{
		const prefix string = ",\"RelativeType\":"
		out.RawString(prefix)
		out.Uint(uint(in.RelativeType))
	}
	{
		const prefix string = ",\"Notes\":"
		out.RawString(prefix)
		out.String(string(in.Notes))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs8(in *jlexer.Lexer, out *structs.NewsLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "WeekID":
			out.WeekID = int(in.Int())
		case "Week":
			out.Week = int(in.Int())
		case "SeasonID":
			out.SeasonID = int(in.Int())
		case "TeamID":
			out.TeamID = int(in.Int())
		case "MessageType":
			out.MessageType = string(in.String())
		case "Message":
			out.Message = string(in.String())
		case "League":
			out.League = string(in.String())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs8(out *jwriter.Writer, in structs.NewsLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"WeekID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.WeekID))
	}
	{
		const prefix string = ",\"Week\":"
		out.RawString(prefix)
		out.Int(int(in.Week))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"MessageType\":"
		out.RawString(prefix)
		out.String(string(in.MessageType))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"League\":"
		out.RawString(prefix)
		out.String(string(in.League))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers2(in *jlexer.Lexer, out *BootstrapDataThree) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Recruits":
			if in.IsNull() {
				in.Skip()
				out.Recruits = nil
			} else {
				in.Delim('[')
				if out.Recruits == nil {
					if !in.IsDelim(']') {
						out.Recruits = make([]structs.Croot, 0, 0)
					} else {
						out.Recruits = []structs.Croot{}
					}
				} else {
					out.Recruits = (out.Recruits)[:0]
				}
				for !in.IsDelim(']') {
					var v81 structs.Croot
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs23(in, &v81)
					out.Recruits = append(out.Recruits, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RecruitProfiles":
			if in.IsNull() {
				in.Skip()
				out.RecruitProfiles = nil
			} else {
				in.Delim('[')
				if out.RecruitProfiles == nil {
					if !in.IsDelim(']') {
						out.RecruitProfiles = make([]structs.RecruitPlayerProfile, 0, 0)
					} else {
						out.RecruitProfiles = []structs.RecruitPlayerProfile{}
					}
				} else {
					out.RecruitProfiles = (out.RecruitProfiles)[:0]
				}
				for !in.IsDelim(']') {
					var v82 structs.RecruitPlayerProfile
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs20(in, &v82)
					out.RecruitProfiles = append(out.RecruitProfiles, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CollegeDepthChartMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CollegeDepthChartMap = make(map[uint]structs.CollegeTeamDepthChart)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v83 structs.CollegeTeamDepthChart
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs24(in, &v83)
					(out.CollegeDepthChartMap)[key] = v83
					in.WantComma()
				}
				in.Delim('}')
			}
		case "FreeAgentOffers":
			if in.IsNull() {
				in.Skip()
				out.FreeAgentOffers = nil
			} else {
				in.Delim('[')
				if out.FreeAgentOffers == nil {
					if !in.IsDelim(']') {
						out.FreeAgentOffers = make([]structs.FreeAgencyOffer, 0, 0)
					} else {
						out.FreeAgentOffers = []structs.FreeAgencyOffer{}
					}
				} else {
					out.FreeAgentOffers = (out.FreeAgentOffers)[:0]
				}
				for !in.IsDelim(']') {
					var v84 structs.FreeAgencyOffer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs17(in, &v84)
					out.FreeAgentOffers = append(out.FreeAgentOffers, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "WaiverWireOffers":
			if in.IsNull() {
				in.Skip()
				out.WaiverWireOffers = nil
			} else {
				in.Delim('[')
				if out.WaiverWireOffers == nil {
					if !in.IsDelim(']') {
						out.WaiverWireOffers = make([]structs.NFLWaiverOffer, 0, 1)
					} else {
						out.WaiverWireOffers = []structs.NFLWaiverOffer{}
					}
				} else {
					out.WaiverWireOffers = (out.WaiverWireOffers)[:0]
				}
				for !in.IsDelim(']') {
					var v85 structs.NFLWaiverOffer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs18(in, &v85)
					out.WaiverWireOffers = append(out.WaiverWireOffers, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ProNews":
			if in.IsNull() {
				in.Skip()
				out.ProNews = nil
			} else {
				in.Delim('[')
				if out.ProNews == nil {
					if !in.IsDelim(']') {
						out.ProNews = make([]structs.NewsLog, 0, 0)
					} else {
						out.ProNews = []structs.NewsLog{}
					}
				} else {
					out.ProNews = (out.ProNews)[:0]
				}
				for !in.IsDelim(']') {
					var v86 structs.NewsLog
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs8(in, &v86)
					out.ProNews = append(out.ProNews, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NFLDepthChartMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.NFLDepthChartMap = make(map[uint]structs.NFLDepthChart)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v87 structs.NFLDepthChart
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs25(in, &v87)
					(out.NFLDepthChartMap)[key] = v87
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ContractMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ContractMap = make(map[uint]structs.NFLContract)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v88 structs.NFLContract
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs16(in, &v88)
					(out.ContractMap)[key] = v88
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ExtensionMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ExtensionMap = make(map[uint]structs.NFLExtensionOffer)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v89 structs.NFLExtensionOffer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs19(in, &v89)
					(out.ExtensionMap)[key] = v89
					in.WantComma()
				}
				in.Delim('}')
			}
		case "FaceData":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.FaceData = make(map[uint]structs.FaceDataResponse)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v90 structs.FaceDataResponse
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs26(in, &v90)
					(out.FaceData)[key] = v90
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers2(out *jwriter.Writer, in BootstrapDataThree) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Recruits\":"
		out.RawString(prefix[1:])
		if in.Recruits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v91, v92 := range in.Recruits {
				if v91 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs23(out, v92)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RecruitProfiles\":"
		out.RawString(prefix)
		if in.RecruitProfiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v93, v94 := range in.RecruitProfiles {
				if v93 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs20(out, v94)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CollegeDepthChartMap\":"
		out.RawString(prefix)
		if in.CollegeDepthChartMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v95First := true
			for v95Name, v95Value := range in.CollegeDepthChartMap {
				if v95First {
					v95First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v95Name))
				out.RawByte(':')
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs24(out, v95Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"FreeAgentOffers\":"
		out.RawString(prefix)
		if in.FreeAgentOffers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v96, v97 := range in.FreeAgentOffers {
				if v96 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs17(out, v97)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"WaiverWireOffers\":"
		out.RawString(prefix)
		if in.WaiverWireOffers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v98, v99 := range in.WaiverWireOffers {
				if v98 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs18(out, v99)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ProNews\":"
		out.RawString(prefix)
		if in.ProNews == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v100, v101 := range in.ProNews {
				if v100 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs8(out, v101)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NFLDepthChartMap\":"
		out.RawString(prefix)
		if in.NFLDepthChartMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v102First := true
			for v102Name, v102Value := range in.NFLDepthChartMap {
				if v102First {
					v102First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v102Name))
				out.RawByte(':')
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs25(out, v102Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ContractMap\":"
		out.RawString(prefix)
		if in.ContractMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v103First := true
			for v103Name, v103Value := range in.ContractMap {
				if v103First {
					v103First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v103Name))
				out.RawByte(':')
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs16(out, v103Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ExtensionMap\":"
		out.RawString(prefix)
		if in.ExtensionMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v104First := true
			for v104Name, v104Value := range in.ExtensionMap {
				if v104First {
					v104First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v104Name))
				out.RawByte(':')
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs19(out, v104Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"FaceData\":"
		out.RawString(prefix)
		if in.FaceData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v105First := true
			for v105Name, v105Value := range in.FaceData {
				if v105First {
					v105First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v105Name))
				out.RawByte(':')
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs26(out, v105Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BootstrapDataThree) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BootstrapDataThree) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BootstrapDataThree) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BootstrapDataThree) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers2(l, v)
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs26(in *jlexer.Lexer, out *structs.FaceDataResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PlayerID":
			out.PlayerID = uint(in.Uint())
		case "Accessories":
			out.Accessories = string(in.String())
		case "Body":
			out.Body = string(in.String())
		case "Ear":
			out.Ear = string(in.String())
		case "Eye":
			out.Eye = string(in.String())
		case "EyeLine":
			out.EyeLine = string(in.String())
		case "Eyebrow":
			out.Eyebrow = string(in.String())
		case "FacialHair":
			out.FacialHair = string(in.String())
		case "Glasses":
			out.Glasses = string(in.String())
		case "Hair":
			out.Hair = string(in.String())
		case "HairBG":
			out.HairBG = string(in.String())
		case "HairFlip":
			out.HairFlip = bool(in.Bool())
		case "Head":
			out.Head = string(in.String())
		case "Jersey":
			out.Jersey = string(in.String())
		case "MiscLine":
			out.MiscLine = string(in.String())
		case "Mouth":
			out.Mouth = string(in.String())
		case "MouthFlip":
			out.MouthFlip = bool(in.Bool())
		case "Nose":
			out.Nose = string(in.String())
		case "NoseFlip":
			out.NoseFlip = bool(in.Bool())
		case "SmileLine":
			out.SmileLine = string(in.String())
		case "BodySize":
			out.BodySize = float32(in.Float32())
		case "EarSize":
			out.EarSize = float32(in.Float32())
		case "EyeAngle":
			out.EyeAngle = int8(in.Int8())
		case "EyeBrowAngle":
			out.EyeBrowAngle = int8(in.Int8())
		case "FaceSize":
			out.FaceSize = float32(in.Float32())
		case "FacialHairShave":
			out.FacialHairShave = string(in.String())
		case "NoseSize":
			out.NoseSize = float32(in.Float32())
		case "SmileLineSize":
			out.SmileLineSize = float32(in.Float32())
		case "SkinColor":
			out.SkinColor = string(in.String())
		case "HairColor":
			out.HairColor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs26(out *jwriter.Writer, in structs.FaceDataResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PlayerID))
	}
	{
		const prefix string = ",\"Accessories\":"
		out.RawString(prefix)
		out.String(string(in.Accessories))
	}
	{
		const prefix string = ",\"Body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"Ear\":"
		out.RawString(prefix)
		out.String(string(in.Ear))
	}
	{
		const prefix string = ",\"Eye\":"
		out.RawString(prefix)
		out.String(string(in.Eye))
	}
	{
		const prefix string = ",\"EyeLine\":"
		out.RawString(prefix)
		out.String(string(in.EyeLine))
	}
	{
		const prefix string = ",\"Eyebrow\":"
		out.RawString(prefix)
		out.String(string(in.Eyebrow))
	}
	{
		const prefix string = ",\"FacialHair\":"
		out.RawString(prefix)
		out.String(string(in.FacialHair))
	}
	{
		const prefix string = ",\"Glasses\":"
		out.RawString(prefix)
		out.String(string(in.Glasses))
	}
	{
		const prefix string = ",\"Hair\":"
		out.RawString(prefix)
		out.String(string(in.Hair))
	}
	{
		const prefix string = ",\"HairBG\":"
		out.RawString(prefix)
		out.String(string(in.HairBG))
	}
	{
		const prefix string = ",\"HairFlip\":"
		out.RawString(prefix)
		out.Bool(bool(in.HairFlip))
	}
	{
		const prefix string = ",\"Head\":"
		out.RawString(prefix)
		out.String(string(in.Head))
	}
	{
		const prefix string = ",\"Jersey\":"
		out.RawString(prefix)
		out.String(string(in.Jersey))
	}
	{
		const prefix string = ",\"MiscLine\":"
		out.RawString(prefix)
		out.String(string(in.MiscLine))
	}
	{
		const prefix string = ",\"Mouth\":"
		out.RawString(prefix)
		out.String(string(in.Mouth))
	}
	{
		const prefix string = ",\"MouthFlip\":"
		out.RawString(prefix)
		out.Bool(bool(in.MouthFlip))
	}
	{
		const prefix string = ",\"Nose\":"
		out.RawString(prefix)
		out.String(string(in.Nose))
	}
	{
		const prefix string = ",\"NoseFlip\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoseFlip))
	}
	{
		const prefix string = ",\"SmileLine\":"
		out.RawString(prefix)
		out.String(string(in.SmileLine))
	}
	{
		const prefix string = ",\"BodySize\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodySize))
	}
	{
		const prefix string = ",\"EarSize\":"
		out.RawString(prefix)
		out.Float32(float32(in.EarSize))
	}
	{
		const prefix string = ",\"EyeAngle\":"
		out.RawString(prefix)
		out.Int8(int8(in.EyeAngle))
	}
	{
		const prefix string = ",\"EyeBrowAngle\":"
		out.RawString(prefix)
		out.Int8(int8(in.EyeBrowAngle))
	}
	{
		const prefix string = ",\"FaceSize\":"
		out.RawString(prefix)
		out.Float32(float32(in.FaceSize))
	}
	{
		const prefix string = ",\"FacialHairShave\":"
		out.RawString(prefix)
		out.String(string(in.FacialHairShave))
	}
	{
		const prefix string = ",\"NoseSize\":"
		out.RawString(prefix)
		out.Float32(float32(in.NoseSize))
	}
	{
		const prefix string = ",\"SmileLineSize\":"
		out.RawString(prefix)
		out.Float32(float32(in.SmileLineSize))
	}
	{
		const prefix string = ",\"SkinColor\":"
		out.RawString(prefix)
		out.String(string(in.SkinColor))
	}
	{
		const prefix string = ",\"HairColor\":"
		out.RawString(prefix)
		out.String(string(in.HairColor))
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs25(in *jlexer.Lexer, out *structs.NFLDepthChart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = int(in.Int())
		case "DepthChartPlayers":
			if in.IsNull() {
				in.Skip()
				out.DepthChartPlayers = nil
			} else {
				in.Delim('[')
				if out.DepthChartPlayers == nil {
					if !in.IsDelim(']') {
						out.DepthChartPlayers = make([]structs.NFLDepthChartPosition, 0, 0)
					} else {
						out.DepthChartPlayers = []structs.NFLDepthChartPosition{}
					}
				} else {
					out.DepthChartPlayers = (out.DepthChartPlayers)[:0]
				}
				for !in.IsDelim(']') {
					var v106 structs.NFLDepthChartPosition
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs27(in, &v106)
					out.DepthChartPlayers = append(out.DepthChartPlayers, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs25(out *jwriter.Writer, in structs.NFLDepthChart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"DepthChartPlayers\":"
		out.RawString(prefix)
		if in.DepthChartPlayers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v107, v108 := range in.DepthChartPlayers {
				if v107 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs27(out, v108)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs27(in *jlexer.Lexer, out *structs.NFLDepthChartPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DepthChartID":
			out.DepthChartID = uint(in.Uint())
		case "PlayerID":
			out.PlayerID = uint(in.Uint())
		case "Position":
			out.Position = string(in.String())
		case "PositionLevel":
			out.PositionLevel = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		case "OriginalPosition":
			out.OriginalPosition = string(in.String())
		case "NFLPlayer":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs13(in, &out.NFLPlayer)
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs27(out *jwriter.Writer, in structs.NFLDepthChartPosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DepthChartID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.DepthChartID))
	}
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PlayerID))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"PositionLevel\":"
		out.RawString(prefix)
		out.String(string(in.PositionLevel))
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"OriginalPosition\":"
		out.RawString(prefix)
		out.String(string(in.OriginalPosition))
	}
	{
		const prefix string = ",\"NFLPlayer\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs13(out, in.NFLPlayer)
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs24(in *jlexer.Lexer, out *structs.CollegeTeamDepthChart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = int(in.Int())
		case "DepthChartPlayers":
			if in.IsNull() {
				in.Skip()
				out.DepthChartPlayers = nil
			} else {
				in.Delim('[')
				if out.DepthChartPlayers == nil {
					if !in.IsDelim(']') {
						out.DepthChartPlayers = make([]structs.CollegeDepthChartPosition, 0, 0)
					} else {
						out.DepthChartPlayers = []structs.CollegeDepthChartPosition{}
					}
				} else {
					out.DepthChartPlayers = (out.DepthChartPlayers)[:0]
				}
				for !in.IsDelim(']') {
					var v109 structs.CollegeDepthChartPosition
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs28(in, &v109)
					out.DepthChartPlayers = append(out.DepthChartPlayers, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs24(out *jwriter.Writer, in structs.CollegeTeamDepthChart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"DepthChartPlayers\":"
		out.RawString(prefix)
		if in.DepthChartPlayers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.DepthChartPlayers {
				if v110 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs28(out, v111)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs28(in *jlexer.Lexer, out *structs.CollegeDepthChartPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DepthChartID":
			out.DepthChartID = int(in.Int())
		case "PlayerID":
			out.PlayerID = int(in.Int())
		case "Position":
			out.Position = string(in.String())
		case "PositionLevel":
			out.PositionLevel = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		case "OriginalPosition":
			out.OriginalPosition = string(in.String())
		case "CollegePlayer":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &out.CollegePlayer)
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs28(out *jwriter.Writer, in structs.CollegeDepthChartPosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DepthChartID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.DepthChartID))
	}
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix)
		out.Int(int(in.PlayerID))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"PositionLevel\":"
		out.RawString(prefix)
		out.String(string(in.PositionLevel))
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"OriginalPosition\":"
		out.RawString(prefix)
		out.String(string(in.OriginalPosition))
	}
	{
		const prefix string = ",\"CollegePlayer\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, in.CollegePlayer)
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs23(in *jlexer.Lexer, out *structs.Croot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "PlayerID":
			out.PlayerID = int(in.Int())
		case "TeamID":
			out.TeamID = int(in.Int())
		case "College":
			out.College = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		case "Position":
			out.Position = string(in.String())
		case "Archetype":
			out.Archetype = string(in.String())
		case "Height":
			out.Height = int(in.Int())
		case "Weight":
			out.Weight = int(in.Int())
		case "Stars":
			out.Stars = int(in.Int())
		case "PotentialGrade":
			out.PotentialGrade = string(in.String())
		case "Personality":
			out.Personality = string(in.String())
		case "RecruitingBias":
			out.RecruitingBias = string(in.String())
		case "AcademicBias":
			out.AcademicBias = string(in.String())
		case "WorkEthic":
			out.WorkEthic = string(in.String())
		case "HighSchool":
			out.HighSchool = string(in.String())
		case "City":
			out.City = string(in.String())
		case "State":
			out.State = string(in.String())
		case "AffinityOne":
			out.AffinityOne = string(in.String())
		case "AffinityTwo":
			out.AffinityTwo = string(in.String())
		case "RecruitingStatus":
			out.RecruitingStatus = string(in.String())
		case "RecruitModifier":
			out.RecruitModifier = float64(in.Float64())
		case "IsCustomCroot":
			out.IsCustomCroot = bool(in.Bool())
		case "CustomCrootFor":
			out.CustomCrootFor = string(in.String())
		case "IsSigned":
			out.IsSigned = bool(in.Bool())
		case "OverallGrade":
			out.OverallGrade = string(in.String())
		case "TotalRank":
			out.TotalRank = float64(in.Float64())
		case "LeadingTeams":
			if in.IsNull() {
				in.Skip()
				out.LeadingTeams = nil
			} else {
				in.Delim('[')
				if out.LeadingTeams == nil {
					if !in.IsDelim(']') {
						out.LeadingTeams = make([]structs.LeadingTeams, 0, 1)
					} else {
						out.LeadingTeams = []structs.LeadingTeams{}
					}
				} else {
					out.LeadingTeams = (out.LeadingTeams)[:0]
				}
				for !in.IsDelim(']') {
					var v112 structs.LeadingTeams
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs29(in, &v112)
					out.LeadingTeams = append(out.LeadingTeams, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs23(out *jwriter.Writer, in structs.Croot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"PlayerID\":"
		out.RawString(prefix)
		out.Int(int(in.PlayerID))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"College\":"
		out.RawString(prefix)
		out.String(string(in.College))
	}
	{
		const prefix string = ",\"FirstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"Archetype\":"
		out.RawString(prefix)
		out.String(string(in.Archetype))
	}
	{
		const prefix string = ",\"Height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"Weight\":"
		out.RawString(prefix)
		out.Int(int(in.Weight))
	}
	{
		const prefix string = ",\"Stars\":"
		out.RawString(prefix)
		out.Int(int(in.Stars))
	}
	{
		const prefix string = ",\"PotentialGrade\":"
		out.RawString(prefix)
		out.String(string(in.PotentialGrade))
	}
	{
		const prefix string = ",\"Personality\":"
		out.RawString(prefix)
		out.String(string(in.Personality))
	}
	{
		const prefix string = ",\"RecruitingBias\":"
		out.RawString(prefix)
		out.String(string(in.RecruitingBias))
	}
	{
		const prefix string = ",\"AcademicBias\":"
		out.RawString(prefix)
		out.String(string(in.AcademicBias))
	}
	{
		const prefix string = ",\"WorkEthic\":"
		out.RawString(prefix)
		out.String(string(in.WorkEthic))
	}
	{
		const prefix string = ",\"HighSchool\":"
		out.RawString(prefix)
		out.String(string(in.HighSchool))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"AffinityOne\":"
		out.RawString(prefix)
		out.String(string(in.AffinityOne))
	}
	{
		const prefix string = ",\"AffinityTwo\":"
		out.RawString(prefix)
		out.String(string(in.AffinityTwo))
	}
	{
		const prefix string = ",\"RecruitingStatus\":"
		out.RawString(prefix)
		out.String(string(in.RecruitingStatus))
	}
	{
		const prefix string = ",\"RecruitModifier\":"
		out.RawString(prefix)
		out.Float64(float64(in.RecruitModifier))
	}
	{
		const prefix string = ",\"IsCustomCroot\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCustomCroot))
	}
	{
		const prefix string = ",\"CustomCrootFor\":"
		out.RawString(prefix)
		out.String(string(in.CustomCrootFor))
	}
	{
		const prefix string = ",\"IsSigned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSigned))
	}
	{
		const prefix string = ",\"OverallGrade\":"
		out.RawString(prefix)
		out.String(string(in.OverallGrade))
	}
	{
		const prefix string = ",\"TotalRank\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalRank))
	}
	{
		const prefix string = ",\"LeadingTeams\":"
		out.RawString(prefix)
		if in.LeadingTeams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v113, v114 := range in.LeadingTeams {
				if v113 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs29(out, v114)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs29(in *jlexer.Lexer, out *structs.LeadingTeams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "TeamName":
			out.TeamName = string(in.String())
		case "TeamAbbr":
			out.TeamAbbr = string(in.String())
		case "Odds":
			out.Odds = float64(in.Float64())
		case "HasScholarship":
			out.HasScholarship = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs29(out *jwriter.Writer, in structs.LeadingTeams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"TeamName\":"
		out.RawString(prefix)
		out.String(string(in.TeamName))
	}
	{
		const prefix string = ",\"TeamAbbr\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbr))
	}
	{
		const prefix string = ",\"Odds\":"
		out.RawString(prefix)
		out.Float64(float64(in.Odds))
	}
	{
		const prefix string = ",\"HasScholarship\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasScholarship))
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers3(in *jlexer.Lexer, out *BootstrapData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CollegeTeam":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs30(in, &out.CollegeTeam)
		case "AllCollegeTeams":
			if in.IsNull() {
				in.Skip()
				out.AllCollegeTeams = nil
			} else {
				in.Delim('[')
				if out.AllCollegeTeams == nil {
					if !in.IsDelim(']') {
						out.AllCollegeTeams = make([]structs.CollegeTeam, 0, 0)
					} else {
						out.AllCollegeTeams = []structs.CollegeTeam{}
					}
				} else {
					out.AllCollegeTeams = (out.AllCollegeTeams)[:0]
				}
				for !in.IsDelim(']') {
					var v115 structs.CollegeTeam
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs30(in, &v115)
					out.AllCollegeTeams = append(out.AllCollegeTeams, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CollegeRosterMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CollegeRosterMap = make(map[uint][]structs.CollegePlayer)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v116 []structs.CollegePlayer
					if in.IsNull() {
						in.Skip()
						v116 = nil
					} else {
						in.Delim('[')
						if v116 == nil {
							if !in.IsDelim(']') {
								v116 = make([]structs.CollegePlayer, 0, 0)
							} else {
								v116 = []structs.CollegePlayer{}
							}
						} else {
							v116 = (v116)[:0]
						}
						for !in.IsDelim(']') {
							var v117 structs.CollegePlayer
							easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &v117)
							v116 = append(v116, v117)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.CollegeRosterMap)[key] = v116
					in.WantComma()
				}
				in.Delim('}')
			}
		case "TopCFBPassers":
			if in.IsNull() {
				in.Skip()
				out.TopCFBPassers = nil
			} else {
				in.Delim('[')
				if out.TopCFBPassers == nil {
					if !in.IsDelim(']') {
						out.TopCFBPassers = make([]structs.CollegePlayer, 0, 0)
					} else {
						out.TopCFBPassers = []structs.CollegePlayer{}
					}
				} else {
					out.TopCFBPassers = (out.TopCFBPassers)[:0]
				}
				for !in.IsDelim(']') {
					var v118 structs.CollegePlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &v118)
					out.TopCFBPassers = append(out.TopCFBPassers, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TopCFBRushers":
			if in.IsNull() {
				in.Skip()
				out.TopCFBRushers = nil
			} else {
				in.Delim('[')
				if out.TopCFBRushers == nil {
					if !in.IsDelim(']') {
						out.TopCFBRushers = make([]structs.CollegePlayer, 0, 0)
					} else {
						out.TopCFBRushers = []structs.CollegePlayer{}
					}
				} else {
					out.TopCFBRushers = (out.TopCFBRushers)[:0]
				}
				for !in.IsDelim(']') {
					var v119 structs.CollegePlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &v119)
					out.TopCFBRushers = append(out.TopCFBRushers, v119)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TopCFBReceivers":
			if in.IsNull() {
				in.Skip()
				out.TopCFBReceivers = nil
			} else {
				in.Delim('[')
				if out.TopCFBReceivers == nil {
					if !in.IsDelim(']') {
						out.TopCFBReceivers = make([]structs.CollegePlayer, 0, 0)
					} else {
						out.TopCFBReceivers = []structs.CollegePlayer{}
					}
				} else {
					out.TopCFBReceivers = (out.TopCFBReceivers)[:0]
				}
				for !in.IsDelim(']') {
					var v120 structs.CollegePlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &v120)
					out.TopCFBReceivers = append(out.TopCFBReceivers, v120)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PortalPlayers":
			if in.IsNull() {
				in.Skip()
				out.PortalPlayers = nil
			} else {
				in.Delim('[')
				if out.PortalPlayers == nil {
					if !in.IsDelim(']') {
						out.PortalPlayers = make([]structs.CollegePlayer, 0, 0)
					} else {
						out.PortalPlayers = []structs.CollegePlayer{}
					}
				} else {
					out.PortalPlayers = (out.PortalPlayers)[:0]
				}
				for !in.IsDelim(']') {
					var v121 structs.CollegePlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &v121)
					out.PortalPlayers = append(out.PortalPlayers, v121)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CollegeInjuryReport":
			if in.IsNull() {
				in.Skip()
				out.CollegeInjuryReport = nil
			} else {
				in.Delim('[')
				if out.CollegeInjuryReport == nil {
					if !in.IsDelim(']') {
						out.CollegeInjuryReport = make([]structs.CollegePlayer, 0, 0)
					} else {
						out.CollegeInjuryReport = []structs.CollegePlayer{}
					}
				} else {
					out.CollegeInjuryReport = (out.CollegeInjuryReport)[:0]
				}
				for !in.IsDelim(']') {
					var v122 structs.CollegePlayer
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs3(in, &v122)
					out.CollegeInjuryReport = append(out.CollegeInjuryReport, v122)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CollegeNotifications":
			if in.IsNull() {
				in.Skip()
				out.CollegeNotifications = nil
			} else {
				in.Delim('[')
				if out.CollegeNotifications == nil {
					if !in.IsDelim(']') {
						out.CollegeNotifications = make([]structs.Notification, 0, 0)
					} else {
						out.CollegeNotifications = []structs.Notification{}
					}
				} else {
					out.CollegeNotifications = (out.CollegeNotifications)[:0]
				}
				for !in.IsDelim(']') {
					var v123 structs.Notification
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs31(in, &v123)
					out.CollegeNotifications = append(out.CollegeNotifications, v123)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CollegeGameplan":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs32(in, &out.CollegeGameplan)
		case "CollegeDepthChart":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs24(in, &out.CollegeDepthChart)
		case "ProTeam":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs33(in, &out.ProTeam)
		case "AllProTeams":
			if in.IsNull() {
				in.Skip()
				out.AllProTeams = nil
			} else {
				in.Delim('[')
				if out.AllProTeams == nil {
					if !in.IsDelim(']') {
						out.AllProTeams = make([]structs.NFLTeam, 0, 0)
					} else {
						out.AllProTeams = []structs.NFLTeam{}
					}
				} else {
					out.AllProTeams = (out.AllProTeams)[:0]
				}
				for !in.IsDelim(']') {
					var v124 structs.NFLTeam
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs33(in, &v124)
					out.AllProTeams = append(out.AllProTeams, v124)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ProNotifications":
			if in.IsNull() {
				in.Skip()
				out.ProNotifications = nil
			} else {
				in.Delim('[')
				if out.ProNotifications == nil {
					if !in.IsDelim(']') {
						out.ProNotifications = make([]structs.Notification, 0, 0)
					} else {
						out.ProNotifications = []structs.Notification{}
					}
				} else {
					out.ProNotifications = (out.ProNotifications)[:0]
				}
				for !in.IsDelim(']') {
					var v125 structs.Notification
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs31(in, &v125)
					out.ProNotifications = append(out.ProNotifications, v125)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NFLGameplan":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs34(in, &out.NFLGameplan)
		case "NFLDepthChart":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs25(in, &out.NFLDepthChart)
		case "FaceData":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.FaceData = make(map[uint]structs.FaceDataResponse)
				for !in.IsDelim('}') {
					key := uint(in.UintStr())
					in.WantColon()
					var v126 structs.FaceDataResponse
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs26(in, &v126)
					(out.FaceData)[key] = v126
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers3(out *jwriter.Writer, in BootstrapData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CollegeTeam\":"
		out.RawString(prefix[1:])
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs30(out, in.CollegeTeam)
	}
	{
		const prefix string = ",\"AllCollegeTeams\":"
		out.RawString(prefix)
		if in.AllCollegeTeams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v127, v128 := range in.AllCollegeTeams {
				if v127 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs30(out, v128)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CollegeRosterMap\":"
		out.RawString(prefix)
		if in.CollegeRosterMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v129First := true
			for v129Name, v129Value := range in.CollegeRosterMap {
				if v129First {
					v129First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v129Name))
				out.RawByte(':')
				if v129Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v130, v131 := range v129Value {
						if v130 > 0 {
							out.RawByte(',')
						}
						easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, v131)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"TopCFBPassers\":"
		out.RawString(prefix)
		if in.TopCFBPassers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v132, v133 := range in.TopCFBPassers {
				if v132 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, v133)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TopCFBRushers\":"
		out.RawString(prefix)
		if in.TopCFBRushers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v134, v135 := range in.TopCFBRushers {
				if v134 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, v135)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TopCFBReceivers\":"
		out.RawString(prefix)
		if in.TopCFBReceivers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v136, v137 := range in.TopCFBReceivers {
				if v136 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, v137)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PortalPlayers\":"
		out.RawString(prefix)
		if in.PortalPlayers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v138, v139 := range in.PortalPlayers {
				if v138 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, v139)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CollegeInjuryReport\":"
		out.RawString(prefix)
		if in.CollegeInjuryReport == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v140, v141 := range in.CollegeInjuryReport {
				if v140 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs3(out, v141)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CollegeNotifications\":"
		out.RawString(prefix)
		if in.CollegeNotifications == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v142, v143 := range in.CollegeNotifications {
				if v142 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs31(out, v143)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CollegeGameplan\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs32(out, in.CollegeGameplan)
	}
	{
		const prefix string = ",\"CollegeDepthChart\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs24(out, in.CollegeDepthChart)
	}
	{
		const prefix string = ",\"ProTeam\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs33(out, in.ProTeam)
	}
	{
		const prefix string = ",\"AllProTeams\":"
		out.RawString(prefix)
		if in.AllProTeams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v144, v145 := range in.AllProTeams {
				if v144 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs33(out, v145)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ProNotifications\":"
		out.RawString(prefix)
		if in.ProNotifications == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v146, v147 := range in.ProNotifications {
				if v146 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs31(out, v147)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NFLGameplan\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs34(out, in.NFLGameplan)
	}
	{
		const prefix string = ",\"NFLDepthChart\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs25(out, in.NFLDepthChart)
	}
	{
		const prefix string = ",\"FaceData\":"
		out.RawString(prefix)
		if in.FaceData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v148First := true
			for v148Name, v148Value := range in.FaceData {
				if v148First {
					v148First = false
				} else {
					out.RawByte(',')
				}
				out.UintStr(uint(v148Name))
				out.RawByte(':')
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs26(out, v148Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BootstrapData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BootstrapData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson83226b63EncodeGithubComCalebRoseSimFBAManagers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BootstrapData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BootstrapData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson83226b63DecodeGithubComCalebRoseSimFBAManagers3(l, v)
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs34(in *jlexer.Lexer, out *structs.NFLGameplan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "OffensiveScheme":
			out.OffensiveScheme = string(in.String())
		case "OffRunToPassRatio":
			out.OffRunToPassRatio = int(in.Int())
		case "DefensiveScheme":
			out.DefensiveScheme = string(in.String())
		case "BlitzSafeties":
			out.BlitzSafeties = bool(in.Bool())
		case "BlitzCorners":
			out.BlitzCorners = bool(in.Bool())
		case "LinebackerCoverage":
			out.LinebackerCoverage = string(in.String())
		case "CornersCoverage":
			out.CornersCoverage = string(in.String())
		case "SafetiesCoverage":
			out.SafetiesCoverage = string(in.String())
		case "DiveFocus":
			out.DiveFocus = int(in.Int())
		case "PitchFocus":
			out.PitchFocus = int(in.Int())
		case "PrimaryHB":
			out.PrimaryHB = int(in.Int())
		case "MaximumFGDistance":
			out.MaximumFGDistance = int(in.Int())
		case "GoFor4AndShort":
			out.GoFor4AndShort = int(in.Int())
		case "GoFor4AndLong":
			out.GoFor4AndLong = int(in.Int())
		case "HasSchemePenalty":
			out.HasSchemePenalty = bool(in.Bool())
		case "OffenseSchemePenalty":
			out.OffenseSchemePenalty = uint(in.Uint())
		case "DefenseSchemePenalty":
			out.DefenseSchemePenalty = uint(in.Uint())
		case "DefaultOffense":
			out.DefaultOffense = bool(in.Bool())
		case "DefaultDefense":
			out.DefaultDefense = bool(in.Bool())
		case "PreviousWeekBye":
			out.PreviousWeekBye = bool(in.Bool())
		case "FocusPlays":
			out.FocusPlays = string(in.String())
		case "DoubleTeam":
			out.DoubleTeam = int(in.Int())
		case "DefFormation1":
			out.DefFormation1 = string(in.String())
		case "DefFormation1RunToPass":
			out.DefFormation1RunToPass = int(in.Int())
		case "DefFormation1BlitzWeight":
			out.DefFormation1BlitzWeight = int(in.Int())
		case "DefFormation1BlitzAggression":
			out.DefFormation1BlitzAggression = string(in.String())
		case "DefFormation2":
			out.DefFormation2 = string(in.String())
		case "DefFormation2RunToPass":
			out.DefFormation2RunToPass = int(in.Int())
		case "DefFormation2BlitzWeight":
			out.DefFormation2BlitzWeight = int(in.Int())
		case "DefFormation2BlitzAggression":
			out.DefFormation2BlitzAggression = string(in.String())
		case "DefFormation3":
			out.DefFormation3 = string(in.String())
		case "DefFormation3RunToPass":
			out.DefFormation3RunToPass = int(in.Int())
		case "DefFormation3BlitzWeight":
			out.DefFormation3BlitzWeight = int(in.Int())
		case "DefFormation3BlitzAggression":
			out.DefFormation3BlitzAggression = string(in.String())
		case "DefFormation4":
			out.DefFormation4 = string(in.String())
		case "DefFormation4RunToPass":
			out.DefFormation4RunToPass = int(in.Int())
		case "DefFormation4BlitzWeight":
			out.DefFormation4BlitzWeight = int(in.Int())
		case "DefFormation4BlitzAggression":
			out.DefFormation4BlitzAggression = string(in.String())
		case "DefFormation5":
			out.DefFormation5 = string(in.String())
		case "DefFormation5RunToPass":
			out.DefFormation5RunToPass = int(in.Int())
		case "DefFormation5BlitzWeight":
			out.DefFormation5BlitzWeight = int(in.Int())
		case "DefFormation5BlitzAggression":
			out.DefFormation5BlitzAggression = string(in.String())
		case "OffFormation1Name":
			out.OffFormation1Name = string(in.String())
		case "OffForm1Weight":
			out.OffForm1Weight = int(in.Int())
		case "OffForm1TraditionalRun":
			out.OffForm1TraditionalRun = int(in.Int())
		case "OffForm1OptionRun":
			out.OffForm1OptionRun = int(in.Int())
		case "OffForm1Pass":
			out.OffForm1Pass = int(in.Int())
		case "OffForm1RPO":
			out.OffForm1RPO = int(in.Int())
		case "OffFormation2Name":
			out.OffFormation2Name = string(in.String())
		case "OffForm2Weight":
			out.OffForm2Weight = int(in.Int())
		case "OffForm2TraditionalRun":
			out.OffForm2TraditionalRun = int(in.Int())
		case "OffForm2OptionRun":
			out.OffForm2OptionRun = int(in.Int())
		case "OffForm2Pass":
			out.OffForm2Pass = int(in.Int())
		case "OffForm2RPO":
			out.OffForm2RPO = int(in.Int())
		case "OffFormation3Name":
			out.OffFormation3Name = string(in.String())
		case "OffForm3Weight":
			out.OffForm3Weight = int(in.Int())
		case "OffForm3TraditionalRun":
			out.OffForm3TraditionalRun = int(in.Int())
		case "OffForm3OptionRun":
			out.OffForm3OptionRun = int(in.Int())
		case "OffForm3Pass":
			out.OffForm3Pass = int(in.Int())
		case "OffForm3RPO":
			out.OffForm3RPO = int(in.Int())
		case "OffFormation4Name":
			out.OffFormation4Name = string(in.String())
		case "OffForm4Weight":
			out.OffForm4Weight = int(in.Int())
		case "OffForm4TraditionalRun":
			out.OffForm4TraditionalRun = int(in.Int())
		case "OffForm4OptionRun":
			out.OffForm4OptionRun = int(in.Int())
		case "OffForm4Pass":
			out.OffForm4Pass = int(in.Int())
		case "OffForm4RPO":
			out.OffForm4RPO = int(in.Int())
		case "OffFormation5Name":
			out.OffFormation5Name = string(in.String())
		case "OffForm5Weight":
			out.OffForm5Weight = int(in.Int())
		case "OffForm5TraditionalRun":
			out.OffForm5TraditionalRun = int(in.Int())
		case "OffForm5OptionRun":
			out.OffForm5OptionRun = int(in.Int())
		case "OffForm5Pass":
			out.OffForm5Pass = int(in.Int())
		case "OffForm5RPO":
			out.OffForm5RPO = int(in.Int())
		case "RunnerDistributionQB":
			out.RunnerDistributionQB = int(in.Int())
		case "RunnerDistributionRB1":
			out.RunnerDistributionRB1 = int(in.Int())
		case "RunnerDistributionRB2":
			out.RunnerDistributionRB2 = int(in.Int())
		case "RunnerDistributionRB3":
			out.RunnerDistributionRB3 = int(in.Int())
		case "RunnerDistributionFB1":
			out.RunnerDistributionFB1 = int(in.Int())
		case "RunnerDistributionFB2":
			out.RunnerDistributionFB2 = int(in.Int())
		case "RunnerDistributionWR":
			out.RunnerDistributionWR = int(in.Int())
		case "RunnerDistributionWRPosition":
			out.RunnerDistributionWRPosition = string(in.String())
		case "RunnerDistributionWRID":
			out.RunnerDistributionWRID = uint(in.Uint())
		case "RunOutsideLeft":
			out.RunOutsideLeft = int(in.Int())
		case "RunOutsideRight":
			out.RunOutsideRight = int(in.Int())
		case "RunInsideLeft":
			out.RunInsideLeft = int(in.Int())
		case "RunInsideRight":
			out.RunInsideRight = int(in.Int())
		case "RunPowerLeft":
			out.RunPowerLeft = int(in.Int())
		case "RunPowerRight":
			out.RunPowerRight = int(in.Int())
		case "RunDrawLeft":
			out.RunDrawLeft = int(in.Int())
		case "RunDrawRight":
			out.RunDrawRight = int(in.Int())
		case "ReadOptionLeft":
			out.ReadOptionLeft = int(in.Int())
		case "ReadOptionRight":
			out.ReadOptionRight = int(in.Int())
		case "SpeedOptionLeft":
			out.SpeedOptionLeft = int(in.Int())
		case "SpeedOptionRight":
			out.SpeedOptionRight = int(in.Int())
		case "InvertedOptionLeft":
			out.InvertedOptionLeft = int(in.Int())
		case "InvertedOptionRight":
			out.InvertedOptionRight = int(in.Int())
		case "TripleOptionLeft":
			out.TripleOptionLeft = int(in.Int())
		case "TripleOptionRight":
			out.TripleOptionRight = int(in.Int())
		case "PassQuick":
			out.PassQuick = int(in.Int())
		case "PassShort":
			out.PassShort = int(in.Int())
		case "PassLong":
			out.PassLong = int(in.Int())
		case "PassDeep":
			out.PassDeep = int(in.Int())
		case "PassScreen":
			out.PassScreen = int(in.Int())
		case "PassPAShort":
			out.PassPAShort = int(in.Int())
		case "PassPALong":
			out.PassPALong = int(in.Int())
		case "PassPADeep":
			out.PassPADeep = int(in.Int())
		case "LeftVsRight":
			out.LeftVsRight = int(in.Int())
		case "ChoiceOutside":
			out.ChoiceOutside = int(in.Int())
		case "ChoiceInside":
			out.ChoiceInside = int(in.Int())
		case "ChoicePower":
			out.ChoicePower = int(in.Int())
		case "PeekOutside":
			out.PeekOutside = int(in.Int())
		case "PeekInside":
			out.PeekInside = int(in.Int())
		case "PeekPower":
			out.PeekPower = int(in.Int())
		case "TargetingWR1":
			out.TargetingWR1 = int(in.Int())
		case "TargetDepthWR1":
			out.TargetDepthWR1 = string(in.String())
		case "TargetingWR2":
			out.TargetingWR2 = int(in.Int())
		case "TargetDepthWR2":
			out.TargetDepthWR2 = string(in.String())
		case "TargetingWR3":
			out.TargetingWR3 = int(in.Int())
		case "TargetDepthWR3":
			out.TargetDepthWR3 = string(in.String())
		case "TargetingWR4":
			out.TargetingWR4 = int(in.Int())
		case "TargetDepthWR4":
			out.TargetDepthWR4 = string(in.String())
		case "TargetingWR5":
			out.TargetingWR5 = int(in.Int())
		case "TargetDepthWR5":
			out.TargetDepthWR5 = string(in.String())
		case "TargetingTE1":
			out.TargetingTE1 = int(in.Int())
		case "TargetDepthTE1":
			out.TargetDepthTE1 = string(in.String())
		case "TargetingTE2":
			out.TargetingTE2 = int(in.Int())
		case "TargetDepthTE2":
			out.TargetDepthTE2 = string(in.String())
		case "TargetingTE3":
			out.TargetingTE3 = int(in.Int())
		case "TargetDepthTE3":
			out.TargetDepthTE3 = string(in.String())
		case "TargetingRB1":
			out.TargetingRB1 = int(in.Int())
		case "TargetDepthRB1":
			out.TargetDepthRB1 = string(in.String())
		case "TargetingRB2":
			out.TargetingRB2 = int(in.Int())
		case "TargetDepthRB2":
			out.TargetDepthRB2 = string(in.String())
		case "TargetingFB1":
			out.TargetingFB1 = int(in.Int())
		case "TargetDepthFB1":
			out.TargetDepthFB1 = string(in.String())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs34(out *jwriter.Writer, in structs.NFLGameplan) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"OffensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.OffensiveScheme))
	}
	{
		const prefix string = ",\"OffRunToPassRatio\":"
		out.RawString(prefix)
		out.Int(int(in.OffRunToPassRatio))
	}
	{
		const prefix string = ",\"DefensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.DefensiveScheme))
	}
	{
		const prefix string = ",\"BlitzSafeties\":"
		out.RawString(prefix)
		out.Bool(bool(in.BlitzSafeties))
	}
	{
		const prefix string = ",\"BlitzCorners\":"
		out.RawString(prefix)
		out.Bool(bool(in.BlitzCorners))
	}
	{
		const prefix string = ",\"LinebackerCoverage\":"
		out.RawString(prefix)
		out.String(string(in.LinebackerCoverage))
	}
	{
		const prefix string = ",\"CornersCoverage\":"
		out.RawString(prefix)
		out.String(string(in.CornersCoverage))
	}
	{
		const prefix string = ",\"SafetiesCoverage\":"
		out.RawString(prefix)
		out.String(string(in.SafetiesCoverage))
	}
	{
		const prefix string = ",\"DiveFocus\":"
		out.RawString(prefix)
		out.Int(int(in.DiveFocus))
	}
	{
		const prefix string = ",\"PitchFocus\":"
		out.RawString(prefix)
		out.Int(int(in.PitchFocus))
	}
	{
		const prefix string = ",\"PrimaryHB\":"
		out.RawString(prefix)
		out.Int(int(in.PrimaryHB))
	}
	{
		const prefix string = ",\"MaximumFGDistance\":"
		out.RawString(prefix)
		out.Int(int(in.MaximumFGDistance))
	}
	{
		const prefix string = ",\"GoFor4AndShort\":"
		out.RawString(prefix)
		out.Int(int(in.GoFor4AndShort))
	}
	{
		const prefix string = ",\"GoFor4AndLong\":"
		out.RawString(prefix)
		out.Int(int(in.GoFor4AndLong))
	}
	{
		const prefix string = ",\"HasSchemePenalty\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasSchemePenalty))
	}
	{
		const prefix string = ",\"OffenseSchemePenalty\":"
		out.RawString(prefix)
		out.Uint(uint(in.OffenseSchemePenalty))
	}
	{
		const prefix string = ",\"DefenseSchemePenalty\":"
		out.RawString(prefix)
		out.Uint(uint(in.DefenseSchemePenalty))
	}
	{
		const prefix string = ",\"DefaultOffense\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultOffense))
	}
	{
		const prefix string = ",\"DefaultDefense\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultDefense))
	}
	{
		const prefix string = ",\"PreviousWeekBye\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreviousWeekBye))
	}
	{
		const prefix string = ",\"FocusPlays\":"
		out.RawString(prefix)
		out.String(string(in.FocusPlays))
	}
	{
		const prefix string = ",\"DoubleTeam\":"
		out.RawString(prefix)
		out.Int(int(in.DoubleTeam))
	}
	{
		const prefix string = ",\"DefFormation1\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation1))
	}
	{
		const prefix string = ",\"DefFormation1RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation1RunToPass))
	}
	{
		const prefix string = ",\"DefFormation1BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation1BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation1BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation1BlitzAggression))
	}
	{
		const prefix string = ",\"DefFormation2\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation2))
	}
	{
		const prefix string = ",\"DefFormation2RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation2RunToPass))
	}
	{
		const prefix string = ",\"DefFormation2BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation2BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation2BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation2BlitzAggression))
	}
	{
		const prefix string = ",\"DefFormation3\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation3))
	}
	{
		const prefix string = ",\"DefFormation3RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation3RunToPass))
	}
	{
		const prefix string = ",\"DefFormation3BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation3BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation3BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation3BlitzAggression))
	}
	{
		const prefix string = ",\"DefFormation4\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation4))
	}
	{
		const prefix string = ",\"DefFormation4RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation4RunToPass))
	}
	{
		const prefix string = ",\"DefFormation4BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation4BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation4BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation4BlitzAggression))
	}
	{
		const prefix string = ",\"DefFormation5\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation5))
	}
	{
		const prefix string = ",\"DefFormation5RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation5RunToPass))
	}
	{
		const prefix string = ",\"DefFormation5BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation5BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation5BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation5BlitzAggression))
	}
	{
		const prefix string = ",\"OffFormation1Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation1Name))
	}
	{
		const prefix string = ",\"OffForm1Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1Weight))
	}
	{
		const prefix string = ",\"OffForm1TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm1OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1OptionRun))
	}
	{
		const prefix string = ",\"OffForm1Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1Pass))
	}
	{
		const prefix string = ",\"OffForm1RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1RPO))
	}
	{
		const prefix string = ",\"OffFormation2Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation2Name))
	}
	{
		const prefix string = ",\"OffForm2Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2Weight))
	}
	{
		const prefix string = ",\"OffForm2TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm2OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2OptionRun))
	}
	{
		const prefix string = ",\"OffForm2Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2Pass))
	}
	{
		const prefix string = ",\"OffForm2RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2RPO))
	}
	{
		const prefix string = ",\"OffFormation3Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation3Name))
	}
	{
		const prefix string = ",\"OffForm3Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3Weight))
	}
	{
		const prefix string = ",\"OffForm3TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm3OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3OptionRun))
	}
	{
		const prefix string = ",\"OffForm3Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3Pass))
	}
	{
		const prefix string = ",\"OffForm3RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3RPO))
	}
	{
		const prefix string = ",\"OffFormation4Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation4Name))
	}
	{
		const prefix string = ",\"OffForm4Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4Weight))
	}
	{
		const prefix string = ",\"OffForm4TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm4OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4OptionRun))
	}
	{
		const prefix string = ",\"OffForm4Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4Pass))
	}
	{
		const prefix string = ",\"OffForm4RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4RPO))
	}
	{
		const prefix string = ",\"OffFormation5Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation5Name))
	}
	{
		const prefix string = ",\"OffForm5Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5Weight))
	}
	{
		const prefix string = ",\"OffForm5TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm5OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5OptionRun))
	}
	{
		const prefix string = ",\"OffForm5Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5Pass))
	}
	{
		const prefix string = ",\"OffForm5RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5RPO))
	}
	{
		const prefix string = ",\"RunnerDistributionQB\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionQB))
	}
	{
		const prefix string = ",\"RunnerDistributionRB1\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionRB1))
	}
	{
		const prefix string = ",\"RunnerDistributionRB2\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionRB2))
	}
	{
		const prefix string = ",\"RunnerDistributionRB3\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionRB3))
	}
	{
		const prefix string = ",\"RunnerDistributionFB1\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionFB1))
	}
	{
		const prefix string = ",\"RunnerDistributionFB2\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionFB2))
	}
	{
		const prefix string = ",\"RunnerDistributionWR\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionWR))
	}
	{
		const prefix string = ",\"RunnerDistributionWRPosition\":"
		out.RawString(prefix)
		out.String(string(in.RunnerDistributionWRPosition))
	}
	{
		const prefix string = ",\"RunnerDistributionWRID\":"
		out.RawString(prefix)
		out.Uint(uint(in.RunnerDistributionWRID))
	}
	{
		const prefix string = ",\"RunOutsideLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RunOutsideLeft))
	}
	{
		const prefix string = ",\"RunOutsideRight\":"
		out.RawString(prefix)
		out.Int(int(in.RunOutsideRight))
	}
	{
		const prefix string = ",\"RunInsideLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RunInsideLeft))
	}
	{
		const prefix string = ",\"RunInsideRight\":"
		out.RawString(prefix)
		out.Int(int(in.RunInsideRight))
	}
	{
		const prefix string = ",\"RunPowerLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RunPowerLeft))
	}
	{
		const prefix string = ",\"RunPowerRight\":"
		out.RawString(prefix)
		out.Int(int(in.RunPowerRight))
	}
	{
		const prefix string = ",\"RunDrawLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RunDrawLeft))
	}
	{
		const prefix string = ",\"RunDrawRight\":"
		out.RawString(prefix)
		out.Int(int(in.RunDrawRight))
	}
	{
		const prefix string = ",\"ReadOptionLeft\":"
		out.RawString(prefix)
		out.Int(int(in.ReadOptionLeft))
	}
	{
		const prefix string = ",\"ReadOptionRight\":"
		out.RawString(prefix)
		out.Int(int(in.ReadOptionRight))
	}
	{
		const prefix string = ",\"SpeedOptionLeft\":"
		out.RawString(prefix)
		out.Int(int(in.SpeedOptionLeft))
	}
	{
		const prefix string = ",\"SpeedOptionRight\":"
		out.RawString(prefix)
		out.Int(int(in.SpeedOptionRight))
	}
	{
		const prefix string = ",\"InvertedOptionLeft\":"
		out.RawString(prefix)
		out.Int(int(in.InvertedOptionLeft))
	}
	{
		const prefix string = ",\"InvertedOptionRight\":"
		out.RawString(prefix)
		out.Int(int(in.InvertedOptionRight))
	}
	{
		const prefix string = ",\"TripleOptionLeft\":"
		out.RawString(prefix)
		out.Int(int(in.TripleOptionLeft))
	}
	{
		const prefix string = ",\"TripleOptionRight\":"
		out.RawString(prefix)
		out.Int(int(in.TripleOptionRight))
	}
	{
		const prefix string = ",\"PassQuick\":"
		out.RawString(prefix)
		out.Int(int(in.PassQuick))
	}
	{
		const prefix string = ",\"PassShort\":"
		out.RawString(prefix)
		out.Int(int(in.PassShort))
	}
	{
		const prefix string = ",\"PassLong\":"
		out.RawString(prefix)
		out.Int(int(in.PassLong))
	}
	{
		const prefix string = ",\"PassDeep\":"
		out.RawString(prefix)
		out.Int(int(in.PassDeep))
	}
	{
		const prefix string = ",\"PassScreen\":"
		out.RawString(prefix)
		out.Int(int(in.PassScreen))
	}
	{
		const prefix string = ",\"PassPAShort\":"
		out.RawString(prefix)
		out.Int(int(in.PassPAShort))
	}
	{
		const prefix string = ",\"PassPALong\":"
		out.RawString(prefix)
		out.Int(int(in.PassPALong))
	}
	{
		const prefix string = ",\"PassPADeep\":"
		out.RawString(prefix)
		out.Int(int(in.PassPADeep))
	}
	{
		const prefix string = ",\"LeftVsRight\":"
		out.RawString(prefix)
		out.Int(int(in.LeftVsRight))
	}
	{
		const prefix string = ",\"ChoiceOutside\":"
		out.RawString(prefix)
		out.Int(int(in.ChoiceOutside))
	}
	{
		const prefix string = ",\"ChoiceInside\":"
		out.RawString(prefix)
		out.Int(int(in.ChoiceInside))
	}
	{
		const prefix string = ",\"ChoicePower\":"
		out.RawString(prefix)
		out.Int(int(in.ChoicePower))
	}
	{
		const prefix string = ",\"PeekOutside\":"
		out.RawString(prefix)
		out.Int(int(in.PeekOutside))
	}
	{
		const prefix string = ",\"PeekInside\":"
		out.RawString(prefix)
		out.Int(int(in.PeekInside))
	}
	{
		const prefix string = ",\"PeekPower\":"
		out.RawString(prefix)
		out.Int(int(in.PeekPower))
	}
	{
		const prefix string = ",\"TargetingWR1\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR1))
	}
	{
		const prefix string = ",\"TargetDepthWR1\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR1))
	}
	{
		const prefix string = ",\"TargetingWR2\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR2))
	}
	{
		const prefix string = ",\"TargetDepthWR2\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR2))
	}
	{
		const prefix string = ",\"TargetingWR3\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR3))
	}
	{
		const prefix string = ",\"TargetDepthWR3\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR3))
	}
	{
		const prefix string = ",\"TargetingWR4\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR4))
	}
	{
		const prefix string = ",\"TargetDepthWR4\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR4))
	}
	{
		const prefix string = ",\"TargetingWR5\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR5))
	}
	{
		const prefix string = ",\"TargetDepthWR5\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR5))
	}
	{
		const prefix string = ",\"TargetingTE1\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingTE1))
	}
	{
		const prefix string = ",\"TargetDepthTE1\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthTE1))
	}
	{
		const prefix string = ",\"TargetingTE2\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingTE2))
	}
	{
		const prefix string = ",\"TargetDepthTE2\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthTE2))
	}
	{
		const prefix string = ",\"TargetingTE3\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingTE3))
	}
	{
		const prefix string = ",\"TargetDepthTE3\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthTE3))
	}
	{
		const prefix string = ",\"TargetingRB1\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingRB1))
	}
	{
		const prefix string = ",\"TargetDepthRB1\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthRB1))
	}
	{
		const prefix string = ",\"TargetingRB2\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingRB2))
	}
	{
		const prefix string = ",\"TargetDepthRB2\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthRB2))
	}
	{
		const prefix string = ",\"TargetingFB1\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingFB1))
	}
	{
		const prefix string = ",\"TargetDepthFB1\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthFB1))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs33(in *jlexer.Lexer, out *structs.NFLTeam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ConferenceID":
			out.ConferenceID = uint(in.Uint())
		case "Conference":
			out.Conference = string(in.String())
		case "DivisionID":
			out.DivisionID = uint(in.Uint())
		case "Division":
			out.Division = string(in.String())
		case "NFLOwnerID":
			out.NFLOwnerID = uint(in.Uint())
		case "NFLOwnerName":
			out.NFLOwnerName = string(in.String())
		case "NFLCoachID":
			out.NFLCoachID = uint(in.Uint())
		case "NFLCoachName":
			out.NFLCoachName = string(in.String())
		case "NFLGMID":
			out.NFLGMID = uint(in.Uint())
		case "NFLGMName":
			out.NFLGMName = string(in.String())
		case "NFLAssistantID":
			out.NFLAssistantID = uint(in.Uint())
		case "NFLAssistantName":
			out.NFLAssistantName = string(in.String())
		case "WaiverOrder":
			out.WaiverOrder = uint(in.Uint())
		case "UsedTagThisSeason":
			out.UsedTagThisSeason = bool(in.Bool())
		case "Capsheet":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs12(in, &out.Capsheet)
		case "Contracts":
			if in.IsNull() {
				in.Skip()
				out.Contracts = nil
			} else {
				in.Delim('[')
				if out.Contracts == nil {
					if !in.IsDelim(']') {
						out.Contracts = make([]structs.NFLContract, 0, 0)
					} else {
						out.Contracts = []structs.NFLContract{}
					}
				} else {
					out.Contracts = (out.Contracts)[:0]
				}
				for !in.IsDelim(']') {
					var v149 structs.NFLContract
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs16(in, &v149)
					out.Contracts = append(out.Contracts, v149)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DraftPicks":
			if in.IsNull() {
				in.Skip()
				out.DraftPicks = nil
			} else {
				in.Delim('[')
				if out.DraftPicks == nil {
					if !in.IsDelim(']') {
						out.DraftPicks = make([]structs.NFLDraftPick, 0, 0)
					} else {
						out.DraftPicks = []structs.NFLDraftPick{}
					}
				} else {
					out.DraftPicks = (out.DraftPicks)[:0]
				}
				for !in.IsDelim(']') {
					var v150 structs.NFLDraftPick
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs35(in, &v150)
					out.DraftPicks = append(out.DraftPicks, v150)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TeamStats":
			if in.IsNull() {
				in.Skip()
				out.TeamStats = nil
			} else {
				in.Delim('[')
				if out.TeamStats == nil {
					if !in.IsDelim(']') {
						out.TeamStats = make([]structs.NFLTeamStats, 0, 0)
					} else {
						out.TeamStats = []structs.NFLTeamStats{}
					}
				} else {
					out.TeamStats = (out.TeamStats)[:0]
				}
				for !in.IsDelim(']') {
					var v151 structs.NFLTeamStats
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs36(in, &v151)
					out.TeamStats = append(out.TeamStats, v151)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TeamSeasonStats":
			if in.IsNull() {
				in.Skip()
				out.TeamSeasonStats = nil
			} else {
				in.Delim('[')
				if out.TeamSeasonStats == nil {
					if !in.IsDelim(']') {
						out.TeamSeasonStats = make([]structs.NFLTeamSeasonStats, 0, 0)
					} else {
						out.TeamSeasonStats = []structs.NFLTeamSeasonStats{}
					}
				} else {
					out.TeamSeasonStats = (out.TeamSeasonStats)[:0]
				}
				for !in.IsDelim(']') {
					var v152 structs.NFLTeamSeasonStats
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs37(in, &v152)
					out.TeamSeasonStats = append(out.TeamSeasonStats, v152)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TeamDepthChart":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs25(in, &out.TeamDepthChart)
		case "TeamGameplan":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs34(in, &out.TeamGameplan)
		case "Standings":
			if in.IsNull() {
				in.Skip()
				out.Standings = nil
			} else {
				in.Delim('[')
				if out.Standings == nil {
					if !in.IsDelim(']') {
						out.Standings = make([]structs.NFLStandings, 0, 0)
					} else {
						out.Standings = []structs.NFLStandings{}
					}
				} else {
					out.Standings = (out.Standings)[:0]
				}
				for !in.IsDelim(']') {
					var v153 structs.NFLStandings
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs10(in, &v153)
					out.Standings = append(out.Standings, v153)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TeamName":
			out.TeamName = string(in.String())
		case "Mascot":
			out.Mascot = string(in.String())
		case "TeamAbbr":
			out.TeamAbbr = string(in.String())
		case "Coach":
			out.Coach = string(in.String())
		case "City":
			out.City = string(in.String())
		case "State":
			out.State = string(in.String())
		case "Country":
			out.Country = string(in.String())
		case "StadiumID":
			out.StadiumID = uint(in.Uint())
		case "Stadium":
			out.Stadium = string(in.String())
		case "StadiumCapacity":
			out.StadiumCapacity = int(in.Int())
		case "RecordAttendance":
			out.RecordAttendance = int(in.Int())
		case "Enrollment":
			out.Enrollment = int(in.Int())
		case "FirstPlayed":
			out.FirstPlayed = int(in.Int())
		case "ColorOne":
			out.ColorOne = string(in.String())
		case "ColorTwo":
			out.ColorTwo = string(in.String())
		case "ColorThree":
			out.ColorThree = string(in.String())
		case "DiscordID":
			out.DiscordID = string(in.String())
		case "OverallGrade":
			out.OverallGrade = string(in.String())
		case "OffenseGrade":
			out.OffenseGrade = string(in.String())
		case "DefenseGrade":
			out.DefenseGrade = string(in.String())
		case "SpecialTeamsGrade":
			out.SpecialTeamsGrade = string(in.String())
		case "PenaltyMarks":
			out.PenaltyMarks = uint8(in.Uint8())
		case "JerseyType":
			out.JerseyType = uint8(in.Uint8())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs33(out *jwriter.Writer, in structs.NFLTeam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ConferenceID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ConferenceID))
	}
	{
		const prefix string = ",\"Conference\":"
		out.RawString(prefix)
		out.String(string(in.Conference))
	}
	{
		const prefix string = ",\"DivisionID\":"
		out.RawString(prefix)
		out.Uint(uint(in.DivisionID))
	}
	{
		const prefix string = ",\"Division\":"
		out.RawString(prefix)
		out.String(string(in.Division))
	}
	{
		const prefix string = ",\"NFLOwnerID\":"
		out.RawString(prefix)
		out.Uint(uint(in.NFLOwnerID))
	}
	{
		const prefix string = ",\"NFLOwnerName\":"
		out.RawString(prefix)
		out.String(string(in.NFLOwnerName))
	}
	{
		const prefix string = ",\"NFLCoachID\":"
		out.RawString(prefix)
		out.Uint(uint(in.NFLCoachID))
	}
	{
		const prefix string = ",\"NFLCoachName\":"
		out.RawString(prefix)
		out.String(string(in.NFLCoachName))
	}
	{
		const prefix string = ",\"NFLGMID\":"
		out.RawString(prefix)
		out.Uint(uint(in.NFLGMID))
	}
	{
		const prefix string = ",\"NFLGMName\":"
		out.RawString(prefix)
		out.String(string(in.NFLGMName))
	}
	{
		const prefix string = ",\"NFLAssistantID\":"
		out.RawString(prefix)
		out.Uint(uint(in.NFLAssistantID))
	}
	{
		const prefix string = ",\"NFLAssistantName\":"
		out.RawString(prefix)
		out.String(string(in.NFLAssistantName))
	}
	{
		const prefix string = ",\"WaiverOrder\":"
		out.RawString(prefix)
		out.Uint(uint(in.WaiverOrder))
	}
	{
		const prefix string = ",\"UsedTagThisSeason\":"
		out.RawString(prefix)
		out.Bool(bool(in.UsedTagThisSeason))
	}
	{
		const prefix string = ",\"Capsheet\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs12(out, in.Capsheet)
	}
	{
		const prefix string = ",\"Contracts\":"
		out.RawString(prefix)
		if in.Contracts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v154, v155 := range in.Contracts {
				if v154 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs16(out, v155)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DraftPicks\":"
		out.RawString(prefix)
		if in.DraftPicks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v156, v157 := range in.DraftPicks {
				if v156 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs35(out, v157)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TeamStats\":"
		out.RawString(prefix)
		if in.TeamStats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v158, v159 := range in.TeamStats {
				if v158 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs36(out, v159)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TeamSeasonStats\":"
		out.RawString(prefix)
		if in.TeamSeasonStats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v160, v161 := range in.TeamSeasonStats {
				if v160 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs37(out, v161)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TeamDepthChart\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs25(out, in.TeamDepthChart)
	}
	{
		const prefix string = ",\"TeamGameplan\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs34(out, in.TeamGameplan)
	}
	{
		const prefix string = ",\"Standings\":"
		out.RawString(prefix)
		if in.Standings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v162, v163 := range in.Standings {
				if v162 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs10(out, v163)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TeamName\":"
		out.RawString(prefix)
		out.String(string(in.TeamName))
	}
	{
		const prefix string = ",\"Mascot\":"
		out.RawString(prefix)
		out.String(string(in.Mascot))
	}
	{
		const prefix string = ",\"TeamAbbr\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbr))
	}
	{
		const prefix string = ",\"Coach\":"
		out.RawString(prefix)
		out.String(string(in.Coach))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"Country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"StadiumID\":"
		out.RawString(prefix)
		out.Uint(uint(in.StadiumID))
	}
	{
		const prefix string = ",\"Stadium\":"
		out.RawString(prefix)
		out.String(string(in.Stadium))
	}
	{
		const prefix string = ",\"StadiumCapacity\":"
		out.RawString(prefix)
		out.Int(int(in.StadiumCapacity))
	}
	{
		const prefix string = ",\"RecordAttendance\":"
		out.RawString(prefix)
		out.Int(int(in.RecordAttendance))
	}
	{
		const prefix string = ",\"Enrollment\":"
		out.RawString(prefix)
		out.Int(int(in.Enrollment))
	}
	{
		const prefix string = ",\"FirstPlayed\":"
		out.RawString(prefix)
		out.Int(int(in.FirstPlayed))
	}
	{
		const prefix string = ",\"ColorOne\":"
		out.RawString(prefix)
		out.String(string(in.ColorOne))
	}
	{
		const prefix string = ",\"ColorTwo\":"
		out.RawString(prefix)
		out.String(string(in.ColorTwo))
	}
	{
		const prefix string = ",\"ColorThree\":"
		out.RawString(prefix)
		out.String(string(in.ColorThree))
	}
	{
		const prefix string = ",\"DiscordID\":"
		out.RawString(prefix)
		out.String(string(in.DiscordID))
	}
	{
		const prefix string = ",\"OverallGrade\":"
		out.RawString(prefix)
		out.String(string(in.OverallGrade))
	}
	{
		const prefix string = ",\"OffenseGrade\":"
		out.RawString(prefix)
		out.String(string(in.OffenseGrade))
	}
	{
		const prefix string = ",\"DefenseGrade\":"
		out.RawString(prefix)
		out.String(string(in.DefenseGrade))
	}
	{
		const prefix string = ",\"SpecialTeamsGrade\":"
		out.RawString(prefix)
		out.String(string(in.SpecialTeamsGrade))
	}
	{
		const prefix string = ",\"PenaltyMarks\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.PenaltyMarks))
	}
	{
		const prefix string = ",\"JerseyType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.JerseyType))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs37(in *jlexer.Lexer, out *structs.NFLTeamSeasonStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "Year":
			out.Year = int(in.Int())
		case "GamesPlayed":
			out.GamesPlayed = int(in.Int())
		case "TotalOffensiveYards":
			out.TotalOffensiveYards = int(in.Int())
		case "TotalYardsAllowed":
			out.TotalYardsAllowed = int(in.Int())
		case "Fumbles":
			out.Fumbles = int(in.Int())
		case "QBRating":
			out.QBRating = float64(in.Float64())
		case "Tackles":
			out.Tackles = float64(in.Float64())
		case "Turnovers":
			out.Turnovers = int(in.Int())
		case "PointsScored":
			out.PointsScored = int(in.Int())
		case "PointsAgainst":
			out.PointsAgainst = int(in.Int())
		case "TwoPointTries":
			out.TwoPointTries = int(in.Int())
		case "TwoPointSucceed":
			out.TwoPointSucceed = int(in.Int())
		case "PassingYards":
			out.PassingYards = int(in.Int())
		case "PassingAttempts":
			out.PassingAttempts = int(in.Int())
		case "PassingCompletions":
			out.PassingCompletions = int(in.Int())
		case "LongestPass":
			out.LongestPass = int(in.Int())
		case "PassingTouchdowns":
			out.PassingTouchdowns = int(in.Int())
		case "PassingInterceptions":
			out.PassingInterceptions = int(in.Int())
		case "QBSacks":
			out.QBSacks = int(in.Int())
		case "RushAttempts":
			out.RushAttempts = int(in.Int())
		case "RushingYards":
			out.RushingYards = int(in.Int())
		case "RushingYardsPerAttempt":
			out.RushingYardsPerAttempt = float64(in.Float64())
		case "LongestRush":
			out.LongestRush = int(in.Int())
		case "RushingTouchdowns":
			out.RushingTouchdowns = int(in.Int())
		case "RushingFumbles":
			out.RushingFumbles = int(in.Int())
		case "ReceivingTargets":
			out.ReceivingTargets = int(in.Int())
		case "ReceivingCatches":
			out.ReceivingCatches = int(in.Int())
		case "ReceivingYards":
			out.ReceivingYards = int(in.Int())
		case "YardsPerCatch":
			out.YardsPerCatch = float64(in.Float64())
		case "ReceivingTouchdowns":
			out.ReceivingTouchdowns = int(in.Int())
		case "ReceivingFumbles":
			out.ReceivingFumbles = int(in.Int())
		case "PassingYardsAllowed":
			out.PassingYardsAllowed = int(in.Int())
		case "PassingTDsAllowed":
			out.PassingTDsAllowed = int(in.Int())
		case "PassingCompletionsAllowed":
			out.PassingCompletionsAllowed = int(in.Int())
		case "RushingYardsAllowed":
			out.RushingYardsAllowed = int(in.Int())
		case "RushingTDsAllowed":
			out.RushingTDsAllowed = int(in.Int())
		case "RushingYardsPerAttemptAllowed":
			out.RushingYardsPerAttemptAllowed = float64(in.Float64())
		case "SoloTackles":
			out.SoloTackles = int(in.Int())
		case "AssistedTackles":
			out.AssistedTackles = int(in.Int())
		case "TacklesForLoss":
			out.TacklesForLoss = float64(in.Float64())
		case "DefensiveSacks":
			out.DefensiveSacks = float64(in.Float64())
		case "ForcedFumbles":
			out.ForcedFumbles = int(in.Int())
		case "FumblesRecovered":
			out.FumblesRecovered = int(in.Int())
		case "DefensiveInterceptions":
			out.DefensiveInterceptions = int(in.Int())
		case "TurnoverYards":
			out.TurnoverYards = int(in.Int())
		case "DefensiveTDs":
			out.DefensiveTDs = int(in.Int())
		case "Safeties":
			out.Safeties = int(in.Int())
		case "ExtraPointsMade":
			out.ExtraPointsMade = int(in.Int())
		case "ExtraPointsAttempted":
			out.ExtraPointsAttempted = int(in.Int())
		case "ExtraPointPercentage":
			out.ExtraPointPercentage = float64(in.Float64())
		case "FieldGoalsMade":
			out.FieldGoalsMade = int(in.Int())
		case "FieldGoalsAttempted":
			out.FieldGoalsAttempted = int(in.Int())
		case "FieldGoalsPercentage":
			out.FieldGoalsPercentage = float64(in.Float64())
		case "LongestFieldGoal":
			out.LongestFieldGoal = int(in.Int())
		case "KickoffTBs":
			out.KickoffTBs = int(in.Int())
		case "PuntTBs":
			out.PuntTBs = int(in.Int())
		case "Punts":
			out.Punts = int(in.Int())
		case "PuntYards":
			out.PuntYards = int(in.Int())
		case "PuntsInside20":
			out.PuntsInside20 = int(in.Int())
		case "PuntAverage":
			out.PuntAverage = float64(in.Float64())
		case "Inside20YardLine":
			out.Inside20YardLine = int(in.Int())
		case "KickReturnYards":
			out.KickReturnYards = int(in.Int())
		case "KickReturnTDs":
			out.KickReturnTDs = int(in.Int())
		case "PuntReturnYards":
			out.PuntReturnYards = int(in.Int())
		case "PuntReturnTDs":
			out.PuntReturnTDs = int(in.Int())
		case "OffensivePenalties":
			out.OffensivePenalties = int(in.Int())
		case "DefensivePenalties":
			out.DefensivePenalties = int(in.Int())
		case "OffPenaltyYards":
			out.OffPenaltyYards = int(in.Int())
		case "DefPenaltyYards":
			out.DefPenaltyYards = int(in.Int())
		case "Score1Q":
			out.Score1Q = int(in.Int())
		case "Score2Q":
			out.Score2Q = int(in.Int())
		case "Score3Q":
			out.Score3Q = int(in.Int())
		case "Score4Q":
			out.Score4Q = int(in.Int())
		case "Score5Q":
			out.Score5Q = int(in.Int())
		case "Score6Q":
			out.Score6Q = int(in.Int())
		case "Score7Q":
			out.Score7Q = int(in.Int())
		case "ScoreOT":
			out.ScoreOT = int(in.Int())
		case "OffensiveScheme":
			out.OffensiveScheme = string(in.String())
		case "DefensiveScheme":
			out.DefensiveScheme = string(in.String())
		case "OffensiveSnaps":
			out.OffensiveSnaps = uint16(in.Uint16())
		case "DefensiveSnaps":
			out.DefensiveSnaps = uint16(in.Uint16())
		case "SpecialTeamSnaps":
			out.SpecialTeamSnaps = uint16(in.Uint16())
		case "GameType":
			out.GameType = uint8(in.Uint8())
		case "RevealResults":
			out.RevealResults = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs37(out *jwriter.Writer, in structs.NFLTeamSeasonStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"Year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"GamesPlayed\":"
		out.RawString(prefix)
		out.Int(int(in.GamesPlayed))
	}
	{
		const prefix string = ",\"TotalOffensiveYards\":"
		out.RawString(prefix)
		out.Int(int(in.TotalOffensiveYards))
	}
	{
		const prefix string = ",\"TotalYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.TotalYardsAllowed))
	}
	{
		const prefix string = ",\"Fumbles\":"
		out.RawString(prefix)
		out.Int(int(in.Fumbles))
	}
	{
		const prefix string = ",\"QBRating\":"
		out.RawString(prefix)
		out.Float64(float64(in.QBRating))
	}
	{
		const prefix string = ",\"Tackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.Tackles))
	}
	{
		const prefix string = ",\"Turnovers\":"
		out.RawString(prefix)
		out.Int(int(in.Turnovers))
	}
	{
		const prefix string = ",\"PointsScored\":"
		out.RawString(prefix)
		out.Int(int(in.PointsScored))
	}
	{
		const prefix string = ",\"PointsAgainst\":"
		out.RawString(prefix)
		out.Int(int(in.PointsAgainst))
	}
	{
		const prefix string = ",\"TwoPointTries\":"
		out.RawString(prefix)
		out.Int(int(in.TwoPointTries))
	}
	{
		const prefix string = ",\"TwoPointSucceed\":"
		out.RawString(prefix)
		out.Int(int(in.TwoPointSucceed))
	}
	{
		const prefix string = ",\"PassingYards\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYards))
	}
	{
		const prefix string = ",\"PassingAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.PassingAttempts))
	}
	{
		const prefix string = ",\"PassingCompletions\":"
		out.RawString(prefix)
		out.Int(int(in.PassingCompletions))
	}
	{
		const prefix string = ",\"LongestPass\":"
		out.RawString(prefix)
		out.Int(int(in.LongestPass))
	}
	{
		const prefix string = ",\"PassingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTouchdowns))
	}
	{
		const prefix string = ",\"PassingInterceptions\":"
		out.RawString(prefix)
		out.Int(int(in.PassingInterceptions))
	}
	{
		const prefix string = ",\"QBSacks\":"
		out.RawString(prefix)
		out.Int(int(in.QBSacks))
	}
	{
		const prefix string = ",\"RushAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.RushAttempts))
	}
	{
		const prefix string = ",\"RushingYards\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYards))
	}
	{
		const prefix string = ",\"RushingYardsPerAttempt\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingYardsPerAttempt))
	}
	{
		const prefix string = ",\"LongestRush\":"
		out.RawString(prefix)
		out.Int(int(in.LongestRush))
	}
	{
		const prefix string = ",\"RushingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTouchdowns))
	}
	{
		const prefix string = ",\"RushingFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.RushingFumbles))
	}
	{
		const prefix string = ",\"ReceivingTargets\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTargets))
	}
	{
		const prefix string = ",\"ReceivingCatches\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingCatches))
	}
	{
		const prefix string = ",\"ReceivingYards\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYards))
	}
	{
		const prefix string = ",\"YardsPerCatch\":"
		out.RawString(prefix)
		out.Float64(float64(in.YardsPerCatch))
	}
	{
		const prefix string = ",\"ReceivingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTouchdowns))
	}
	{
		const prefix string = ",\"ReceivingFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingFumbles))
	}
	{
		const prefix string = ",\"PassingYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsAllowed))
	}
	{
		const prefix string = ",\"PassingTDsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDsAllowed))
	}
	{
		const prefix string = ",\"PassingCompletionsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingCompletionsAllowed))
	}
	{
		const prefix string = ",\"RushingYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsAllowed))
	}
	{
		const prefix string = ",\"RushingTDsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDsAllowed))
	}
	{
		const prefix string = ",\"RushingYardsPerAttemptAllowed\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingYardsPerAttemptAllowed))
	}
	{
		const prefix string = ",\"SoloTackles\":"
		out.RawString(prefix)
		out.Int(int(in.SoloTackles))
	}
	{
		const prefix string = ",\"AssistedTackles\":"
		out.RawString(prefix)
		out.Int(int(in.AssistedTackles))
	}
	{
		const prefix string = ",\"TacklesForLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.TacklesForLoss))
	}
	{
		const prefix string = ",\"DefensiveSacks\":"
		out.RawString(prefix)
		out.Float64(float64(in.DefensiveSacks))
	}
	{
		const prefix string = ",\"ForcedFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ForcedFumbles))
	}
	{
		const prefix string = ",\"FumblesRecovered\":"
		out.RawString(prefix)
		out.Int(int(in.FumblesRecovered))
	}
	{
		const prefix string = ",\"DefensiveInterceptions\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveInterceptions))
	}
	{
		const prefix string = ",\"TurnoverYards\":"
		out.RawString(prefix)
		out.Int(int(in.TurnoverYards))
	}
	{
		const prefix string = ",\"DefensiveTDs\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveTDs))
	}
	{
		const prefix string = ",\"Safeties\":"
		out.RawString(prefix)
		out.Int(int(in.Safeties))
	}
	{
		const prefix string = ",\"ExtraPointsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsMade))
	}
	{
		const prefix string = ",\"ExtraPointsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsAttempted))
	}
	{
		const prefix string = ",\"ExtraPointPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.ExtraPointPercentage))
	}
	{
		const prefix string = ",\"FieldGoalsMade\":"
		out.RawString(prefix)
		out.Int(int(in.FieldGoalsMade))
	}
	{
		const prefix string = ",\"FieldGoalsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.FieldGoalsAttempted))
	}
	{
		const prefix string = ",\"FieldGoalsPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.FieldGoalsPercentage))
	}
	{
		const prefix string = ",\"LongestFieldGoal\":"
		out.RawString(prefix)
		out.Int(int(in.LongestFieldGoal))
	}
	{
		const prefix string = ",\"KickoffTBs\":"
		out.RawString(prefix)
		out.Int(int(in.KickoffTBs))
	}
	{
		const prefix string = ",\"PuntTBs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntTBs))
	}
	{
		const prefix string = ",\"Punts\":"
		out.RawString(prefix)
		out.Int(int(in.Punts))
	}
	{
		const prefix string = ",\"PuntYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntYards))
	}
	{
		const prefix string = ",\"PuntsInside20\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsInside20))
	}
	{
		const prefix string = ",\"PuntAverage\":"
		out.RawString(prefix)
		out.Float64(float64(in.PuntAverage))
	}
	{
		const prefix string = ",\"Inside20YardLine\":"
		out.RawString(prefix)
		out.Int(int(in.Inside20YardLine))
	}
	{
		const prefix string = ",\"KickReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnYards))
	}
	{
		const prefix string = ",\"KickReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnTDs))
	}
	{
		const prefix string = ",\"PuntReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnYards))
	}
	{
		const prefix string = ",\"PuntReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnTDs))
	}
	{
		const prefix string = ",\"OffensivePenalties\":"
		out.RawString(prefix)
		out.Int(int(in.OffensivePenalties))
	}
	{
		const prefix string = ",\"DefensivePenalties\":"
		out.RawString(prefix)
		out.Int(int(in.DefensivePenalties))
	}
	{
		const prefix string = ",\"OffPenaltyYards\":"
		out.RawString(prefix)
		out.Int(int(in.OffPenaltyYards))
	}
	{
		const prefix string = ",\"DefPenaltyYards\":"
		out.RawString(prefix)
		out.Int(int(in.DefPenaltyYards))
	}
	{
		const prefix string = ",\"Score1Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score1Q))
	}
	{
		const prefix string = ",\"Score2Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score2Q))
	}
	{
		const prefix string = ",\"Score3Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score3Q))
	}
	{
		const prefix string = ",\"Score4Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score4Q))
	}
	{
		const prefix string = ",\"Score5Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score5Q))
	}
	{
		const prefix string = ",\"Score6Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score6Q))
	}
	{
		const prefix string = ",\"Score7Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score7Q))
	}
	{
		const prefix string = ",\"ScoreOT\":"
		out.RawString(prefix)
		out.Int(int(in.ScoreOT))
	}
	{
		const prefix string = ",\"OffensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.OffensiveScheme))
	}
	{
		const prefix string = ",\"DefensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.DefensiveScheme))
	}
	{
		const prefix string = ",\"OffensiveSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.OffensiveSnaps))
	}
	{
		const prefix string = ",\"DefensiveSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DefensiveSnaps))
	}
	{
		const prefix string = ",\"SpecialTeamSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SpecialTeamSnaps))
	}
	{
		const prefix string = ",\"GameType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GameType))
	}
	{
		const prefix string = ",\"RevealResults\":"
		out.RawString(prefix)
		out.Bool(bool(in.RevealResults))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs36(in *jlexer.Lexer, out *structs.NFLTeamStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "GameID":
			out.GameID = uint(in.Uint())
		case "WeekID":
			out.WeekID = uint(in.Uint())
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "OpposingTeam":
			out.OpposingTeam = string(in.String())
		case "IsPreseasonGame":
			out.IsPreseasonGame = bool(in.Bool())
		case "PointsScored":
			out.PointsScored = int(in.Int())
		case "PointsAgainst":
			out.PointsAgainst = int(in.Int())
		case "TwoPointTries":
			out.TwoPointTries = int(in.Int())
		case "TwoPointSucceed":
			out.TwoPointSucceed = int(in.Int())
		case "PassingYards":
			out.PassingYards = int(in.Int())
		case "PassingAttempts":
			out.PassingAttempts = int(in.Int())
		case "PassingCompletions":
			out.PassingCompletions = int(in.Int())
		case "LongestPass":
			out.LongestPass = int(in.Int())
		case "PassingTouchdowns":
			out.PassingTouchdowns = int(in.Int())
		case "PassingInterceptions":
			out.PassingInterceptions = int(in.Int())
		case "QBRating":
			out.QBRating = int(in.Int())
		case "QBSacks":
			out.QBSacks = int(in.Int())
		case "RushAttempts":
			out.RushAttempts = int(in.Int())
		case "RushingYards":
			out.RushingYards = int(in.Int())
		case "RushingYardsPerAttempt":
			out.RushingYardsPerAttempt = float64(in.Float64())
		case "LongestRush":
			out.LongestRush = int(in.Int())
		case "RushingTouchdowns":
			out.RushingTouchdowns = int(in.Int())
		case "RushingFumbles":
			out.RushingFumbles = int(in.Int())
		case "ReceivingTargets":
			out.ReceivingTargets = int(in.Int())
		case "ReceivingCatches":
			out.ReceivingCatches = int(in.Int())
		case "ReceivingYards":
			out.ReceivingYards = int(in.Int())
		case "YardsPerCatch":
			out.YardsPerCatch = float64(in.Float64())
		case "ReceivingTouchdowns":
			out.ReceivingTouchdowns = int(in.Int())
		case "ReceivingFumbles":
			out.ReceivingFumbles = int(in.Int())
		case "PassingYardsAllowed":
			out.PassingYardsAllowed = int(in.Int())
		case "PassingTDsAllowed":
			out.PassingTDsAllowed = int(in.Int())
		case "PassingCompletionsAllowed":
			out.PassingCompletionsAllowed = int(in.Int())
		case "RushingYardsAllowed":
			out.RushingYardsAllowed = int(in.Int())
		case "RushingTDsAllowed":
			out.RushingTDsAllowed = int(in.Int())
		case "RushingYardsPerAttemptAllowed":
			out.RushingYardsPerAttemptAllowed = float64(in.Float64())
		case "SoloTackles":
			out.SoloTackles = int(in.Int())
		case "AssistedTackles":
			out.AssistedTackles = int(in.Int())
		case "TacklesForLoss":
			out.TacklesForLoss = float64(in.Float64())
		case "DefensiveSacks":
			out.DefensiveSacks = float64(in.Float64())
		case "ForcedFumbles":
			out.ForcedFumbles = int(in.Int())
		case "FumblesRecovered":
			out.FumblesRecovered = int(in.Int())
		case "DefensiveInterceptions":
			out.DefensiveInterceptions = int(in.Int())
		case "TurnoverYards":
			out.TurnoverYards = int(in.Int())
		case "DefensiveTDs":
			out.DefensiveTDs = int(in.Int())
		case "Safeties":
			out.Safeties = int(in.Int())
		case "ExtraPointsMade":
			out.ExtraPointsMade = int(in.Int())
		case "ExtraPointsAttempted":
			out.ExtraPointsAttempted = int(in.Int())
		case "ExtraPointPercentage":
			out.ExtraPointPercentage = float64(in.Float64())
		case "FieldGoalsMade":
			out.FieldGoalsMade = int(in.Int())
		case "FieldGoalsAttempted":
			out.FieldGoalsAttempted = int(in.Int())
		case "FieldGoalsPercentage":
			out.FieldGoalsPercentage = float64(in.Float64())
		case "LongestFieldGoal":
			out.LongestFieldGoal = int(in.Int())
		case "KickoffTBs":
			out.KickoffTBs = int(in.Int())
		case "PuntTBs":
			out.PuntTBs = int(in.Int())
		case "Punts":
			out.Punts = int(in.Int())
		case "PuntYards":
			out.PuntYards = int(in.Int())
		case "PuntsInside20":
			out.PuntsInside20 = int(in.Int())
		case "PuntAverage":
			out.PuntAverage = float64(in.Float64())
		case "Inside20YardLine":
			out.Inside20YardLine = int(in.Int())
		case "KickReturnYards":
			out.KickReturnYards = int(in.Int())
		case "KickReturnTDs":
			out.KickReturnTDs = int(in.Int())
		case "PuntReturnYards":
			out.PuntReturnYards = int(in.Int())
		case "PuntReturnTDs":
			out.PuntReturnTDs = int(in.Int())
		case "OffensivePenalties":
			out.OffensivePenalties = int(in.Int())
		case "DefensivePenalties":
			out.DefensivePenalties = int(in.Int())
		case "OffPenaltyYards":
			out.OffPenaltyYards = int(in.Int())
		case "DefPenaltyYards":
			out.DefPenaltyYards = int(in.Int())
		case "Score1Q":
			out.Score1Q = int(in.Int())
		case "Score2Q":
			out.Score2Q = int(in.Int())
		case "Score3Q":
			out.Score3Q = int(in.Int())
		case "Score4Q":
			out.Score4Q = int(in.Int())
		case "Score5Q":
			out.Score5Q = int(in.Int())
		case "Score6Q":
			out.Score6Q = int(in.Int())
		case "Score7Q":
			out.Score7Q = int(in.Int())
		case "ScoreOT":
			out.ScoreOT = int(in.Int())
		case "OffensiveScheme":
			out.OffensiveScheme = string(in.String())
		case "DefensiveScheme":
			out.DefensiveScheme = string(in.String())
		case "OffensiveSnaps":
			out.OffensiveSnaps = uint16(in.Uint16())
		case "DefensiveSnaps":
			out.DefensiveSnaps = uint16(in.Uint16())
		case "SpecialTeamSnaps":
			out.SpecialTeamSnaps = uint16(in.Uint16())
		case "GameType":
			out.GameType = uint8(in.Uint8())
		case "RevealResults":
			out.RevealResults = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs36(out *jwriter.Writer, in structs.NFLTeamStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"GameID\":"
		out.RawString(prefix)
		out.Uint(uint(in.GameID))
	}
	{
		const prefix string = ",\"WeekID\":"
		out.RawString(prefix)
		out.Uint(uint(in.WeekID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"OpposingTeam\":"
		out.RawString(prefix)
		out.String(string(in.OpposingTeam))
	}
	{
		const prefix string = ",\"IsPreseasonGame\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPreseasonGame))
	}
	{
		const prefix string = ",\"PointsScored\":"
		out.RawString(prefix)
		out.Int(int(in.PointsScored))
	}
	{
		const prefix string = ",\"PointsAgainst\":"
		out.RawString(prefix)
		out.Int(int(in.PointsAgainst))
	}
	{
		const prefix string = ",\"TwoPointTries\":"
		out.RawString(prefix)
		out.Int(int(in.TwoPointTries))
	}
	{
		const prefix string = ",\"TwoPointSucceed\":"
		out.RawString(prefix)
		out.Int(int(in.TwoPointSucceed))
	}
	{
		const prefix string = ",\"PassingYards\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYards))
	}
	{
		const prefix string = ",\"PassingAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.PassingAttempts))
	}
	{
		const prefix string = ",\"PassingCompletions\":"
		out.RawString(prefix)
		out.Int(int(in.PassingCompletions))
	}
	{
		const prefix string = ",\"LongestPass\":"
		out.RawString(prefix)
		out.Int(int(in.LongestPass))
	}
	{
		const prefix string = ",\"PassingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTouchdowns))
	}
	{
		const prefix string = ",\"PassingInterceptions\":"
		out.RawString(prefix)
		out.Int(int(in.PassingInterceptions))
	}
	{
		const prefix string = ",\"QBRating\":"
		out.RawString(prefix)
		out.Int(int(in.QBRating))
	}
	{
		const prefix string = ",\"QBSacks\":"
		out.RawString(prefix)
		out.Int(int(in.QBSacks))
	}
	{
		const prefix string = ",\"RushAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.RushAttempts))
	}
	{
		const prefix string = ",\"RushingYards\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYards))
	}
	{
		const prefix string = ",\"RushingYardsPerAttempt\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingYardsPerAttempt))
	}
	{
		const prefix string = ",\"LongestRush\":"
		out.RawString(prefix)
		out.Int(int(in.LongestRush))
	}
	{
		const prefix string = ",\"RushingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTouchdowns))
	}
	{
		const prefix string = ",\"RushingFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.RushingFumbles))
	}
	{
		const prefix string = ",\"ReceivingTargets\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTargets))
	}
	{
		const prefix string = ",\"ReceivingCatches\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingCatches))
	}
	{
		const prefix string = ",\"ReceivingYards\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYards))
	}
	{
		const prefix string = ",\"YardsPerCatch\":"
		out.RawString(prefix)
		out.Float64(float64(in.YardsPerCatch))
	}
	{
		const prefix string = ",\"ReceivingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTouchdowns))
	}
	{
		const prefix string = ",\"ReceivingFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingFumbles))
	}
	{
		const prefix string = ",\"PassingYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsAllowed))
	}
	{
		const prefix string = ",\"PassingTDsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDsAllowed))
	}
	{
		const prefix string = ",\"PassingCompletionsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingCompletionsAllowed))
	}
	{
		const prefix string = ",\"RushingYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsAllowed))
	}
	{
		const prefix string = ",\"RushingTDsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDsAllowed))
	}
	{
		const prefix string = ",\"RushingYardsPerAttemptAllowed\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingYardsPerAttemptAllowed))
	}
	{
		const prefix string = ",\"SoloTackles\":"
		out.RawString(prefix)
		out.Int(int(in.SoloTackles))
	}
	{
		const prefix string = ",\"AssistedTackles\":"
		out.RawString(prefix)
		out.Int(int(in.AssistedTackles))
	}
	{
		const prefix string = ",\"TacklesForLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.TacklesForLoss))
	}
	{
		const prefix string = ",\"DefensiveSacks\":"
		out.RawString(prefix)
		out.Float64(float64(in.DefensiveSacks))
	}
	{
		const prefix string = ",\"ForcedFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ForcedFumbles))
	}
	{
		const prefix string = ",\"FumblesRecovered\":"
		out.RawString(prefix)
		out.Int(int(in.FumblesRecovered))
	}
	{
		const prefix string = ",\"DefensiveInterceptions\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveInterceptions))
	}
	{
		const prefix string = ",\"TurnoverYards\":"
		out.RawString(prefix)
		out.Int(int(in.TurnoverYards))
	}
	{
		const prefix string = ",\"DefensiveTDs\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveTDs))
	}
	{
		const prefix string = ",\"Safeties\":"
		out.RawString(prefix)
		out.Int(int(in.Safeties))
	}
	{
		const prefix string = ",\"ExtraPointsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsMade))
	}
	{
		const prefix string = ",\"ExtraPointsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsAttempted))
	}
	{
		const prefix string = ",\"ExtraPointPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.ExtraPointPercentage))
	}
	{
		const prefix string = ",\"FieldGoalsMade\":"
		out.RawString(prefix)
		out.Int(int(in.FieldGoalsMade))
	}
	{
		const prefix string = ",\"FieldGoalsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.FieldGoalsAttempted))
	}
	{
		const prefix string = ",\"FieldGoalsPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.FieldGoalsPercentage))
	}
	{
		const prefix string = ",\"LongestFieldGoal\":"
		out.RawString(prefix)
		out.Int(int(in.LongestFieldGoal))
	}
	{
		const prefix string = ",\"KickoffTBs\":"
		out.RawString(prefix)
		out.Int(int(in.KickoffTBs))
	}
	{
		const prefix string = ",\"PuntTBs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntTBs))
	}
	{
		const prefix string = ",\"Punts\":"
		out.RawString(prefix)
		out.Int(int(in.Punts))
	}
	{
		const prefix string = ",\"PuntYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntYards))
	}
	{
		const prefix string = ",\"PuntsInside20\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsInside20))
	}
	{
		const prefix string = ",\"PuntAverage\":"
		out.RawString(prefix)
		out.Float64(float64(in.PuntAverage))
	}
	{
		const prefix string = ",\"Inside20YardLine\":"
		out.RawString(prefix)
		out.Int(int(in.Inside20YardLine))
	}
	{
		const prefix string = ",\"KickReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnYards))
	}
	{
		const prefix string = ",\"KickReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnTDs))
	}
	{
		const prefix string = ",\"PuntReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnYards))
	}
	{
		const prefix string = ",\"PuntReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnTDs))
	}
	{
		const prefix string = ",\"OffensivePenalties\":"
		out.RawString(prefix)
		out.Int(int(in.OffensivePenalties))
	}
	{
		const prefix string = ",\"DefensivePenalties\":"
		out.RawString(prefix)
		out.Int(int(in.DefensivePenalties))
	}
	{
		const prefix string = ",\"OffPenaltyYards\":"
		out.RawString(prefix)
		out.Int(int(in.OffPenaltyYards))
	}
	{
		const prefix string = ",\"DefPenaltyYards\":"
		out.RawString(prefix)
		out.Int(int(in.DefPenaltyYards))
	}
	{
		const prefix string = ",\"Score1Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score1Q))
	}
	{
		const prefix string = ",\"Score2Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score2Q))
	}
	{
		const prefix string = ",\"Score3Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score3Q))
	}
	{
		const prefix string = ",\"Score4Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score4Q))
	}
	{
		const prefix string = ",\"Score5Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score5Q))
	}
	{
		const prefix string = ",\"Score6Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score6Q))
	}
	{
		const prefix string = ",\"Score7Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score7Q))
	}
	{
		const prefix string = ",\"ScoreOT\":"
		out.RawString(prefix)
		out.Int(int(in.ScoreOT))
	}
	{
		const prefix string = ",\"OffensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.OffensiveScheme))
	}
	{
		const prefix string = ",\"DefensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.DefensiveScheme))
	}
	{
		const prefix string = ",\"OffensiveSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.OffensiveSnaps))
	}
	{
		const prefix string = ",\"DefensiveSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DefensiveSnaps))
	}
	{
		const prefix string = ",\"SpecialTeamSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SpecialTeamSnaps))
	}
	{
		const prefix string = ",\"GameType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GameType))
	}
	{
		const prefix string = ",\"RevealResults\":"
		out.RawString(prefix)
		out.Bool(bool(in.RevealResults))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs35(in *jlexer.Lexer, out *structs.NFLDraftPick) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "Season":
			out.Season = uint(in.Uint())
		case "DrafteeID":
			out.DrafteeID = uint(in.Uint())
		case "DraftRound":
			out.DraftRound = uint(in.Uint())
		case "DraftNumber":
			out.DraftNumber = uint(in.Uint())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "OriginalTeamID":
			out.OriginalTeamID = uint(in.Uint())
		case "OriginalTeam":
			out.OriginalTeam = string(in.String())
		case "PreviousTeamID":
			out.PreviousTeamID = uint(in.Uint())
		case "PreviousTeam":
			out.PreviousTeam = string(in.String())
		case "DraftValue":
			out.DraftValue = float64(in.Float64())
		case "Notes":
			out.Notes = string(in.String())
		case "SelectedPlayerID":
			out.SelectedPlayerID = uint(in.Uint())
		case "SelectedPlayerName":
			out.SelectedPlayerName = string(in.String())
		case "SelectedPlayerPosition":
			out.SelectedPlayerPosition = string(in.String())
		case "IsCompensation":
			out.IsCompensation = bool(in.Bool())
		case "IsVoid":
			out.IsVoid = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs35(out *jwriter.Writer, in structs.NFLDraftPick) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"Season\":"
		out.RawString(prefix)
		out.Uint(uint(in.Season))
	}
	{
		const prefix string = ",\"DrafteeID\":"
		out.RawString(prefix)
		out.Uint(uint(in.DrafteeID))
	}
	{
		const prefix string = ",\"DraftRound\":"
		out.RawString(prefix)
		out.Uint(uint(in.DraftRound))
	}
	{
		const prefix string = ",\"DraftNumber\":"
		out.RawString(prefix)
		out.Uint(uint(in.DraftNumber))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"OriginalTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.OriginalTeamID))
	}
	{
		const prefix string = ",\"OriginalTeam\":"
		out.RawString(prefix)
		out.String(string(in.OriginalTeam))
	}
	{
		const prefix string = ",\"PreviousTeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.PreviousTeamID))
	}
	{
		const prefix string = ",\"PreviousTeam\":"
		out.RawString(prefix)
		out.String(string(in.PreviousTeam))
	}
	{
		const prefix string = ",\"DraftValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.DraftValue))
	}
	{
		const prefix string = ",\"Notes\":"
		out.RawString(prefix)
		out.String(string(in.Notes))
	}
	{
		const prefix string = ",\"SelectedPlayerID\":"
		out.RawString(prefix)
		out.Uint(uint(in.SelectedPlayerID))
	}
	{
		const prefix string = ",\"SelectedPlayerName\":"
		out.RawString(prefix)
		out.String(string(in.SelectedPlayerName))
	}
	{
		const prefix string = ",\"SelectedPlayerPosition\":"
		out.RawString(prefix)
		out.String(string(in.SelectedPlayerPosition))
	}
	{
		const prefix string = ",\"IsCompensation\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCompensation))
	}
	{
		const prefix string = ",\"IsVoid\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsVoid))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs32(in *jlexer.Lexer, out *structs.CollegeGameplan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = int(in.Int())
		case "OffensiveScheme":
			out.OffensiveScheme = string(in.String())
		case "OffRunToPassRatio":
			out.OffRunToPassRatio = int(in.Int())
		case "DefensiveScheme":
			out.DefensiveScheme = string(in.String())
		case "BlitzSafeties":
			out.BlitzSafeties = bool(in.Bool())
		case "BlitzCorners":
			out.BlitzCorners = bool(in.Bool())
		case "LinebackerCoverage":
			out.LinebackerCoverage = string(in.String())
		case "CornersCoverage":
			out.CornersCoverage = string(in.String())
		case "SafetiesCoverage":
			out.SafetiesCoverage = string(in.String())
		case "DiveFocus":
			out.DiveFocus = int(in.Int())
		case "PitchFocus":
			out.PitchFocus = int(in.Int())
		case "PrimaryHB":
			out.PrimaryHB = int(in.Int())
		case "MaximumFGDistance":
			out.MaximumFGDistance = int(in.Int())
		case "GoFor4AndShort":
			out.GoFor4AndShort = int(in.Int())
		case "GoFor4AndLong":
			out.GoFor4AndLong = int(in.Int())
		case "HasSchemePenalty":
			out.HasSchemePenalty = bool(in.Bool())
		case "OffenseSchemePenalty":
			out.OffenseSchemePenalty = uint(in.Uint())
		case "DefenseSchemePenalty":
			out.DefenseSchemePenalty = uint(in.Uint())
		case "DefaultOffense":
			out.DefaultOffense = bool(in.Bool())
		case "DefaultDefense":
			out.DefaultDefense = bool(in.Bool())
		case "PreviousWeekBye":
			out.PreviousWeekBye = bool(in.Bool())
		case "FocusPlays":
			out.FocusPlays = string(in.String())
		case "DoubleTeam":
			out.DoubleTeam = int(in.Int())
		case "DefFormation1":
			out.DefFormation1 = string(in.String())
		case "DefFormation1RunToPass":
			out.DefFormation1RunToPass = int(in.Int())
		case "DefFormation1BlitzWeight":
			out.DefFormation1BlitzWeight = int(in.Int())
		case "DefFormation1BlitzAggression":
			out.DefFormation1BlitzAggression = string(in.String())
		case "DefFormation2":
			out.DefFormation2 = string(in.String())
		case "DefFormation2RunToPass":
			out.DefFormation2RunToPass = int(in.Int())
		case "DefFormation2BlitzWeight":
			out.DefFormation2BlitzWeight = int(in.Int())
		case "DefFormation2BlitzAggression":
			out.DefFormation2BlitzAggression = string(in.String())
		case "DefFormation3":
			out.DefFormation3 = string(in.String())
		case "DefFormation3RunToPass":
			out.DefFormation3RunToPass = int(in.Int())
		case "DefFormation3BlitzWeight":
			out.DefFormation3BlitzWeight = int(in.Int())
		case "DefFormation3BlitzAggression":
			out.DefFormation3BlitzAggression = string(in.String())
		case "DefFormation4":
			out.DefFormation4 = string(in.String())
		case "DefFormation4RunToPass":
			out.DefFormation4RunToPass = int(in.Int())
		case "DefFormation4BlitzWeight":
			out.DefFormation4BlitzWeight = int(in.Int())
		case "DefFormation4BlitzAggression":
			out.DefFormation4BlitzAggression = string(in.String())
		case "DefFormation5":
			out.DefFormation5 = string(in.String())
		case "DefFormation5RunToPass":
			out.DefFormation5RunToPass = int(in.Int())
		case "DefFormation5BlitzWeight":
			out.DefFormation5BlitzWeight = int(in.Int())
		case "DefFormation5BlitzAggression":
			out.DefFormation5BlitzAggression = string(in.String())
		case "OffFormation1Name":
			out.OffFormation1Name = string(in.String())
		case "OffForm1Weight":
			out.OffForm1Weight = int(in.Int())
		case "OffForm1TraditionalRun":
			out.OffForm1TraditionalRun = int(in.Int())
		case "OffForm1OptionRun":
			out.OffForm1OptionRun = int(in.Int())
		case "OffForm1Pass":
			out.OffForm1Pass = int(in.Int())
		case "OffForm1RPO":
			out.OffForm1RPO = int(in.Int())
		case "OffFormation2Name":
			out.OffFormation2Name = string(in.String())
		case "OffForm2Weight":
			out.OffForm2Weight = int(in.Int())
		case "OffForm2TraditionalRun":
			out.OffForm2TraditionalRun = int(in.Int())
		case "OffForm2OptionRun":
			out.OffForm2OptionRun = int(in.Int())
		case "OffForm2Pass":
			out.OffForm2Pass = int(in.Int())
		case "OffForm2RPO":
			out.OffForm2RPO = int(in.Int())
		case "OffFormation3Name":
			out.OffFormation3Name = string(in.String())
		case "OffForm3Weight":
			out.OffForm3Weight = int(in.Int())
		case "OffForm3TraditionalRun":
			out.OffForm3TraditionalRun = int(in.Int())
		case "OffForm3OptionRun":
			out.OffForm3OptionRun = int(in.Int())
		case "OffForm3Pass":
			out.OffForm3Pass = int(in.Int())
		case "OffForm3RPO":
			out.OffForm3RPO = int(in.Int())
		case "OffFormation4Name":
			out.OffFormation4Name = string(in.String())
		case "OffForm4Weight":
			out.OffForm4Weight = int(in.Int())
		case "OffForm4TraditionalRun":
			out.OffForm4TraditionalRun = int(in.Int())
		case "OffForm4OptionRun":
			out.OffForm4OptionRun = int(in.Int())
		case "OffForm4Pass":
			out.OffForm4Pass = int(in.Int())
		case "OffForm4RPO":
			out.OffForm4RPO = int(in.Int())
		case "OffFormation5Name":
			out.OffFormation5Name = string(in.String())
		case "OffForm5Weight":
			out.OffForm5Weight = int(in.Int())
		case "OffForm5TraditionalRun":
			out.OffForm5TraditionalRun = int(in.Int())
		case "OffForm5OptionRun":
			out.OffForm5OptionRun = int(in.Int())
		case "OffForm5Pass":
			out.OffForm5Pass = int(in.Int())
		case "OffForm5RPO":
			out.OffForm5RPO = int(in.Int())
		case "RunnerDistributionQB":
			out.RunnerDistributionQB = int(in.Int())
		case "RunnerDistributionRB1":
			out.RunnerDistributionRB1 = int(in.Int())
		case "RunnerDistributionRB2":
			out.RunnerDistributionRB2 = int(in.Int())
		case "RunnerDistributionRB3":
			out.RunnerDistributionRB3 = int(in.Int())
		case "RunnerDistributionFB1":
			out.RunnerDistributionFB1 = int(in.Int())
		case "RunnerDistributionFB2":
			out.RunnerDistributionFB2 = int(in.Int())
		case "RunnerDistributionWR":
			out.RunnerDistributionWR = int(in.Int())
		case "RunnerDistributionWRPosition":
			out.RunnerDistributionWRPosition = string(in.String())
		case "RunnerDistributionWRID":
			out.RunnerDistributionWRID = uint(in.Uint())
		case "RunOutsideLeft":
			out.RunOutsideLeft = int(in.Int())
		case "RunOutsideRight":
			out.RunOutsideRight = int(in.Int())
		case "RunInsideLeft":
			out.RunInsideLeft = int(in.Int())
		case "RunInsideRight":
			out.RunInsideRight = int(in.Int())
		case "RunPowerLeft":
			out.RunPowerLeft = int(in.Int())
		case "RunPowerRight":
			out.RunPowerRight = int(in.Int())
		case "RunDrawLeft":
			out.RunDrawLeft = int(in.Int())
		case "RunDrawRight":
			out.RunDrawRight = int(in.Int())
		case "ReadOptionLeft":
			out.ReadOptionLeft = int(in.Int())
		case "ReadOptionRight":
			out.ReadOptionRight = int(in.Int())
		case "SpeedOptionLeft":
			out.SpeedOptionLeft = int(in.Int())
		case "SpeedOptionRight":
			out.SpeedOptionRight = int(in.Int())
		case "InvertedOptionLeft":
			out.InvertedOptionLeft = int(in.Int())
		case "InvertedOptionRight":
			out.InvertedOptionRight = int(in.Int())
		case "TripleOptionLeft":
			out.TripleOptionLeft = int(in.Int())
		case "TripleOptionRight":
			out.TripleOptionRight = int(in.Int())
		case "PassQuick":
			out.PassQuick = int(in.Int())
		case "PassShort":
			out.PassShort = int(in.Int())
		case "PassLong":
			out.PassLong = int(in.Int())
		case "PassDeep":
			out.PassDeep = int(in.Int())
		case "PassScreen":
			out.PassScreen = int(in.Int())
		case "PassPAShort":
			out.PassPAShort = int(in.Int())
		case "PassPALong":
			out.PassPALong = int(in.Int())
		case "PassPADeep":
			out.PassPADeep = int(in.Int())
		case "LeftVsRight":
			out.LeftVsRight = int(in.Int())
		case "ChoiceOutside":
			out.ChoiceOutside = int(in.Int())
		case "ChoiceInside":
			out.ChoiceInside = int(in.Int())
		case "ChoicePower":
			out.ChoicePower = int(in.Int())
		case "PeekOutside":
			out.PeekOutside = int(in.Int())
		case "PeekInside":
			out.PeekInside = int(in.Int())
		case "PeekPower":
			out.PeekPower = int(in.Int())
		case "TargetingWR1":
			out.TargetingWR1 = int(in.Int())
		case "TargetDepthWR1":
			out.TargetDepthWR1 = string(in.String())
		case "TargetingWR2":
			out.TargetingWR2 = int(in.Int())
		case "TargetDepthWR2":
			out.TargetDepthWR2 = string(in.String())
		case "TargetingWR3":
			out.TargetingWR3 = int(in.Int())
		case "TargetDepthWR3":
			out.TargetDepthWR3 = string(in.String())
		case "TargetingWR4":
			out.TargetingWR4 = int(in.Int())
		case "TargetDepthWR4":
			out.TargetDepthWR4 = string(in.String())
		case "TargetingWR5":
			out.TargetingWR5 = int(in.Int())
		case "TargetDepthWR5":
			out.TargetDepthWR5 = string(in.String())
		case "TargetingTE1":
			out.TargetingTE1 = int(in.Int())
		case "TargetDepthTE1":
			out.TargetDepthTE1 = string(in.String())
		case "TargetingTE2":
			out.TargetingTE2 = int(in.Int())
		case "TargetDepthTE2":
			out.TargetDepthTE2 = string(in.String())
		case "TargetingTE3":
			out.TargetingTE3 = int(in.Int())
		case "TargetDepthTE3":
			out.TargetDepthTE3 = string(in.String())
		case "TargetingRB1":
			out.TargetingRB1 = int(in.Int())
		case "TargetDepthRB1":
			out.TargetDepthRB1 = string(in.String())
		case "TargetingRB2":
			out.TargetingRB2 = int(in.Int())
		case "TargetDepthRB2":
			out.TargetDepthRB2 = string(in.String())
		case "TargetingFB1":
			out.TargetingFB1 = int(in.Int())
		case "TargetDepthFB1":
			out.TargetDepthFB1 = string(in.String())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs32(out *jwriter.Writer, in structs.CollegeGameplan) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"OffensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.OffensiveScheme))
	}
	{
		const prefix string = ",\"OffRunToPassRatio\":"
		out.RawString(prefix)
		out.Int(int(in.OffRunToPassRatio))
	}
	{
		const prefix string = ",\"DefensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.DefensiveScheme))
	}
	{
		const prefix string = ",\"BlitzSafeties\":"
		out.RawString(prefix)
		out.Bool(bool(in.BlitzSafeties))
	}
	{
		const prefix string = ",\"BlitzCorners\":"
		out.RawString(prefix)
		out.Bool(bool(in.BlitzCorners))
	}
	{
		const prefix string = ",\"LinebackerCoverage\":"
		out.RawString(prefix)
		out.String(string(in.LinebackerCoverage))
	}
	{
		const prefix string = ",\"CornersCoverage\":"
		out.RawString(prefix)
		out.String(string(in.CornersCoverage))
	}
	{
		const prefix string = ",\"SafetiesCoverage\":"
		out.RawString(prefix)
		out.String(string(in.SafetiesCoverage))
	}
	{
		const prefix string = ",\"DiveFocus\":"
		out.RawString(prefix)
		out.Int(int(in.DiveFocus))
	}
	{
		const prefix string = ",\"PitchFocus\":"
		out.RawString(prefix)
		out.Int(int(in.PitchFocus))
	}
	{
		const prefix string = ",\"PrimaryHB\":"
		out.RawString(prefix)
		out.Int(int(in.PrimaryHB))
	}
	{
		const prefix string = ",\"MaximumFGDistance\":"
		out.RawString(prefix)
		out.Int(int(in.MaximumFGDistance))
	}
	{
		const prefix string = ",\"GoFor4AndShort\":"
		out.RawString(prefix)
		out.Int(int(in.GoFor4AndShort))
	}
	{
		const prefix string = ",\"GoFor4AndLong\":"
		out.RawString(prefix)
		out.Int(int(in.GoFor4AndLong))
	}
	{
		const prefix string = ",\"HasSchemePenalty\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasSchemePenalty))
	}
	{
		const prefix string = ",\"OffenseSchemePenalty\":"
		out.RawString(prefix)
		out.Uint(uint(in.OffenseSchemePenalty))
	}
	{
		const prefix string = ",\"DefenseSchemePenalty\":"
		out.RawString(prefix)
		out.Uint(uint(in.DefenseSchemePenalty))
	}
	{
		const prefix string = ",\"DefaultOffense\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultOffense))
	}
	{
		const prefix string = ",\"DefaultDefense\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultDefense))
	}
	{
		const prefix string = ",\"PreviousWeekBye\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreviousWeekBye))
	}
	{
		const prefix string = ",\"FocusPlays\":"
		out.RawString(prefix)
		out.String(string(in.FocusPlays))
	}
	{
		const prefix string = ",\"DoubleTeam\":"
		out.RawString(prefix)
		out.Int(int(in.DoubleTeam))
	}
	{
		const prefix string = ",\"DefFormation1\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation1))
	}
	{
		const prefix string = ",\"DefFormation1RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation1RunToPass))
	}
	{
		const prefix string = ",\"DefFormation1BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation1BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation1BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation1BlitzAggression))
	}
	{
		const prefix string = ",\"DefFormation2\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation2))
	}
	{
		const prefix string = ",\"DefFormation2RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation2RunToPass))
	}
	{
		const prefix string = ",\"DefFormation2BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation2BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation2BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation2BlitzAggression))
	}
	{
		const prefix string = ",\"DefFormation3\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation3))
	}
	{
		const prefix string = ",\"DefFormation3RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation3RunToPass))
	}
	{
		const prefix string = ",\"DefFormation3BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation3BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation3BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation3BlitzAggression))
	}
	{
		const prefix string = ",\"DefFormation4\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation4))
	}
	{
		const prefix string = ",\"DefFormation4RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation4RunToPass))
	}
	{
		const prefix string = ",\"DefFormation4BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation4BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation4BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation4BlitzAggression))
	}
	{
		const prefix string = ",\"DefFormation5\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation5))
	}
	{
		const prefix string = ",\"DefFormation5RunToPass\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation5RunToPass))
	}
	{
		const prefix string = ",\"DefFormation5BlitzWeight\":"
		out.RawString(prefix)
		out.Int(int(in.DefFormation5BlitzWeight))
	}
	{
		const prefix string = ",\"DefFormation5BlitzAggression\":"
		out.RawString(prefix)
		out.String(string(in.DefFormation5BlitzAggression))
	}
	{
		const prefix string = ",\"OffFormation1Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation1Name))
	}
	{
		const prefix string = ",\"OffForm1Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1Weight))
	}
	{
		const prefix string = ",\"OffForm1TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm1OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1OptionRun))
	}
	{
		const prefix string = ",\"OffForm1Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1Pass))
	}
	{
		const prefix string = ",\"OffForm1RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm1RPO))
	}
	{
		const prefix string = ",\"OffFormation2Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation2Name))
	}
	{
		const prefix string = ",\"OffForm2Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2Weight))
	}
	{
		const prefix string = ",\"OffForm2TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm2OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2OptionRun))
	}
	{
		const prefix string = ",\"OffForm2Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2Pass))
	}
	{
		const prefix string = ",\"OffForm2RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm2RPO))
	}
	{
		const prefix string = ",\"OffFormation3Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation3Name))
	}
	{
		const prefix string = ",\"OffForm3Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3Weight))
	}
	{
		const prefix string = ",\"OffForm3TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm3OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3OptionRun))
	}
	{
		const prefix string = ",\"OffForm3Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3Pass))
	}
	{
		const prefix string = ",\"OffForm3RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm3RPO))
	}
	{
		const prefix string = ",\"OffFormation4Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation4Name))
	}
	{
		const prefix string = ",\"OffForm4Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4Weight))
	}
	{
		const prefix string = ",\"OffForm4TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm4OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4OptionRun))
	}
	{
		const prefix string = ",\"OffForm4Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4Pass))
	}
	{
		const prefix string = ",\"OffForm4RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm4RPO))
	}
	{
		const prefix string = ",\"OffFormation5Name\":"
		out.RawString(prefix)
		out.String(string(in.OffFormation5Name))
	}
	{
		const prefix string = ",\"OffForm5Weight\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5Weight))
	}
	{
		const prefix string = ",\"OffForm5TraditionalRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5TraditionalRun))
	}
	{
		const prefix string = ",\"OffForm5OptionRun\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5OptionRun))
	}
	{
		const prefix string = ",\"OffForm5Pass\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5Pass))
	}
	{
		const prefix string = ",\"OffForm5RPO\":"
		out.RawString(prefix)
		out.Int(int(in.OffForm5RPO))
	}
	{
		const prefix string = ",\"RunnerDistributionQB\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionQB))
	}
	{
		const prefix string = ",\"RunnerDistributionRB1\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionRB1))
	}
	{
		const prefix string = ",\"RunnerDistributionRB2\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionRB2))
	}
	{
		const prefix string = ",\"RunnerDistributionRB3\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionRB3))
	}
	{
		const prefix string = ",\"RunnerDistributionFB1\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionFB1))
	}
	{
		const prefix string = ",\"RunnerDistributionFB2\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionFB2))
	}
	{
		const prefix string = ",\"RunnerDistributionWR\":"
		out.RawString(prefix)
		out.Int(int(in.RunnerDistributionWR))
	}
	{
		const prefix string = ",\"RunnerDistributionWRPosition\":"
		out.RawString(prefix)
		out.String(string(in.RunnerDistributionWRPosition))
	}
	{
		const prefix string = ",\"RunnerDistributionWRID\":"
		out.RawString(prefix)
		out.Uint(uint(in.RunnerDistributionWRID))
	}
	{
		const prefix string = ",\"RunOutsideLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RunOutsideLeft))
	}
	{
		const prefix string = ",\"RunOutsideRight\":"
		out.RawString(prefix)
		out.Int(int(in.RunOutsideRight))
	}
	{
		const prefix string = ",\"RunInsideLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RunInsideLeft))
	}
	{
		const prefix string = ",\"RunInsideRight\":"
		out.RawString(prefix)
		out.Int(int(in.RunInsideRight))
	}
	{
		const prefix string = ",\"RunPowerLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RunPowerLeft))
	}
	{
		const prefix string = ",\"RunPowerRight\":"
		out.RawString(prefix)
		out.Int(int(in.RunPowerRight))
	}
	{
		const prefix string = ",\"RunDrawLeft\":"
		out.RawString(prefix)
		out.Int(int(in.RunDrawLeft))
	}
	{
		const prefix string = ",\"RunDrawRight\":"
		out.RawString(prefix)
		out.Int(int(in.RunDrawRight))
	}
	{
		const prefix string = ",\"ReadOptionLeft\":"
		out.RawString(prefix)
		out.Int(int(in.ReadOptionLeft))
	}
	{
		const prefix string = ",\"ReadOptionRight\":"
		out.RawString(prefix)
		out.Int(int(in.ReadOptionRight))
	}
	{
		const prefix string = ",\"SpeedOptionLeft\":"
		out.RawString(prefix)
		out.Int(int(in.SpeedOptionLeft))
	}
	{
		const prefix string = ",\"SpeedOptionRight\":"
		out.RawString(prefix)
		out.Int(int(in.SpeedOptionRight))
	}
	{
		const prefix string = ",\"InvertedOptionLeft\":"
		out.RawString(prefix)
		out.Int(int(in.InvertedOptionLeft))
	}
	{
		const prefix string = ",\"InvertedOptionRight\":"
		out.RawString(prefix)
		out.Int(int(in.InvertedOptionRight))
	}
	{
		const prefix string = ",\"TripleOptionLeft\":"
		out.RawString(prefix)
		out.Int(int(in.TripleOptionLeft))
	}
	{
		const prefix string = ",\"TripleOptionRight\":"
		out.RawString(prefix)
		out.Int(int(in.TripleOptionRight))
	}
	{
		const prefix string = ",\"PassQuick\":"
		out.RawString(prefix)
		out.Int(int(in.PassQuick))
	}
	{
		const prefix string = ",\"PassShort\":"
		out.RawString(prefix)
		out.Int(int(in.PassShort))
	}
	{
		const prefix string = ",\"PassLong\":"
		out.RawString(prefix)
		out.Int(int(in.PassLong))
	}
	{
		const prefix string = ",\"PassDeep\":"
		out.RawString(prefix)
		out.Int(int(in.PassDeep))
	}
	{
		const prefix string = ",\"PassScreen\":"
		out.RawString(prefix)
		out.Int(int(in.PassScreen))
	}
	{
		const prefix string = ",\"PassPAShort\":"
		out.RawString(prefix)
		out.Int(int(in.PassPAShort))
	}
	{
		const prefix string = ",\"PassPALong\":"
		out.RawString(prefix)
		out.Int(int(in.PassPALong))
	}
	{
		const prefix string = ",\"PassPADeep\":"
		out.RawString(prefix)
		out.Int(int(in.PassPADeep))
	}
	{
		const prefix string = ",\"LeftVsRight\":"
		out.RawString(prefix)
		out.Int(int(in.LeftVsRight))
	}
	{
		const prefix string = ",\"ChoiceOutside\":"
		out.RawString(prefix)
		out.Int(int(in.ChoiceOutside))
	}
	{
		const prefix string = ",\"ChoiceInside\":"
		out.RawString(prefix)
		out.Int(int(in.ChoiceInside))
	}
	{
		const prefix string = ",\"ChoicePower\":"
		out.RawString(prefix)
		out.Int(int(in.ChoicePower))
	}
	{
		const prefix string = ",\"PeekOutside\":"
		out.RawString(prefix)
		out.Int(int(in.PeekOutside))
	}
	{
		const prefix string = ",\"PeekInside\":"
		out.RawString(prefix)
		out.Int(int(in.PeekInside))
	}
	{
		const prefix string = ",\"PeekPower\":"
		out.RawString(prefix)
		out.Int(int(in.PeekPower))
	}
	{
		const prefix string = ",\"TargetingWR1\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR1))
	}
	{
		const prefix string = ",\"TargetDepthWR1\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR1))
	}
	{
		const prefix string = ",\"TargetingWR2\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR2))
	}
	{
		const prefix string = ",\"TargetDepthWR2\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR2))
	}
	{
		const prefix string = ",\"TargetingWR3\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR3))
	}
	{
		const prefix string = ",\"TargetDepthWR3\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR3))
	}
	{
		const prefix string = ",\"TargetingWR4\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR4))
	}
	{
		const prefix string = ",\"TargetDepthWR4\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR4))
	}
	{
		const prefix string = ",\"TargetingWR5\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingWR5))
	}
	{
		const prefix string = ",\"TargetDepthWR5\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthWR5))
	}
	{
		const prefix string = ",\"TargetingTE1\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingTE1))
	}
	{
		const prefix string = ",\"TargetDepthTE1\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthTE1))
	}
	{
		const prefix string = ",\"TargetingTE2\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingTE2))
	}
	{
		const prefix string = ",\"TargetDepthTE2\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthTE2))
	}
	{
		const prefix string = ",\"TargetingTE3\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingTE3))
	}
	{
		const prefix string = ",\"TargetDepthTE3\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthTE3))
	}
	{
		const prefix string = ",\"TargetingRB1\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingRB1))
	}
	{
		const prefix string = ",\"TargetDepthRB1\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthRB1))
	}
	{
		const prefix string = ",\"TargetingRB2\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingRB2))
	}
	{
		const prefix string = ",\"TargetDepthRB2\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthRB2))
	}
	{
		const prefix string = ",\"TargetingFB1\":"
		out.RawString(prefix)
		out.Int(int(in.TargetingFB1))
	}
	{
		const prefix string = ",\"TargetDepthFB1\":"
		out.RawString(prefix)
		out.String(string(in.TargetDepthFB1))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs31(in *jlexer.Lexer, out *structs.Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "League":
			out.League = string(in.String())
		case "NotificationType":
			out.NotificationType = string(in.String())
		case "Message":
			out.Message = string(in.String())
		case "Subject":
			out.Subject = string(in.String())
		case "IsRead":
			out.IsRead = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeletedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs31(out *jwriter.Writer, in structs.Notification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"League\":"
		out.RawString(prefix)
		out.String(string(in.League))
	}
	{
		const prefix string = ",\"NotificationType\":"
		out.RawString(prefix)
		out.String(string(in.NotificationType))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Subject\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	{
		const prefix string = ",\"IsRead\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		out.Raw((in.DeletedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs30(in *jlexer.Lexer, out *structs.CollegeTeam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ConferenceID":
			out.ConferenceID = int(in.Int())
		case "Conference":
			out.Conference = string(in.String())
		case "DivisionID":
			out.DivisionID = int(in.Int())
		case "Division":
			out.Division = string(in.String())
		case "ProgramPrestige":
			out.ProgramPrestige = int(in.Int())
		case "AcademicPrestige":
			out.AcademicPrestige = int(in.Int())
		case "Facilities":
			out.Facilities = int(in.Int())
		case "IsFBS":
			out.IsFBS = bool(in.Bool())
		case "IsActive":
			out.IsActive = bool(in.Bool())
		case "PlayersProgressed":
			out.PlayersProgressed = bool(in.Bool())
		case "RecruitsAdded":
			out.RecruitsAdded = bool(in.Bool())
		case "CollegeCoach":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs38(in, &out.CollegeCoach)
		case "RecruitingProfile":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs9(in, &out.RecruitingProfile)
		case "TeamStats":
			if in.IsNull() {
				in.Skip()
				out.TeamStats = nil
			} else {
				in.Delim('[')
				if out.TeamStats == nil {
					if !in.IsDelim(']') {
						out.TeamStats = make([]structs.CollegeTeamStats, 0, 0)
					} else {
						out.TeamStats = []structs.CollegeTeamStats{}
					}
				} else {
					out.TeamStats = (out.TeamStats)[:0]
				}
				for !in.IsDelim(']') {
					var v164 structs.CollegeTeamStats
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs39(in, &v164)
					out.TeamStats = append(out.TeamStats, v164)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TeamSeasonStats":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs40(in, &out.TeamSeasonStats)
		case "TeamRecord":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs41(in, &out.TeamRecord)
		case "TeamGameplan":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs32(in, &out.TeamGameplan)
		case "TeamDepthChart":
			easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs24(in, &out.TeamDepthChart)
		case "TeamStandings":
			if in.IsNull() {
				in.Skip()
				out.TeamStandings = nil
			} else {
				in.Delim('[')
				if out.TeamStandings == nil {
					if !in.IsDelim(']') {
						out.TeamStandings = make([]structs.CollegeStandings, 0, 0)
					} else {
						out.TeamStandings = []structs.CollegeStandings{}
					}
				} else {
					out.TeamStandings = (out.TeamStandings)[:0]
				}
				for !in.IsDelim(']') {
					var v165 structs.CollegeStandings
					easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs1(in, &v165)
					out.TeamStandings = append(out.TeamStandings, v165)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "TeamName":
			out.TeamName = string(in.String())
		case "Mascot":
			out.Mascot = string(in.String())
		case "TeamAbbr":
			out.TeamAbbr = string(in.String())
		case "Coach":
			out.Coach = string(in.String())
		case "City":
			out.City = string(in.String())
		case "State":
			out.State = string(in.String())
		case "Country":
			out.Country = string(in.String())
		case "StadiumID":
			out.StadiumID = uint(in.Uint())
		case "Stadium":
			out.Stadium = string(in.String())
		case "StadiumCapacity":
			out.StadiumCapacity = int(in.Int())
		case "RecordAttendance":
			out.RecordAttendance = int(in.Int())
		case "Enrollment":
			out.Enrollment = int(in.Int())
		case "FirstPlayed":
			out.FirstPlayed = int(in.Int())
		case "ColorOne":
			out.ColorOne = string(in.String())
		case "ColorTwo":
			out.ColorTwo = string(in.String())
		case "ColorThree":
			out.ColorThree = string(in.String())
		case "DiscordID":
			out.DiscordID = string(in.String())
		case "OverallGrade":
			out.OverallGrade = string(in.String())
		case "OffenseGrade":
			out.OffenseGrade = string(in.String())
		case "DefenseGrade":
			out.DefenseGrade = string(in.String())
		case "SpecialTeamsGrade":
			out.SpecialTeamsGrade = string(in.String())
		case "PenaltyMarks":
			out.PenaltyMarks = uint8(in.Uint8())
		case "JerseyType":
			out.JerseyType = uint8(in.Uint8())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs30(out *jwriter.Writer, in structs.CollegeTeam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ConferenceID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ConferenceID))
	}
	{
		const prefix string = ",\"Conference\":"
		out.RawString(prefix)
		out.String(string(in.Conference))
	}
	{
		const prefix string = ",\"DivisionID\":"
		out.RawString(prefix)
		out.Int(int(in.DivisionID))
	}
	{
		const prefix string = ",\"Division\":"
		out.RawString(prefix)
		out.String(string(in.Division))
	}
	{
		const prefix string = ",\"ProgramPrestige\":"
		out.RawString(prefix)
		out.Int(int(in.ProgramPrestige))
	}
	{
		const prefix string = ",\"AcademicPrestige\":"
		out.RawString(prefix)
		out.Int(int(in.AcademicPrestige))
	}
	{
		const prefix string = ",\"Facilities\":"
		out.RawString(prefix)
		out.Int(int(in.Facilities))
	}
	{
		const prefix string = ",\"IsFBS\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFBS))
	}
	{
		const prefix string = ",\"IsActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"PlayersProgressed\":"
		out.RawString(prefix)
		out.Bool(bool(in.PlayersProgressed))
	}
	{
		const prefix string = ",\"RecruitsAdded\":"
		out.RawString(prefix)
		out.Bool(bool(in.RecruitsAdded))
	}
	{
		const prefix string = ",\"CollegeCoach\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs38(out, in.CollegeCoach)
	}
	{
		const prefix string = ",\"RecruitingProfile\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs9(out, in.RecruitingProfile)
	}
	{
		const prefix string = ",\"TeamStats\":"
		out.RawString(prefix)
		if in.TeamStats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v166, v167 := range in.TeamStats {
				if v166 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs39(out, v167)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TeamSeasonStats\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs40(out, in.TeamSeasonStats)
	}
	{
		const prefix string = ",\"TeamRecord\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs41(out, in.TeamRecord)
	}
	{
		const prefix string = ",\"TeamGameplan\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs32(out, in.TeamGameplan)
	}
	{
		const prefix string = ",\"TeamDepthChart\":"
		out.RawString(prefix)
		easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs24(out, in.TeamDepthChart)
	}
	{
		const prefix string = ",\"TeamStandings\":"
		out.RawString(prefix)
		if in.TeamStandings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v168, v169 := range in.TeamStandings {
				if v168 > 0 {
					out.RawByte(',')
				}
				easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs1(out, v169)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"TeamName\":"
		out.RawString(prefix)
		out.String(string(in.TeamName))
	}
	{
		const prefix string = ",\"Mascot\":"
		out.RawString(prefix)
		out.String(string(in.Mascot))
	}
	{
		const prefix string = ",\"TeamAbbr\":"
		out.RawString(prefix)
		out.String(string(in.TeamAbbr))
	}
	{
		const prefix string = ",\"Coach\":"
		out.RawString(prefix)
		out.String(string(in.Coach))
	}
	{
		const prefix string = ",\"City\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"Country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"StadiumID\":"
		out.RawString(prefix)
		out.Uint(uint(in.StadiumID))
	}
	{
		const prefix string = ",\"Stadium\":"
		out.RawString(prefix)
		out.String(string(in.Stadium))
	}
	{
		const prefix string = ",\"StadiumCapacity\":"
		out.RawString(prefix)
		out.Int(int(in.StadiumCapacity))
	}
	{
		const prefix string = ",\"RecordAttendance\":"
		out.RawString(prefix)
		out.Int(int(in.RecordAttendance))
	}
	{
		const prefix string = ",\"Enrollment\":"
		out.RawString(prefix)
		out.Int(int(in.Enrollment))
	}
	{
		const prefix string = ",\"FirstPlayed\":"
		out.RawString(prefix)
		out.Int(int(in.FirstPlayed))
	}
	{
		const prefix string = ",\"ColorOne\":"
		out.RawString(prefix)
		out.String(string(in.ColorOne))
	}
	{
		const prefix string = ",\"ColorTwo\":"
		out.RawString(prefix)
		out.String(string(in.ColorTwo))
	}
	{
		const prefix string = ",\"ColorThree\":"
		out.RawString(prefix)
		out.String(string(in.ColorThree))
	}
	{
		const prefix string = ",\"DiscordID\":"
		out.RawString(prefix)
		out.String(string(in.DiscordID))
	}
	{
		const prefix string = ",\"OverallGrade\":"
		out.RawString(prefix)
		out.String(string(in.OverallGrade))
	}
	{
		const prefix string = ",\"OffenseGrade\":"
		out.RawString(prefix)
		out.String(string(in.OffenseGrade))
	}
	{
		const prefix string = ",\"DefenseGrade\":"
		out.RawString(prefix)
		out.String(string(in.DefenseGrade))
	}
	{
		const prefix string = ",\"SpecialTeamsGrade\":"
		out.RawString(prefix)
		out.String(string(in.SpecialTeamsGrade))
	}
	{
		const prefix string = ",\"PenaltyMarks\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.PenaltyMarks))
	}
	{
		const prefix string = ",\"JerseyType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.JerseyType))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs41(in *jlexer.Lexer, out *structs.CollegeTeamRecords) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = int(in.Int())
		case "PassingTDCareerHolderID":
			out.PassingTDCareerHolderID = int(in.Int())
		case "PassingTDCareerHolder":
			out.PassingTDCareerHolder = string(in.String())
		case "PassingTDCareerRecord":
			out.PassingTDCareerRecord = int(in.Int())
		case "PassingTDGameHolderID":
			out.PassingTDGameHolderID = int(in.Int())
		case "PassingTDGameHolder":
			out.PassingTDGameHolder = string(in.String())
		case "PassingTDGameRecord":
			out.PassingTDGameRecord = int(in.Int())
		case "PassingTDSeasonHolderID":
			out.PassingTDSeasonHolderID = int(in.Int())
		case "PassingTDSeasonHolder":
			out.PassingTDSeasonHolder = string(in.String())
		case "PassingTDSeasonRecord":
			out.PassingTDSeasonRecord = int(in.Int())
		case "PassingYardsCareerHolderID":
			out.PassingYardsCareerHolderID = int(in.Int())
		case "PassingYardsCareerHolder":
			out.PassingYardsCareerHolder = string(in.String())
		case "PassingYardsCareerRecord":
			out.PassingYardsCareerRecord = int(in.Int())
		case "PassingYardsGameHolderID":
			out.PassingYardsGameHolderID = int(in.Int())
		case "PassingYardsGameHolder":
			out.PassingYardsGameHolder = string(in.String())
		case "PassingYardsGameRecord":
			out.PassingYardsGameRecord = int(in.Int())
		case "PassingYardsSeasonHolderID":
			out.PassingYardsSeasonHolderID = int(in.Int())
		case "PassingYardsSeasonHolder":
			out.PassingYardsSeasonHolder = string(in.String())
		case "PassingYardsSeasonRecord":
			out.PassingYardsSeasonRecord = int(in.Int())
		case "RushingTDCareerHolderID":
			out.RushingTDCareerHolderID = int(in.Int())
		case "RushingTDCareerHolder":
			out.RushingTDCareerHolder = string(in.String())
		case "RushingTDCareerRecord":
			out.RushingTDCareerRecord = int(in.Int())
		case "RushingTDGameHolderID":
			out.RushingTDGameHolderID = int(in.Int())
		case "RushingTDGameHolder":
			out.RushingTDGameHolder = string(in.String())
		case "RushingTDGameRecord":
			out.RushingTDGameRecord = int(in.Int())
		case "RushingTDSeasonHolderID":
			out.RushingTDSeasonHolderID = int(in.Int())
		case "RushingTDSeasonHolder":
			out.RushingTDSeasonHolder = string(in.String())
		case "RushingTDSeasonRecord":
			out.RushingTDSeasonRecord = int(in.Int())
		case "RushingYardsCareerHolderID":
			out.RushingYardsCareerHolderID = int(in.Int())
		case "RushingYardsCareerHolder":
			out.RushingYardsCareerHolder = string(in.String())
		case "RushingYardsCareerRecord":
			out.RushingYardsCareerRecord = int(in.Int())
		case "RushingYardsGameHolderID":
			out.RushingYardsGameHolderID = int(in.Int())
		case "RushingYardsGameHolder":
			out.RushingYardsGameHolder = string(in.String())
		case "RushingYardsGameRecord":
			out.RushingYardsGameRecord = int(in.Int())
		case "RushingYardsSeasonHolderID":
			out.RushingYardsSeasonHolderID = int(in.Int())
		case "RushingYardsSeasonHolder":
			out.RushingYardsSeasonHolder = string(in.String())
		case "RushingYardsSeasonRecord":
			out.RushingYardsSeasonRecord = int(in.Int())
		case "ReceivingTDCareerHolderID":
			out.ReceivingTDCareerHolderID = int(in.Int())
		case "ReceivingTDCareerHolder":
			out.ReceivingTDCareerHolder = string(in.String())
		case "ReceivingTDCareerRecord":
			out.ReceivingTDCareerRecord = int(in.Int())
		case "ReceivingTDGameHolderID":
			out.ReceivingTDGameHolderID = int(in.Int())
		case "ReceivingTDGameHolder":
			out.ReceivingTDGameHolder = string(in.String())
		case "ReceivingTDGameRecord":
			out.ReceivingTDGameRecord = int(in.Int())
		case "ReceivingTDSeasonHolderID":
			out.ReceivingTDSeasonHolderID = int(in.Int())
		case "ReceivingTDSeasonHolder":
			out.ReceivingTDSeasonHolder = string(in.String())
		case "ReceivingTDSeasonRecord":
			out.ReceivingTDSeasonRecord = int(in.Int())
		case "ReceivingYardsCareerHolderID":
			out.ReceivingYardsCareerHolderID = int(in.Int())
		case "ReceivingYardsCareerHolder":
			out.ReceivingYardsCareerHolder = string(in.String())
		case "ReceivingYardsCareerRecord":
			out.ReceivingYardsCareerRecord = int(in.Int())
		case "ReceivingYardsGameHolderID":
			out.ReceivingYardsGameHolderID = int(in.Int())
		case "ReceivingYardsGameHolder":
			out.ReceivingYardsGameHolder = string(in.String())
		case "ReceivingYardsGameRecord":
			out.ReceivingYardsGameRecord = int(in.Int())
		case "ReceivingYardsSeasonHolderID":
			out.ReceivingYardsSeasonHolderID = int(in.Int())
		case "ReceivingYardsSeasonHolder":
			out.ReceivingYardsSeasonHolder = string(in.String())
		case "ReceivingYardsSeasonRecord":
			out.ReceivingYardsSeasonRecord = int(in.Int())
		case "ReceptionsCareerHolderID":
			out.ReceptionsCareerHolderID = int(in.Int())
		case "ReceptionsCareerHolder":
			out.ReceptionsCareerHolder = string(in.String())
		case "ReceptionsCareerRecord":
			out.ReceptionsCareerRecord = int(in.Int())
		case "ReceptionsGameHolderID":
			out.ReceptionsGameHolderID = int(in.Int())
		case "ReceptionsGameHolder":
			out.ReceptionsGameHolder = string(in.String())
		case "ReceptionsGameRecord":
			out.ReceptionsGameRecord = int(in.Int())
		case "ReceptionsSeasonHolderID":
			out.ReceptionsSeasonHolderID = int(in.Int())
		case "ReceptionsSeasonHolder":
			out.ReceptionsSeasonHolder = string(in.String())
		case "ReceptionsSeasonRecord":
			out.ReceptionsSeasonRecord = int(in.Int())
		case "InterceptionsCareerHolderID":
			out.InterceptionsCareerHolderID = int(in.Int())
		case "InterceptionsCareerHolder":
			out.InterceptionsCareerHolder = string(in.String())
		case "InterceptionsCareerRecord":
			out.InterceptionsCareerRecord = int(in.Int())
		case "InterceptionsGameHolderID":
			out.InterceptionsGameHolderID = int(in.Int())
		case "InterceptionsGameHolder":
			out.InterceptionsGameHolder = string(in.String())
		case "InterceptionsGameRecord":
			out.InterceptionsGameRecord = int(in.Int())
		case "InterceptionsSeasonHolderID":
			out.InterceptionsSeasonHolderID = int(in.Int())
		case "InterceptionsSeasonHolder":
			out.InterceptionsSeasonHolder = string(in.String())
		case "InterceptionsSeasonRecord":
			out.InterceptionsSeasonRecord = int(in.Int())
		case "SacksCareerHolderID":
			out.SacksCareerHolderID = int(in.Int())
		case "SacksCareerHolder":
			out.SacksCareerHolder = string(in.String())
		case "SacksCareerRecord":
			out.SacksCareerRecord = int(in.Int())
		case "SacksGameHolderID":
			out.SacksGameHolderID = int(in.Int())
		case "SacksGameHolder":
			out.SacksGameHolder = string(in.String())
		case "SacksGameRecord":
			out.SacksGameRecord = int(in.Int())
		case "SacksSeasonHolderID":
			out.SacksSeasonHolderID = int(in.Int())
		case "SacksSeasonHolder":
			out.SacksSeasonHolder = string(in.String())
		case "SacksSeasonRecord":
			out.SacksSeasonRecord = int(in.Int())
		case "TacklesCareerHolderID":
			out.TacklesCareerHolderID = int(in.Int())
		case "TacklesCareerHolder":
			out.TacklesCareerHolder = string(in.String())
		case "TacklesCareerRecord":
			out.TacklesCareerRecord = int(in.Int())
		case "TacklesGameHolderID":
			out.TacklesGameHolderID = int(in.Int())
		case "TacklesGameHolder":
			out.TacklesGameHolder = string(in.String())
		case "TacklesGameRecord":
			out.TacklesGameRecord = int(in.Int())
		case "TacklesSeasonHolderID":
			out.TacklesSeasonHolderID = int(in.Int())
		case "TacklesSeasonHolder":
			out.TacklesSeasonHolder = string(in.String())
		case "TacklesSeasonRecord":
			out.TacklesSeasonRecord = int(in.Int())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs41(out *jwriter.Writer, in structs.CollegeTeamRecords) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"PassingTDCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDCareerHolderID))
	}
	{
		const prefix string = ",\"PassingTDCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.PassingTDCareerHolder))
	}
	{
		const prefix string = ",\"PassingTDCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDCareerRecord))
	}
	{
		const prefix string = ",\"PassingTDGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDGameHolderID))
	}
	{
		const prefix string = ",\"PassingTDGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.PassingTDGameHolder))
	}
	{
		const prefix string = ",\"PassingTDGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDGameRecord))
	}
	{
		const prefix string = ",\"PassingTDSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDSeasonHolderID))
	}
	{
		const prefix string = ",\"PassingTDSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.PassingTDSeasonHolder))
	}
	{
		const prefix string = ",\"PassingTDSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDSeasonRecord))
	}
	{
		const prefix string = ",\"PassingYardsCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsCareerHolderID))
	}
	{
		const prefix string = ",\"PassingYardsCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.PassingYardsCareerHolder))
	}
	{
		const prefix string = ",\"PassingYardsCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsCareerRecord))
	}
	{
		const prefix string = ",\"PassingYardsGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsGameHolderID))
	}
	{
		const prefix string = ",\"PassingYardsGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.PassingYardsGameHolder))
	}
	{
		const prefix string = ",\"PassingYardsGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsGameRecord))
	}
	{
		const prefix string = ",\"PassingYardsSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsSeasonHolderID))
	}
	{
		const prefix string = ",\"PassingYardsSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.PassingYardsSeasonHolder))
	}
	{
		const prefix string = ",\"PassingYardsSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsSeasonRecord))
	}
	{
		const prefix string = ",\"RushingTDCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDCareerHolderID))
	}
	{
		const prefix string = ",\"RushingTDCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.RushingTDCareerHolder))
	}
	{
		const prefix string = ",\"RushingTDCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDCareerRecord))
	}
	{
		const prefix string = ",\"RushingTDGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDGameHolderID))
	}
	{
		const prefix string = ",\"RushingTDGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.RushingTDGameHolder))
	}
	{
		const prefix string = ",\"RushingTDGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDGameRecord))
	}
	{
		const prefix string = ",\"RushingTDSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDSeasonHolderID))
	}
	{
		const prefix string = ",\"RushingTDSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.RushingTDSeasonHolder))
	}
	{
		const prefix string = ",\"RushingTDSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDSeasonRecord))
	}
	{
		const prefix string = ",\"RushingYardsCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsCareerHolderID))
	}
	{
		const prefix string = ",\"RushingYardsCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.RushingYardsCareerHolder))
	}
	{
		const prefix string = ",\"RushingYardsCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsCareerRecord))
	}
	{
		const prefix string = ",\"RushingYardsGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsGameHolderID))
	}
	{
		const prefix string = ",\"RushingYardsGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.RushingYardsGameHolder))
	}
	{
		const prefix string = ",\"RushingYardsGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsGameRecord))
	}
	{
		const prefix string = ",\"RushingYardsSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsSeasonHolderID))
	}
	{
		const prefix string = ",\"RushingYardsSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.RushingYardsSeasonHolder))
	}
	{
		const prefix string = ",\"RushingYardsSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsSeasonRecord))
	}
	{
		const prefix string = ",\"ReceivingTDCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDCareerHolderID))
	}
	{
		const prefix string = ",\"ReceivingTDCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceivingTDCareerHolder))
	}
	{
		const prefix string = ",\"ReceivingTDCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDCareerRecord))
	}
	{
		const prefix string = ",\"ReceivingTDGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDGameHolderID))
	}
	{
		const prefix string = ",\"ReceivingTDGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceivingTDGameHolder))
	}
	{
		const prefix string = ",\"ReceivingTDGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDGameRecord))
	}
	{
		const prefix string = ",\"ReceivingTDSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDSeasonHolderID))
	}
	{
		const prefix string = ",\"ReceivingTDSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceivingTDSeasonHolder))
	}
	{
		const prefix string = ",\"ReceivingTDSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTDSeasonRecord))
	}
	{
		const prefix string = ",\"ReceivingYardsCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYardsCareerHolderID))
	}
	{
		const prefix string = ",\"ReceivingYardsCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceivingYardsCareerHolder))
	}
	{
		const prefix string = ",\"ReceivingYardsCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYardsCareerRecord))
	}
	{
		const prefix string = ",\"ReceivingYardsGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYardsGameHolderID))
	}
	{
		const prefix string = ",\"ReceivingYardsGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceivingYardsGameHolder))
	}
	{
		const prefix string = ",\"ReceivingYardsGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYardsGameRecord))
	}
	{
		const prefix string = ",\"ReceivingYardsSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYardsSeasonHolderID))
	}
	{
		const prefix string = ",\"ReceivingYardsSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceivingYardsSeasonHolder))
	}
	{
		const prefix string = ",\"ReceivingYardsSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYardsSeasonRecord))
	}
	{
		const prefix string = ",\"ReceptionsCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceptionsCareerHolderID))
	}
	{
		const prefix string = ",\"ReceptionsCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceptionsCareerHolder))
	}
	{
		const prefix string = ",\"ReceptionsCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceptionsCareerRecord))
	}
	{
		const prefix string = ",\"ReceptionsGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceptionsGameHolderID))
	}
	{
		const prefix string = ",\"ReceptionsGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceptionsGameHolder))
	}
	{
		const prefix string = ",\"ReceptionsGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceptionsGameRecord))
	}
	{
		const prefix string = ",\"ReceptionsSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.ReceptionsSeasonHolderID))
	}
	{
		const prefix string = ",\"ReceptionsSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.ReceptionsSeasonHolder))
	}
	{
		const prefix string = ",\"ReceptionsSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.ReceptionsSeasonRecord))
	}
	{
		const prefix string = ",\"InterceptionsCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsCareerHolderID))
	}
	{
		const prefix string = ",\"InterceptionsCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.InterceptionsCareerHolder))
	}
	{
		const prefix string = ",\"InterceptionsCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsCareerRecord))
	}
	{
		const prefix string = ",\"InterceptionsGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsGameHolderID))
	}
	{
		const prefix string = ",\"InterceptionsGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.InterceptionsGameHolder))
	}
	{
		const prefix string = ",\"InterceptionsGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsGameRecord))
	}
	{
		const prefix string = ",\"InterceptionsSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsSeasonHolderID))
	}
	{
		const prefix string = ",\"InterceptionsSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.InterceptionsSeasonHolder))
	}
	{
		const prefix string = ",\"InterceptionsSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.InterceptionsSeasonRecord))
	}
	{
		const prefix string = ",\"SacksCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.SacksCareerHolderID))
	}
	{
		const prefix string = ",\"SacksCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.SacksCareerHolder))
	}
	{
		const prefix string = ",\"SacksCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.SacksCareerRecord))
	}
	{
		const prefix string = ",\"SacksGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.SacksGameHolderID))
	}
	{
		const prefix string = ",\"SacksGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.SacksGameHolder))
	}
	{
		const prefix string = ",\"SacksGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.SacksGameRecord))
	}
	{
		const prefix string = ",\"SacksSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.SacksSeasonHolderID))
	}
	{
		const prefix string = ",\"SacksSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.SacksSeasonHolder))
	}
	{
		const prefix string = ",\"SacksSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.SacksSeasonRecord))
	}
	{
		const prefix string = ",\"TacklesCareerHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.TacklesCareerHolderID))
	}
	{
		const prefix string = ",\"TacklesCareerHolder\":"
		out.RawString(prefix)
		out.String(string(in.TacklesCareerHolder))
	}
	{
		const prefix string = ",\"TacklesCareerRecord\":"
		out.RawString(prefix)
		out.Int(int(in.TacklesCareerRecord))
	}
	{
		const prefix string = ",\"TacklesGameHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.TacklesGameHolderID))
	}
	{
		const prefix string = ",\"TacklesGameHolder\":"
		out.RawString(prefix)
		out.String(string(in.TacklesGameHolder))
	}
	{
		const prefix string = ",\"TacklesGameRecord\":"
		out.RawString(prefix)
		out.Int(int(in.TacklesGameRecord))
	}
	{
		const prefix string = ",\"TacklesSeasonHolderID\":"
		out.RawString(prefix)
		out.Int(int(in.TacklesSeasonHolderID))
	}
	{
		const prefix string = ",\"TacklesSeasonHolder\":"
		out.RawString(prefix)
		out.String(string(in.TacklesSeasonHolder))
	}
	{
		const prefix string = ",\"TacklesSeasonRecord\":"
		out.RawString(prefix)
		out.Int(int(in.TacklesSeasonRecord))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs40(in *jlexer.Lexer, out *structs.CollegeTeamSeasonStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "SeasonID":
			out.SeasonID = uint(in.Uint())
		case "Year":
			out.Year = int(in.Int())
		case "GamesPlayed":
			out.GamesPlayed = int(in.Int())
		case "TotalOffensiveYards":
			out.TotalOffensiveYards = int(in.Int())
		case "TotalYardsAllowed":
			out.TotalYardsAllowed = int(in.Int())
		case "Fumbles":
			out.Fumbles = int(in.Int())
		case "QBRating":
			out.QBRating = float64(in.Float64())
		case "Tackles":
			out.Tackles = float64(in.Float64())
		case "Turnovers":
			out.Turnovers = int(in.Int())
		case "PointsScored":
			out.PointsScored = int(in.Int())
		case "PointsAgainst":
			out.PointsAgainst = int(in.Int())
		case "TwoPointTries":
			out.TwoPointTries = int(in.Int())
		case "TwoPointSucceed":
			out.TwoPointSucceed = int(in.Int())
		case "PassingYards":
			out.PassingYards = int(in.Int())
		case "PassingAttempts":
			out.PassingAttempts = int(in.Int())
		case "PassingCompletions":
			out.PassingCompletions = int(in.Int())
		case "LongestPass":
			out.LongestPass = int(in.Int())
		case "PassingTouchdowns":
			out.PassingTouchdowns = int(in.Int())
		case "PassingInterceptions":
			out.PassingInterceptions = int(in.Int())
		case "QBSacks":
			out.QBSacks = int(in.Int())
		case "RushAttempts":
			out.RushAttempts = int(in.Int())
		case "RushingYards":
			out.RushingYards = int(in.Int())
		case "RushingYardsPerAttempt":
			out.RushingYardsPerAttempt = float64(in.Float64())
		case "LongestRush":
			out.LongestRush = int(in.Int())
		case "RushingTouchdowns":
			out.RushingTouchdowns = int(in.Int())
		case "RushingFumbles":
			out.RushingFumbles = int(in.Int())
		case "ReceivingTargets":
			out.ReceivingTargets = int(in.Int())
		case "ReceivingCatches":
			out.ReceivingCatches = int(in.Int())
		case "ReceivingYards":
			out.ReceivingYards = int(in.Int())
		case "YardsPerCatch":
			out.YardsPerCatch = float64(in.Float64())
		case "ReceivingTouchdowns":
			out.ReceivingTouchdowns = int(in.Int())
		case "ReceivingFumbles":
			out.ReceivingFumbles = int(in.Int())
		case "PassingYardsAllowed":
			out.PassingYardsAllowed = int(in.Int())
		case "PassingTDsAllowed":
			out.PassingTDsAllowed = int(in.Int())
		case "PassingCompletionsAllowed":
			out.PassingCompletionsAllowed = int(in.Int())
		case "RushingYardsAllowed":
			out.RushingYardsAllowed = int(in.Int())
		case "RushingTDsAllowed":
			out.RushingTDsAllowed = int(in.Int())
		case "RushingYardsPerAttemptAllowed":
			out.RushingYardsPerAttemptAllowed = float64(in.Float64())
		case "SoloTackles":
			out.SoloTackles = int(in.Int())
		case "AssistedTackles":
			out.AssistedTackles = int(in.Int())
		case "TacklesForLoss":
			out.TacklesForLoss = float64(in.Float64())
		case "DefensiveSacks":
			out.DefensiveSacks = float64(in.Float64())
		case "ForcedFumbles":
			out.ForcedFumbles = int(in.Int())
		case "FumblesRecovered":
			out.FumblesRecovered = int(in.Int())
		case "DefensiveInterceptions":
			out.DefensiveInterceptions = int(in.Int())
		case "TurnoverYards":
			out.TurnoverYards = int(in.Int())
		case "DefensiveTDs":
			out.DefensiveTDs = int(in.Int())
		case "Safeties":
			out.Safeties = int(in.Int())
		case "ExtraPointsMade":
			out.ExtraPointsMade = int(in.Int())
		case "ExtraPointsAttempted":
			out.ExtraPointsAttempted = int(in.Int())
		case "ExtraPointPercentage":
			out.ExtraPointPercentage = float64(in.Float64())
		case "FieldGoalsMade":
			out.FieldGoalsMade = int(in.Int())
		case "FieldGoalsAttempted":
			out.FieldGoalsAttempted = int(in.Int())
		case "FieldGoalsPercentage":
			out.FieldGoalsPercentage = float64(in.Float64())
		case "LongestFieldGoal":
			out.LongestFieldGoal = int(in.Int())
		case "KickoffTBs":
			out.KickoffTBs = int(in.Int())
		case "PuntTBs":
			out.PuntTBs = int(in.Int())
		case "Punts":
			out.Punts = int(in.Int())
		case "PuntYards":
			out.PuntYards = int(in.Int())
		case "PuntsInside20":
			out.PuntsInside20 = int(in.Int())
		case "PuntAverage":
			out.PuntAverage = float64(in.Float64())
		case "Inside20YardLine":
			out.Inside20YardLine = int(in.Int())
		case "KickReturnYards":
			out.KickReturnYards = int(in.Int())
		case "KickReturnTDs":
			out.KickReturnTDs = int(in.Int())
		case "PuntReturnYards":
			out.PuntReturnYards = int(in.Int())
		case "PuntReturnTDs":
			out.PuntReturnTDs = int(in.Int())
		case "OffensivePenalties":
			out.OffensivePenalties = int(in.Int())
		case "DefensivePenalties":
			out.DefensivePenalties = int(in.Int())
		case "OffPenaltyYards":
			out.OffPenaltyYards = int(in.Int())
		case "DefPenaltyYards":
			out.DefPenaltyYards = int(in.Int())
		case "Score1Q":
			out.Score1Q = int(in.Int())
		case "Score2Q":
			out.Score2Q = int(in.Int())
		case "Score3Q":
			out.Score3Q = int(in.Int())
		case "Score4Q":
			out.Score4Q = int(in.Int())
		case "Score5Q":
			out.Score5Q = int(in.Int())
		case "Score6Q":
			out.Score6Q = int(in.Int())
		case "Score7Q":
			out.Score7Q = int(in.Int())
		case "ScoreOT":
			out.ScoreOT = int(in.Int())
		case "OffensiveScheme":
			out.OffensiveScheme = string(in.String())
		case "DefensiveScheme":
			out.DefensiveScheme = string(in.String())
		case "OffensiveSnaps":
			out.OffensiveSnaps = uint16(in.Uint16())
		case "DefensiveSnaps":
			out.DefensiveSnaps = uint16(in.Uint16())
		case "SpecialTeamSnaps":
			out.SpecialTeamSnaps = uint16(in.Uint16())
		case "GameType":
			out.GameType = uint8(in.Uint8())
		case "RevealResults":
			out.RevealResults = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeletedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs40(out *jwriter.Writer, in structs.CollegeTeamSeasonStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Uint(uint(in.SeasonID))
	}
	{
		const prefix string = ",\"Year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"GamesPlayed\":"
		out.RawString(prefix)
		out.Int(int(in.GamesPlayed))
	}
	{
		const prefix string = ",\"TotalOffensiveYards\":"
		out.RawString(prefix)
		out.Int(int(in.TotalOffensiveYards))
	}
	{
		const prefix string = ",\"TotalYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.TotalYardsAllowed))
	}
	{
		const prefix string = ",\"Fumbles\":"
		out.RawString(prefix)
		out.Int(int(in.Fumbles))
	}
	{
		const prefix string = ",\"QBRating\":"
		out.RawString(prefix)
		out.Float64(float64(in.QBRating))
	}
	{
		const prefix string = ",\"Tackles\":"
		out.RawString(prefix)
		out.Float64(float64(in.Tackles))
	}
	{
		const prefix string = ",\"Turnovers\":"
		out.RawString(prefix)
		out.Int(int(in.Turnovers))
	}
	{
		const prefix string = ",\"PointsScored\":"
		out.RawString(prefix)
		out.Int(int(in.PointsScored))
	}
	{
		const prefix string = ",\"PointsAgainst\":"
		out.RawString(prefix)
		out.Int(int(in.PointsAgainst))
	}
	{
		const prefix string = ",\"TwoPointTries\":"
		out.RawString(prefix)
		out.Int(int(in.TwoPointTries))
	}
	{
		const prefix string = ",\"TwoPointSucceed\":"
		out.RawString(prefix)
		out.Int(int(in.TwoPointSucceed))
	}
	{
		const prefix string = ",\"PassingYards\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYards))
	}
	{
		const prefix string = ",\"PassingAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.PassingAttempts))
	}
	{
		const prefix string = ",\"PassingCompletions\":"
		out.RawString(prefix)
		out.Int(int(in.PassingCompletions))
	}
	{
		const prefix string = ",\"LongestPass\":"
		out.RawString(prefix)
		out.Int(int(in.LongestPass))
	}
	{
		const prefix string = ",\"PassingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTouchdowns))
	}
	{
		const prefix string = ",\"PassingInterceptions\":"
		out.RawString(prefix)
		out.Int(int(in.PassingInterceptions))
	}
	{
		const prefix string = ",\"QBSacks\":"
		out.RawString(prefix)
		out.Int(int(in.QBSacks))
	}
	{
		const prefix string = ",\"RushAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.RushAttempts))
	}
	{
		const prefix string = ",\"RushingYards\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYards))
	}
	{
		const prefix string = ",\"RushingYardsPerAttempt\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingYardsPerAttempt))
	}
	{
		const prefix string = ",\"LongestRush\":"
		out.RawString(prefix)
		out.Int(int(in.LongestRush))
	}
	{
		const prefix string = ",\"RushingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTouchdowns))
	}
	{
		const prefix string = ",\"RushingFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.RushingFumbles))
	}
	{
		const prefix string = ",\"ReceivingTargets\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTargets))
	}
	{
		const prefix string = ",\"ReceivingCatches\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingCatches))
	}
	{
		const prefix string = ",\"ReceivingYards\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYards))
	}
	{
		const prefix string = ",\"YardsPerCatch\":"
		out.RawString(prefix)
		out.Float64(float64(in.YardsPerCatch))
	}
	{
		const prefix string = ",\"ReceivingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTouchdowns))
	}
	{
		const prefix string = ",\"ReceivingFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingFumbles))
	}
	{
		const prefix string = ",\"PassingYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsAllowed))
	}
	{
		const prefix string = ",\"PassingTDsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDsAllowed))
	}
	{
		const prefix string = ",\"PassingCompletionsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingCompletionsAllowed))
	}
	{
		const prefix string = ",\"RushingYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsAllowed))
	}
	{
		const prefix string = ",\"RushingTDsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDsAllowed))
	}
	{
		const prefix string = ",\"RushingYardsPerAttemptAllowed\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingYardsPerAttemptAllowed))
	}
	{
		const prefix string = ",\"SoloTackles\":"
		out.RawString(prefix)
		out.Int(int(in.SoloTackles))
	}
	{
		const prefix string = ",\"AssistedTackles\":"
		out.RawString(prefix)
		out.Int(int(in.AssistedTackles))
	}
	{
		const prefix string = ",\"TacklesForLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.TacklesForLoss))
	}
	{
		const prefix string = ",\"DefensiveSacks\":"
		out.RawString(prefix)
		out.Float64(float64(in.DefensiveSacks))
	}
	{
		const prefix string = ",\"ForcedFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ForcedFumbles))
	}
	{
		const prefix string = ",\"FumblesRecovered\":"
		out.RawString(prefix)
		out.Int(int(in.FumblesRecovered))
	}
	{
		const prefix string = ",\"DefensiveInterceptions\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveInterceptions))
	}
	{
		const prefix string = ",\"TurnoverYards\":"
		out.RawString(prefix)
		out.Int(int(in.TurnoverYards))
	}
	{
		const prefix string = ",\"DefensiveTDs\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveTDs))
	}
	{
		const prefix string = ",\"Safeties\":"
		out.RawString(prefix)
		out.Int(int(in.Safeties))
	}
	{
		const prefix string = ",\"ExtraPointsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsMade))
	}
	{
		const prefix string = ",\"ExtraPointsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsAttempted))
	}
	{
		const prefix string = ",\"ExtraPointPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.ExtraPointPercentage))
	}
	{
		const prefix string = ",\"FieldGoalsMade\":"
		out.RawString(prefix)
		out.Int(int(in.FieldGoalsMade))
	}
	{
		const prefix string = ",\"FieldGoalsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.FieldGoalsAttempted))
	}
	{
		const prefix string = ",\"FieldGoalsPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.FieldGoalsPercentage))
	}
	{
		const prefix string = ",\"LongestFieldGoal\":"
		out.RawString(prefix)
		out.Int(int(in.LongestFieldGoal))
	}
	{
		const prefix string = ",\"KickoffTBs\":"
		out.RawString(prefix)
		out.Int(int(in.KickoffTBs))
	}
	{
		const prefix string = ",\"PuntTBs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntTBs))
	}
	{
		const prefix string = ",\"Punts\":"
		out.RawString(prefix)
		out.Int(int(in.Punts))
	}
	{
		const prefix string = ",\"PuntYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntYards))
	}
	{
		const prefix string = ",\"PuntsInside20\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsInside20))
	}
	{
		const prefix string = ",\"PuntAverage\":"
		out.RawString(prefix)
		out.Float64(float64(in.PuntAverage))
	}
	{
		const prefix string = ",\"Inside20YardLine\":"
		out.RawString(prefix)
		out.Int(int(in.Inside20YardLine))
	}
	{
		const prefix string = ",\"KickReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnYards))
	}
	{
		const prefix string = ",\"KickReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnTDs))
	}
	{
		const prefix string = ",\"PuntReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnYards))
	}
	{
		const prefix string = ",\"PuntReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnTDs))
	}
	{
		const prefix string = ",\"OffensivePenalties\":"
		out.RawString(prefix)
		out.Int(int(in.OffensivePenalties))
	}
	{
		const prefix string = ",\"DefensivePenalties\":"
		out.RawString(prefix)
		out.Int(int(in.DefensivePenalties))
	}
	{
		const prefix string = ",\"OffPenaltyYards\":"
		out.RawString(prefix)
		out.Int(int(in.OffPenaltyYards))
	}
	{
		const prefix string = ",\"DefPenaltyYards\":"
		out.RawString(prefix)
		out.Int(int(in.DefPenaltyYards))
	}
	{
		const prefix string = ",\"Score1Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score1Q))
	}
	{
		const prefix string = ",\"Score2Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score2Q))
	}
	{
		const prefix string = ",\"Score3Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score3Q))
	}
	{
		const prefix string = ",\"Score4Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score4Q))
	}
	{
		const prefix string = ",\"Score5Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score5Q))
	}
	{
		const prefix string = ",\"Score6Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score6Q))
	}
	{
		const prefix string = ",\"Score7Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score7Q))
	}
	{
		const prefix string = ",\"ScoreOT\":"
		out.RawString(prefix)
		out.Int(int(in.ScoreOT))
	}
	{
		const prefix string = ",\"OffensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.OffensiveScheme))
	}
	{
		const prefix string = ",\"DefensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.DefensiveScheme))
	}
	{
		const prefix string = ",\"OffensiveSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.OffensiveSnaps))
	}
	{
		const prefix string = ",\"DefensiveSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DefensiveSnaps))
	}
	{
		const prefix string = ",\"SpecialTeamSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SpecialTeamSnaps))
	}
	{
		const prefix string = ",\"GameType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GameType))
	}
	{
		const prefix string = ",\"RevealResults\":"
		out.RawString(prefix)
		out.Bool(bool(in.RevealResults))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		out.Raw((in.DeletedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs39(in *jlexer.Lexer, out *structs.CollegeTeamStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TeamID":
			out.TeamID = int(in.Int())
		case "GameID":
			out.GameID = int(in.Int())
		case "WeekID":
			out.WeekID = int(in.Int())
		case "SeasonID":
			out.SeasonID = int(in.Int())
		case "OpposingTeam":
			out.OpposingTeam = string(in.String())
		case "PointsScored":
			out.PointsScored = int(in.Int())
		case "PointsAgainst":
			out.PointsAgainst = int(in.Int())
		case "TwoPointTries":
			out.TwoPointTries = int(in.Int())
		case "TwoPointSucceed":
			out.TwoPointSucceed = int(in.Int())
		case "PassingYards":
			out.PassingYards = int(in.Int())
		case "PassingAttempts":
			out.PassingAttempts = int(in.Int())
		case "PassingCompletions":
			out.PassingCompletions = int(in.Int())
		case "LongestPass":
			out.LongestPass = int(in.Int())
		case "PassingTouchdowns":
			out.PassingTouchdowns = int(in.Int())
		case "PassingInterceptions":
			out.PassingInterceptions = int(in.Int())
		case "QBRating":
			out.QBRating = int(in.Int())
		case "QBSacks":
			out.QBSacks = int(in.Int())
		case "RushAttempts":
			out.RushAttempts = int(in.Int())
		case "RushingYards":
			out.RushingYards = int(in.Int())
		case "RushingYardsPerAttempt":
			out.RushingYardsPerAttempt = float64(in.Float64())
		case "LongestRush":
			out.LongestRush = int(in.Int())
		case "RushingTouchdowns":
			out.RushingTouchdowns = int(in.Int())
		case "RushingFumbles":
			out.RushingFumbles = int(in.Int())
		case "ReceivingTargets":
			out.ReceivingTargets = int(in.Int())
		case "ReceivingCatches":
			out.ReceivingCatches = int(in.Int())
		case "ReceivingYards":
			out.ReceivingYards = int(in.Int())
		case "YardsPerCatch":
			out.YardsPerCatch = float64(in.Float64())
		case "ReceivingTouchdowns":
			out.ReceivingTouchdowns = int(in.Int())
		case "ReceivingFumbles":
			out.ReceivingFumbles = int(in.Int())
		case "PassingYardsAllowed":
			out.PassingYardsAllowed = int(in.Int())
		case "PassingTDsAllowed":
			out.PassingTDsAllowed = int(in.Int())
		case "PassingCompletionsAllowed":
			out.PassingCompletionsAllowed = int(in.Int())
		case "RushingYardsAllowed":
			out.RushingYardsAllowed = int(in.Int())
		case "RushingTDsAllowed":
			out.RushingTDsAllowed = int(in.Int())
		case "RushingYardsPerAttemptAllowed":
			out.RushingYardsPerAttemptAllowed = float64(in.Float64())
		case "SoloTackles":
			out.SoloTackles = int(in.Int())
		case "AssistedTackles":
			out.AssistedTackles = int(in.Int())
		case "TacklesForLoss":
			out.TacklesForLoss = float64(in.Float64())
		case "DefensiveSacks":
			out.DefensiveSacks = float64(in.Float64())
		case "ForcedFumbles":
			out.ForcedFumbles = int(in.Int())
		case "FumblesRecovered":
			out.FumblesRecovered = int(in.Int())
		case "DefensiveInterceptions":
			out.DefensiveInterceptions = int(in.Int())
		case "TurnoverYards":
			out.TurnoverYards = int(in.Int())
		case "DefensiveTDs":
			out.DefensiveTDs = int(in.Int())
		case "Safeties":
			out.Safeties = int(in.Int())
		case "ExtraPointsMade":
			out.ExtraPointsMade = int(in.Int())
		case "ExtraPointsAttempted":
			out.ExtraPointsAttempted = int(in.Int())
		case "ExtraPointPercentage":
			out.ExtraPointPercentage = float64(in.Float64())
		case "FieldGoalsMade":
			out.FieldGoalsMade = int(in.Int())
		case "FieldGoalsAttempted":
			out.FieldGoalsAttempted = int(in.Int())
		case "FieldGoalsPercentage":
			out.FieldGoalsPercentage = float64(in.Float64())
		case "LongestFieldGoal":
			out.LongestFieldGoal = int(in.Int())
		case "KickoffTBs":
			out.KickoffTBs = int(in.Int())
		case "PuntTBs":
			out.PuntTBs = int(in.Int())
		case "Punts":
			out.Punts = int(in.Int())
		case "PuntYards":
			out.PuntYards = int(in.Int())
		case "PuntsInside20":
			out.PuntsInside20 = int(in.Int())
		case "PuntAverage":
			out.PuntAverage = float64(in.Float64())
		case "Inside20YardLine":
			out.Inside20YardLine = int(in.Int())
		case "KickReturnYards":
			out.KickReturnYards = int(in.Int())
		case "KickReturnTDs":
			out.KickReturnTDs = int(in.Int())
		case "PuntReturnYards":
			out.PuntReturnYards = int(in.Int())
		case "PuntReturnTDs":
			out.PuntReturnTDs = int(in.Int())
		case "OffensivePenalties":
			out.OffensivePenalties = int(in.Int())
		case "DefensivePenalties":
			out.DefensivePenalties = int(in.Int())
		case "OffPenaltyYards":
			out.OffPenaltyYards = int(in.Int())
		case "DefPenaltyYards":
			out.DefPenaltyYards = int(in.Int())
		case "Score1Q":
			out.Score1Q = int(in.Int())
		case "Score2Q":
			out.Score2Q = int(in.Int())
		case "Score3Q":
			out.Score3Q = int(in.Int())
		case "Score4Q":
			out.Score4Q = int(in.Int())
		case "Score5Q":
			out.Score5Q = int(in.Int())
		case "Score6Q":
			out.Score6Q = int(in.Int())
		case "Score7Q":
			out.Score7Q = int(in.Int())
		case "ScoreOT":
			out.ScoreOT = int(in.Int())
		case "OffensiveScheme":
			out.OffensiveScheme = string(in.String())
		case "DefensiveScheme":
			out.DefensiveScheme = string(in.String())
		case "OffensiveSnaps":
			out.OffensiveSnaps = uint16(in.Uint16())
		case "DefensiveSnaps":
			out.DefensiveSnaps = uint16(in.Uint16())
		case "SpecialTeamSnaps":
			out.SpecialTeamSnaps = uint16(in.Uint16())
		case "GameType":
			out.GameType = uint8(in.Uint8())
		case "RevealResults":
			out.RevealResults = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs39(out *jwriter.Writer, in structs.CollegeTeamStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TeamID))
	}
	{
		const prefix string = ",\"GameID\":"
		out.RawString(prefix)
		out.Int(int(in.GameID))
	}
	{
		const prefix string = ",\"WeekID\":"
		out.RawString(prefix)
		out.Int(int(in.WeekID))
	}
	{
		const prefix string = ",\"SeasonID\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"OpposingTeam\":"
		out.RawString(prefix)
		out.String(string(in.OpposingTeam))
	}
	{
		const prefix string = ",\"PointsScored\":"
		out.RawString(prefix)
		out.Int(int(in.PointsScored))
	}
	{
		const prefix string = ",\"PointsAgainst\":"
		out.RawString(prefix)
		out.Int(int(in.PointsAgainst))
	}
	{
		const prefix string = ",\"TwoPointTries\":"
		out.RawString(prefix)
		out.Int(int(in.TwoPointTries))
	}
	{
		const prefix string = ",\"TwoPointSucceed\":"
		out.RawString(prefix)
		out.Int(int(in.TwoPointSucceed))
	}
	{
		const prefix string = ",\"PassingYards\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYards))
	}
	{
		const prefix string = ",\"PassingAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.PassingAttempts))
	}
	{
		const prefix string = ",\"PassingCompletions\":"
		out.RawString(prefix)
		out.Int(int(in.PassingCompletions))
	}
	{
		const prefix string = ",\"LongestPass\":"
		out.RawString(prefix)
		out.Int(int(in.LongestPass))
	}
	{
		const prefix string = ",\"PassingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTouchdowns))
	}
	{
		const prefix string = ",\"PassingInterceptions\":"
		out.RawString(prefix)
		out.Int(int(in.PassingInterceptions))
	}
	{
		const prefix string = ",\"QBRating\":"
		out.RawString(prefix)
		out.Int(int(in.QBRating))
	}
	{
		const prefix string = ",\"QBSacks\":"
		out.RawString(prefix)
		out.Int(int(in.QBSacks))
	}
	{
		const prefix string = ",\"RushAttempts\":"
		out.RawString(prefix)
		out.Int(int(in.RushAttempts))
	}
	{
		const prefix string = ",\"RushingYards\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYards))
	}
	{
		const prefix string = ",\"RushingYardsPerAttempt\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingYardsPerAttempt))
	}
	{
		const prefix string = ",\"LongestRush\":"
		out.RawString(prefix)
		out.Int(int(in.LongestRush))
	}
	{
		const prefix string = ",\"RushingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTouchdowns))
	}
	{
		const prefix string = ",\"RushingFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.RushingFumbles))
	}
	{
		const prefix string = ",\"ReceivingTargets\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTargets))
	}
	{
		const prefix string = ",\"ReceivingCatches\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingCatches))
	}
	{
		const prefix string = ",\"ReceivingYards\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingYards))
	}
	{
		const prefix string = ",\"YardsPerCatch\":"
		out.RawString(prefix)
		out.Float64(float64(in.YardsPerCatch))
	}
	{
		const prefix string = ",\"ReceivingTouchdowns\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingTouchdowns))
	}
	{
		const prefix string = ",\"ReceivingFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ReceivingFumbles))
	}
	{
		const prefix string = ",\"PassingYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingYardsAllowed))
	}
	{
		const prefix string = ",\"PassingTDsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingTDsAllowed))
	}
	{
		const prefix string = ",\"PassingCompletionsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.PassingCompletionsAllowed))
	}
	{
		const prefix string = ",\"RushingYardsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.RushingYardsAllowed))
	}
	{
		const prefix string = ",\"RushingTDsAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.RushingTDsAllowed))
	}
	{
		const prefix string = ",\"RushingYardsPerAttemptAllowed\":"
		out.RawString(prefix)
		out.Float64(float64(in.RushingYardsPerAttemptAllowed))
	}
	{
		const prefix string = ",\"SoloTackles\":"
		out.RawString(prefix)
		out.Int(int(in.SoloTackles))
	}
	{
		const prefix string = ",\"AssistedTackles\":"
		out.RawString(prefix)
		out.Int(int(in.AssistedTackles))
	}
	{
		const prefix string = ",\"TacklesForLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.TacklesForLoss))
	}
	{
		const prefix string = ",\"DefensiveSacks\":"
		out.RawString(prefix)
		out.Float64(float64(in.DefensiveSacks))
	}
	{
		const prefix string = ",\"ForcedFumbles\":"
		out.RawString(prefix)
		out.Int(int(in.ForcedFumbles))
	}
	{
		const prefix string = ",\"FumblesRecovered\":"
		out.RawString(prefix)
		out.Int(int(in.FumblesRecovered))
	}
	{
		const prefix string = ",\"DefensiveInterceptions\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveInterceptions))
	}
	{
		const prefix string = ",\"TurnoverYards\":"
		out.RawString(prefix)
		out.Int(int(in.TurnoverYards))
	}
	{
		const prefix string = ",\"DefensiveTDs\":"
		out.RawString(prefix)
		out.Int(int(in.DefensiveTDs))
	}
	{
		const prefix string = ",\"Safeties\":"
		out.RawString(prefix)
		out.Int(int(in.Safeties))
	}
	{
		const prefix string = ",\"ExtraPointsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsMade))
	}
	{
		const prefix string = ",\"ExtraPointsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.ExtraPointsAttempted))
	}
	{
		const prefix string = ",\"ExtraPointPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.ExtraPointPercentage))
	}
	{
		const prefix string = ",\"FieldGoalsMade\":"
		out.RawString(prefix)
		out.Int(int(in.FieldGoalsMade))
	}
	{
		const prefix string = ",\"FieldGoalsAttempted\":"
		out.RawString(prefix)
		out.Int(int(in.FieldGoalsAttempted))
	}
	{
		const prefix string = ",\"FieldGoalsPercentage\":"
		out.RawString(prefix)
		out.Float64(float64(in.FieldGoalsPercentage))
	}
	{
		const prefix string = ",\"LongestFieldGoal\":"
		out.RawString(prefix)
		out.Int(int(in.LongestFieldGoal))
	}
	{
		const prefix string = ",\"KickoffTBs\":"
		out.RawString(prefix)
		out.Int(int(in.KickoffTBs))
	}
	{
		const prefix string = ",\"PuntTBs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntTBs))
	}
	{
		const prefix string = ",\"Punts\":"
		out.RawString(prefix)
		out.Int(int(in.Punts))
	}
	{
		const prefix string = ",\"PuntYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntYards))
	}
	{
		const prefix string = ",\"PuntsInside20\":"
		out.RawString(prefix)
		out.Int(int(in.PuntsInside20))
	}
	{
		const prefix string = ",\"PuntAverage\":"
		out.RawString(prefix)
		out.Float64(float64(in.PuntAverage))
	}
	{
		const prefix string = ",\"Inside20YardLine\":"
		out.RawString(prefix)
		out.Int(int(in.Inside20YardLine))
	}
	{
		const prefix string = ",\"KickReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnYards))
	}
	{
		const prefix string = ",\"KickReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.KickReturnTDs))
	}
	{
		const prefix string = ",\"PuntReturnYards\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnYards))
	}
	{
		const prefix string = ",\"PuntReturnTDs\":"
		out.RawString(prefix)
		out.Int(int(in.PuntReturnTDs))
	}
	{
		const prefix string = ",\"OffensivePenalties\":"
		out.RawString(prefix)
		out.Int(int(in.OffensivePenalties))
	}
	{
		const prefix string = ",\"DefensivePenalties\":"
		out.RawString(prefix)
		out.Int(int(in.DefensivePenalties))
	}
	{
		const prefix string = ",\"OffPenaltyYards\":"
		out.RawString(prefix)
		out.Int(int(in.OffPenaltyYards))
	}
	{
		const prefix string = ",\"DefPenaltyYards\":"
		out.RawString(prefix)
		out.Int(int(in.DefPenaltyYards))
	}
	{
		const prefix string = ",\"Score1Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score1Q))
	}
	{
		const prefix string = ",\"Score2Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score2Q))
	}
	{
		const prefix string = ",\"Score3Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score3Q))
	}
	{
		const prefix string = ",\"Score4Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score4Q))
	}
	{
		const prefix string = ",\"Score5Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score5Q))
	}
	{
		const prefix string = ",\"Score6Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score6Q))
	}
	{
		const prefix string = ",\"Score7Q\":"
		out.RawString(prefix)
		out.Int(int(in.Score7Q))
	}
	{
		const prefix string = ",\"ScoreOT\":"
		out.RawString(prefix)
		out.Int(int(in.ScoreOT))
	}
	{
		const prefix string = ",\"OffensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.OffensiveScheme))
	}
	{
		const prefix string = ",\"DefensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.DefensiveScheme))
	}
	{
		const prefix string = ",\"OffensiveSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.OffensiveSnaps))
	}
	{
		const prefix string = ",\"DefensiveSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DefensiveSnaps))
	}
	{
		const prefix string = ",\"SpecialTeamSnaps\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SpecialTeamSnaps))
	}
	{
		const prefix string = ",\"GameType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GameType))
	}
	{
		const prefix string = ",\"RevealResults\":"
		out.RawString(prefix)
		out.Bool(bool(in.RevealResults))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
func easyjson83226b63DecodeGithubComCalebRoseSimFBAStructs38(in *jlexer.Lexer, out *structs.CollegeCoach) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CoachName":
			out.CoachName = string(in.String())
		case "Age":
			out.Age = int(in.Int())
		case "TeamID":
			out.TeamID = uint(in.Uint())
		case "Team":
			out.Team = string(in.String())
		case "AlmaMaterID":
			out.AlmaMaterID = uint(in.Uint())
		case "AlmaMater":
			out.AlmaMater = string(in.String())
		case "FormerPlayerID":
			out.FormerPlayerID = uint(in.Uint())
		case "Prestige":
			out.Prestige = int(in.Int())
		case "PointMin":
			out.PointMin = int(in.Int())
		case "PointMax":
			out.PointMax = int(in.Int())
		case "StarMin":
			out.StarMin = int(in.Int())
		case "StarMax":
			out.StarMax = int(in.Int())
		case "Odds1":
			out.Odds1 = int(in.Int())
		case "Odds2":
			out.Odds2 = int(in.Int())
		case "Odds3":
			out.Odds3 = int(in.Int())
		case "Odds4":
			out.Odds4 = int(in.Int())
		case "Odds5":
			out.Odds5 = int(in.Int())
		case "PositionOne":
			out.PositionOne = string(in.String())
		case "PositionTwo":
			out.PositionTwo = string(in.String())
		case "PositionThree":
			out.PositionThree = string(in.String())
		case "OffensiveScheme":
			out.OffensiveScheme = string(in.String())
		case "DefensiveScheme":
			out.DefensiveScheme = string(in.String())
		case "TeambuildingPreference":
			out.TeambuildingPreference = string(in.String())
		case "CareerPreference":
			out.CareerPreference = string(in.String())
		case "PromiseTendency":
			out.PromiseTendency = string(in.String())
		case "PortalReputation":
			out.PortalReputation = int(in.Int())
		case "SchoolTenure":
			out.SchoolTenure = int(in.Int())
		case "CareerTenure":
			out.CareerTenure = int(in.Int())
		case "ContractLength":
			out.ContractLength = int(in.Int())
		case "YearsRemaining":
			out.YearsRemaining = int(in.Int())
		case "OverallWins":
			out.OverallWins = int(in.Int())
		case "OverallLosses":
			out.OverallLosses = int(in.Int())
		case "OverallConferenceChampionships":
			out.OverallConferenceChampionships = int(in.Int())
		case "BowlWins":
			out.BowlWins = int(in.Int())
		case "BowlLosses":
			out.BowlLosses = int(in.Int())
		case "PlayoffWins":
			out.PlayoffWins = int(in.Int())
		case "PlayoffLosses":
			out.PlayoffLosses = int(in.Int())
		case "NationalChampionships":
			out.NationalChampionships = int(in.Int())
		case "IsUser":
			out.IsUser = bool(in.Bool())
		case "IsActive":
			out.IsActive = bool(in.Bool())
		case "IsRetired":
			out.IsRetired = bool(in.Bool())
		case "IsFormerPlayer":
			out.IsFormerPlayer = bool(in.Bool())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson83226b63EncodeGithubComCalebRoseSimFBAStructs38(out *jwriter.Writer, in structs.CollegeCoach) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CoachName\":"
		out.RawString(prefix[1:])
		out.String(string(in.CoachName))
	}
	{
		const prefix string = ",\"Age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"TeamID\":"
		out.RawString(prefix)
		out.Uint(uint(in.TeamID))
	}
	{
		const prefix string = ",\"Team\":"
		out.RawString(prefix)
		out.String(string(in.Team))
	}
	{
		const prefix string = ",\"AlmaMaterID\":"
		out.RawString(prefix)
		out.Uint(uint(in.AlmaMaterID))
	}
	{
		const prefix string = ",\"AlmaMater\":"
		out.RawString(prefix)
		out.String(string(in.AlmaMater))
	}
	{
		const prefix string = ",\"FormerPlayerID\":"
		out.RawString(prefix)
		out.Uint(uint(in.FormerPlayerID))
	}
	{
		const prefix string = ",\"Prestige\":"
		out.RawString(prefix)
		out.Int(int(in.Prestige))
	}
	{
		const prefix string = ",\"PointMin\":"
		out.RawString(prefix)
		out.Int(int(in.PointMin))
	}
	{
		const prefix string = ",\"PointMax\":"
		out.RawString(prefix)
		out.Int(int(in.PointMax))
	}
	{
		const prefix string = ",\"StarMin\":"
		out.RawString(prefix)
		out.Int(int(in.StarMin))
	}
	{
		const prefix string = ",\"StarMax\":"
		out.RawString(prefix)
		out.Int(int(in.StarMax))
	}
	{
		const prefix string = ",\"Odds1\":"
		out.RawString(prefix)
		out.Int(int(in.Odds1))
	}
	{
		const prefix string = ",\"Odds2\":"
		out.RawString(prefix)
		out.Int(int(in.Odds2))
	}
	{
		const prefix string = ",\"Odds3\":"
		out.RawString(prefix)
		out.Int(int(in.Odds3))
	}
	{
		const prefix string = ",\"Odds4\":"
		out.RawString(prefix)
		out.Int(int(in.Odds4))
	}
	{
		const prefix string = ",\"Odds5\":"
		out.RawString(prefix)
		out.Int(int(in.Odds5))
	}
	{
		const prefix string = ",\"PositionOne\":"
		out.RawString(prefix)
		out.String(string(in.PositionOne))
	}
	{
		const prefix string = ",\"PositionTwo\":"
		out.RawString(prefix)
		out.String(string(in.PositionTwo))
	}
	{
		const prefix string = ",\"PositionThree\":"
		out.RawString(prefix)
		out.String(string(in.PositionThree))
	}
	{
		const prefix string = ",\"OffensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.OffensiveScheme))
	}
	{
		const prefix string = ",\"DefensiveScheme\":"
		out.RawString(prefix)
		out.String(string(in.DefensiveScheme))
	}
	{
		const prefix string = ",\"TeambuildingPreference\":"
		out.RawString(prefix)
		out.String(string(in.TeambuildingPreference))
	}
	{
		const prefix string = ",\"CareerPreference\":"
		out.RawString(prefix)
		out.String(string(in.CareerPreference))
	}
	{
		const prefix string = ",\"PromiseTendency\":"
		out.RawString(prefix)
		out.String(string(in.PromiseTendency))
	}
	{
		const prefix string = ",\"PortalReputation\":"
		out.RawString(prefix)
		out.Int(int(in.PortalReputation))
	}
	{
		const prefix string = ",\"SchoolTenure\":"
		out.RawString(prefix)
		out.Int(int(in.SchoolTenure))
	}
	{
		const prefix string = ",\"CareerTenure\":"
		out.RawString(prefix)
		out.Int(int(in.CareerTenure))
	}
	{
		const prefix string = ",\"ContractLength\":"
		out.RawString(prefix)
		out.Int(int(in.ContractLength))
	}
	{
		const prefix string = ",\"YearsRemaining\":"
		out.RawString(prefix)
		out.Int(int(in.YearsRemaining))
	}
	{
		const prefix string = ",\"OverallWins\":"
		out.RawString(prefix)
		out.Int(int(in.OverallWins))
	}
	{
		const prefix string = ",\"OverallLosses\":"
		out.RawString(prefix)
		out.Int(int(in.OverallLosses))
	}
	{
		const prefix string = ",\"OverallConferenceChampionships\":"
		out.RawString(prefix)
		out.Int(int(in.OverallConferenceChampionships))
	}
	{
		const prefix string = ",\"BowlWins\":"
		out.RawString(prefix)
		out.Int(int(in.BowlWins))
	}
	{
		const prefix string = ",\"BowlLosses\":"
		out.RawString(prefix)
		out.Int(int(in.BowlLosses))
	}
	{
		const prefix string = ",\"PlayoffWins\":"
		out.RawString(prefix)
		out.Int(int(in.PlayoffWins))
	}
	{
		const prefix string = ",\"PlayoffLosses\":"
		out.RawString(prefix)
		out.Int(int(in.PlayoffLosses))
	}
	{
		const prefix string = ",\"NationalChampionships\":"
		out.RawString(prefix)
		out.Int(int(in.NationalChampionships))
	}
	{
		const prefix string = ",\"IsUser\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUser))
	}
	{
		const prefix string = ",\"IsActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"IsRetired\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRetired))
	}
	{
		const prefix string = ",\"IsFormerPlayer\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFormerPlayer))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}
