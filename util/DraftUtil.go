package util

func GetNumericalSortValueByLetterGrade(grade string) int {
	if grade == "A+" {
		return 1
	} else if grade == "A" {
		return 2
	} else if grade == "A-" {
		return 3
	} else if grade == "B+" {
		return 4
	} else if grade == "B" {
		return 5
	} else if grade == "B-" {
		return 6
	} else if grade == "C+" {
		return 7
	} else if grade == "C" {
		return 8
	} else if grade == "C-" {
		return 9
	} else if grade == "D+" {
		return 10
	} else if grade == "D" {
		return 11
	} else if grade == "D-" {
		return 12
	}
	return 13
}

func GetDrafteeSalary(pick, year, round uint, isSalary bool) float64 {
	var valueMap [39][4]float64
	if isSalary {
		valueMap = getSalaryMap()
	} else {
		valueMap = getBonusMap()
	}
	if pick >= 1 && pick <= 32 && year >= 1 && year <= 4 {
		return valueMap[pick-1][year-1]
	}
	return valueMap[30+round][year-1]
}

func getSalaryMap() [39][4]float64 {
	return [39][4]float64{
		{3.65, 3.65, 3.65, 3.65},
		{3.10, 3.10, 3.10, 3.10},
		{3.10, 3.10, 3.10, 3.10},
		{3.10, 3.10, 3.10, 3.10},
		{3.10, 3.10, 3.10, 3.10},
		{2.55, 2.55, 2.55, 2.55},
		{2.55, 2.55, 2.55, 2.55},
		{2.55, 2.55, 2.55, 2.55},
		{2.55, 2.55, 2.55, 2.55},
		{2.55, 2.55, 2.55, 2.55},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.15, 1.15, 1.15, 1.15},
		{0.9, 0.9, 0.9, 0.9},
		{0.95, 0.95, 0.95, 0.95},
		{0.8, 0.8, 0.8, 0.8},
		{1, 1, 1, 1},
		{0.9, 0.9, 0.9, 0.9},
		{0.9, 0.9, 0.9, 0.9},
		/* BONUS BY ROUND
		{1, 1, 1, 1},
		{0.8, 0.8, 0.8, 0.8},
		{0.3, 0.3, 0.3, 0.3},
		{0.25, 0.25, 0.25, 0.25},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
		*/
	}
}

func getBonusMap() [39][4]float64 {
	return [39][4]float64{
		{3.25, 3.25, 3.25, 3.25},
		{3.10, 3.10, 3.10, 3.10},
		{3.10, 3.10, 3.10, 3.10},
		{3.10, 3.10, 3.10, 3.10},
		{3.10, 3.10, 3.10, 3.10},
		{2.55, 2.55, 2.55, 2.55},
		{2.55, 2.55, 2.55, 2.55},
		{2.55, 2.55, 2.55, 2.55},
		{2.55, 2.55, 2.55, 2.55},
		{2.55, 2.55, 2.55, 2.55},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{2.10, 2.10, 2.10, 2.10},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.70, 1.70, 1.70, 1.70},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.40, 1.40, 1.40, 1.40},
		{1.10, 1.10, 1.10, 1.10},
		{0.8, 0.8, 0.8, 0.8},
		{0.35, 0.35, 0.35, 0.35},
		{0.3, 0.3, 0.3, 0.3},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
	}
}

func GetDraftPickValue(round int, pickInRound int) float64 {
	// Map ranges to values (rough estimate)
	switch round {
	case 1:
		switch {
		case pickInRound == 1:
			return 17.89
		case pickInRound <= 5:
			return 15.19
		case pickInRound <= 10:
			return 12.50
		case pickInRound <= 16:
			return 10.29
		case pickInRound <= 24:
			return 8.33
		default:
			return 6.86
		}
	case 2:
		return 5.47
	case 3:
		return 4.97
	case 4:
		return 2.62
	case 5:
		return 2.21
	case 6:
		return 1.40
	case 7:
		return 1.35
	default:
		return 0.0
	}
}
